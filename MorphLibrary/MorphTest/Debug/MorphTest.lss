
MorphTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00001774  00001808  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001774  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800102  00800102  0000180a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000180a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000183c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e0d  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d8  00000000  00000000  0000279d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010cc  00000000  00000000  00003075  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00004144  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000860  00000000  00000000  000043e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000455  00000000  00000000  00004c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005095  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__ctors_end>
       4:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
       8:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
       c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      10:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      14:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      18:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      1c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      20:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      24:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      28:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      30:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      34:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      38:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      3c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      40:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      44:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      48:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      4c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      50:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      54:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      58:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      5c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      60:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      64:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__bad_interrupt>
      68:	5a 01       	movw	r10, r20
      6a:	64 01       	movw	r12, r8
      6c:	2c 02       	muls	r18, r28
      6e:	2c 02       	muls	r18, r28
      70:	2c 02       	muls	r18, r28
      72:	2c 02       	muls	r18, r28
      74:	6d 01       	movw	r12, r26
      76:	78 01       	movw	r14, r16
      78:	81 01       	movw	r16, r2
      7a:	8b 01       	movw	r16, r22
      7c:	96 01       	movw	r18, r12
      7e:	9f 01       	movw	r18, r30
      80:	a6 01       	movw	r20, r12
      82:	ae 01       	movw	r20, r28
      84:	b7 01       	movw	r22, r14
      86:	c1 01       	movw	r24, r2
      88:	ca 01       	movw	r24, r20
      8a:	2c 02       	muls	r18, r28
      8c:	2c 02       	muls	r18, r28
      8e:	2c 02       	muls	r18, r28
      90:	2c 02       	muls	r18, r28
      92:	2c 02       	muls	r18, r28
      94:	d4 01       	movw	r26, r8
      96:	db 01       	movw	r26, r22
      98:	e3 01       	movw	r28, r6
      9a:	ec 01       	movw	r28, r24
      9c:	f6 01       	movw	r30, r12
      9e:	ff 01       	movw	r30, r30
      a0:	09 02       	muls	r16, r25
      a2:	14 02       	muls	r17, r20
      a4:	1b 02       	muls	r17, r27
      a6:	23 02       	muls	r18, r19
      a8:	5b 02       	muls	r21, r27
      aa:	70 02       	muls	r23, r16
      ac:	21 04       	cpc	r2, r1
      ae:	21 04       	cpc	r2, r1
      b0:	21 04       	cpc	r2, r1
      b2:	21 04       	cpc	r2, r1
      b4:	85 02       	muls	r24, r21
      b6:	9d 02       	muls	r25, r29
      b8:	b1 02       	muls	r27, r17
      ba:	c8 02       	muls	r28, r24
      bc:	e0 02       	muls	r30, r16
      be:	f4 02       	muls	r31, r20
      c0:	01 03       	mulsu	r16, r17
      c2:	12 03       	mulsu	r17, r18
      c4:	25 03       	mulsu	r18, r21
      c6:	3a 03       	fmul	r19, r18
      c8:	4f 03       	fmul	r20, r23
      ca:	21 04       	cpc	r2, r1
      cc:	21 04       	cpc	r2, r1
      ce:	21 04       	cpc	r2, r1
      d0:	21 04       	cpc	r2, r1
      d2:	21 04       	cpc	r2, r1
      d4:	66 03       	mulsu	r22, r22
      d6:	73 03       	mulsu	r23, r19
      d8:	84 03       	fmuls	r16, r20
      da:	97 03       	fmuls	r17, r23
      dc:	ac 03       	fmulsu	r18, r20
      de:	c1 03       	fmuls	r20, r17
      e0:	d8 03       	fmulsu	r21, r16
      e2:	f0 03       	fmuls	r23, r16
      e4:	fd 03       	fmulsu	r23, r21
      e6:	0e 04       	cpc	r0, r14
      e8:	46 04       	cpc	r4, r6
      ea:	50 04       	cpc	r5, r0
      ec:	18 05       	cpc	r17, r8
      ee:	18 05       	cpc	r17, r8
      f0:	18 05       	cpc	r17, r8
      f2:	18 05       	cpc	r17, r8
      f4:	59 04       	cpc	r5, r9
      f6:	64 04       	cpc	r6, r4
      f8:	6d 04       	cpc	r6, r13
      fa:	77 04       	cpc	r7, r7
      fc:	82 04       	cpc	r8, r2
      fe:	8b 04       	cpc	r8, r11
     100:	92 04       	cpc	r9, r2
     102:	9a 04       	cpc	r9, r10
     104:	a3 04       	cpc	r10, r3
     106:	ad 04       	cpc	r10, r13
     108:	b6 04       	cpc	r11, r6
     10a:	18 05       	cpc	r17, r8
     10c:	18 05       	cpc	r17, r8
     10e:	18 05       	cpc	r17, r8
     110:	18 05       	cpc	r17, r8
     112:	18 05       	cpc	r17, r8
     114:	c0 04       	cpc	r12, r0
     116:	c7 04       	cpc	r12, r7
     118:	cf 04       	cpc	r12, r15
     11a:	d8 04       	cpc	r13, r8
     11c:	e2 04       	cpc	r14, r2
     11e:	eb 04       	cpc	r14, r11
     120:	f5 04       	cpc	r15, r5
     122:	00 05       	cpc	r16, r0
     124:	07 05       	cpc	r16, r7
     126:	0f 05       	cpc	r16, r15
     128:	47 05       	cpc	r20, r7
     12a:	6a 05       	cpc	r22, r10
     12c:	3d 08       	sbc	r3, r13
     12e:	3d 08       	sbc	r3, r13
     130:	3d 08       	sbc	r3, r13
     132:	3d 08       	sbc	r3, r13
     134:	8c 05       	cpc	r24, r12
     136:	b3 05       	cpc	r27, r3
     138:	d5 05       	cpc	r29, r5
     13a:	fa 05       	cpc	r31, r10
     13c:	21 06       	cpc	r2, r17
     13e:	43 06       	cpc	r4, r19
     140:	5b 06       	cpc	r5, r27
     142:	78 06       	cpc	r7, r24
     144:	98 06       	cpc	r9, r24
     146:	bb 06       	cpc	r11, r27
     148:	dd 06       	cpc	r13, r29
     14a:	3d 08       	sbc	r3, r13
     14c:	3d 08       	sbc	r3, r13
     14e:	3d 08       	sbc	r3, r13
     150:	3d 08       	sbc	r3, r13
     152:	3d 08       	sbc	r3, r13
     154:	02 07       	cpc	r16, r18
     156:	1a 07       	cpc	r17, r26
     158:	37 07       	cpc	r19, r23
     15a:	57 07       	cpc	r21, r23
     15c:	7a 07       	cpc	r23, r26
     15e:	9c 07       	cpc	r25, r28
     160:	c1 07       	cpc	r28, r17
     162:	e8 07       	cpc	r30, r24
     164:	00 08       	sbc	r0, r0
     166:	1d 08       	sbc	r1, r13
     168:	90 08       	sbc	r9, r0
     16a:	af 08       	sbc	r10, r15
     16c:	34 0b       	sbc	r19, r20
     16e:	34 0b       	sbc	r19, r20
     170:	34 0b       	sbc	r19, r20
     172:	34 0b       	sbc	r19, r20
     174:	cc 08       	sbc	r12, r12
     176:	ed 08       	sbc	r14, r13
     178:	0c 09       	sbc	r16, r12
     17a:	2b 09       	sbc	r18, r11
     17c:	4c 09       	sbc	r20, r12
     17e:	6b 09       	sbc	r22, r11
     180:	84 09       	sbc	r24, r4
     182:	9f 09       	sbc	r25, r15
     184:	bc 09       	sbc	r27, r12
     186:	db 09       	sbc	r29, r11
     188:	f8 09       	sbc	r31, r8
     18a:	34 0b       	sbc	r19, r20
     18c:	34 0b       	sbc	r19, r20
     18e:	34 0b       	sbc	r19, r20
     190:	34 0b       	sbc	r19, r20
     192:	34 0b       	sbc	r19, r20
     194:	17 0a       	sbc	r1, r23
     196:	30 0a       	sbc	r3, r16
     198:	4b 0a       	sbc	r4, r27
     19a:	68 0a       	sbc	r6, r24
     19c:	87 0a       	sbc	r8, r23
     19e:	a4 0a       	sbc	r10, r20
     1a0:	c3 0a       	sbc	r12, r19
     1a2:	e4 0a       	sbc	r14, r20
     1a4:	fd 0a       	sbc	r15, r29
     1a6:	18 0b       	sbc	r17, r24

000001a8 <__ctors_end>:
     1a8:	11 24       	eor	r1, r1
     1aa:	1f be       	out	0x3f, r1	; 63
     1ac:	cf ef       	ldi	r28, 0xFF	; 255
     1ae:	d8 e0       	ldi	r29, 0x08	; 8
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	cd bf       	out	0x3d, r28	; 61

000001b4 <__do_copy_data>:
     1b4:	11 e0       	ldi	r17, 0x01	; 1
     1b6:	a0 e0       	ldi	r26, 0x00	; 0
     1b8:	b1 e0       	ldi	r27, 0x01	; 1
     1ba:	e4 e7       	ldi	r30, 0x74	; 116
     1bc:	f7 e1       	ldi	r31, 0x17	; 23
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <__do_copy_data+0x10>
     1c0:	05 90       	lpm	r0, Z+
     1c2:	0d 92       	st	X+, r0
     1c4:	a2 30       	cpi	r26, 0x02	; 2
     1c6:	b1 07       	cpc	r27, r17
     1c8:	d9 f7       	brne	.-10     	; 0x1c0 <__do_copy_data+0xc>

000001ca <__do_clear_bss>:
     1ca:	21 e0       	ldi	r18, 0x01	; 1
     1cc:	a2 e0       	ldi	r26, 0x02	; 2
     1ce:	b1 e0       	ldi	r27, 0x01	; 1
     1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <.do_clear_bss_start>

000001d2 <.do_clear_bss_loop>:
     1d2:	1d 92       	st	X+, r1

000001d4 <.do_clear_bss_start>:
     1d4:	ac 30       	cpi	r26, 0x0C	; 12
     1d6:	b2 07       	cpc	r27, r18
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <.do_clear_bss_loop>
     1da:	0e 94 0f 01 	call	0x21e	; 0x21e <main>
     1de:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <_exit>

000001e2 <__bad_interrupt>:
     1e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e6 <MorphConfig_init>:
void morph_implementation_test();

// Does the configuration during run-time
// Configuration only involves setting function pointer values.
static void MorphConfig_init()
{
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62

	//MorphGPIO_register_set_pin_value_function(&morph_config_gpio_set_pin_value);

	MorphGPIO_register_get_pin_value_function(&morph_config_gpio_get_pin_value);
     1ee:	8d e3       	ldi	r24, 0x3D	; 61
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MorphGPIO_register_get_pin_value_function>
	
	MorphGPIO_register_set_pin_direction_function(&morph_config_gpio_set_pin_direction);
     1f6:	87 e3       	ldi	r24, 0x37	; 55
     1f8:	92 e0       	ldi	r25, 0x02	; 2
     1fa:	0e 94 83 0b 	call	0x1706	; 0x1706 <MorphGPIO_register_set_pin_direction_function>
	
	MorphGPIO_register_get_pin_direction_function(&morph_config_gpio_get_pin_direction);
     1fe:	89 e2       	ldi	r24, 0x29	; 41
     200:	94 e0       	ldi	r25, 0x04	; 4
     202:	0e 94 88 0b 	call	0x1710	; 0x1710 <MorphGPIO_register_get_pin_direction_function>

	MorphGPIO_register_set_pin_pull_state_function(&morph_config_gpio_set_pin_pull_state);
     206:	83 e2       	ldi	r24, 0x23	; 35
     208:	95 e0       	ldi	r25, 0x05	; 5
     20a:	0e 94 8d 0b 	call	0x171a	; 0x171a <MorphGPIO_register_set_pin_pull_state_function>
	
	MorphGPIO_register_get_pin_pull_state_function(&morph_config_gpio_get_pin_pull_state);	
     20e:	83 e7       	ldi	r24, 0x73	; 115
     210:	98 e0       	ldi	r25, 0x08	; 8
     212:	0e 94 92 0b 	call	0x1724	; 0x1724 <MorphGPIO_register_get_pin_pull_state_function>
	
}
     216:	00 00       	nop
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <main>:

// Including assert.h for testing.
#include <assert.h>

int main(void)
{
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	00 d0       	rcall	.+0      	; 0x224 <main+0x6>
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
	
	MorphConfig_init();
     228:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <MorphConfig_init>
	
	MorphGPIO_set_pin_value(1, High);
     22c:	61 e0       	ldi	r22, 0x01	; 1
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	0e 94 97 0b 	call	0x172e	; 0x172e <MorphGPIO_set_pin_value>

	uint8_t pin_value = MorphGPIO_get_pin_value(1);	
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 9d 0b 	call	0x173a	; 0x173a <MorphGPIO_get_pin_value>
     23a:	89 83       	std	Y+1, r24	; 0x01

	MorphGPIO_set_pin_value(1, Low);
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	0e 94 97 0b 	call	0x172e	; 0x172e <MorphGPIO_set_pin_value>

	pin_value = MorphGPIO_get_pin_value(1);
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	0e 94 9d 0b 	call	0x173a	; 0x173a <MorphGPIO_get_pin_value>
     24a:	89 83       	std	Y+1, r24	; 0x01

	MorphGPIO_set_pin_direction(1, Input);
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	0e 94 a3 0b 	call	0x1746	; 0x1746 <MorphGPIO_set_pin_direction>

	uint8_t direction = MorphGPIO_get_pin_direction(1);
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	0e 94 a9 0b 	call	0x1752	; 0x1752 <MorphGPIO_get_pin_direction>
     25a:	8a 83       	std	Y+2, r24	; 0x02

	MorphGPIO_set_pin_direction(1, Output);
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	0e 94 a3 0b 	call	0x1746	; 0x1746 <MorphGPIO_set_pin_direction>

	direction = MorphGPIO_get_pin_direction(1);		
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	0e 94 a9 0b 	call	0x1752	; 0x1752 <MorphGPIO_get_pin_direction>
     26a:	8a 83       	std	Y+2, r24	; 0x02

	MorphGPIO_set_pin_direction(1, Output);
     26c:	61 e0       	ldi	r22, 0x01	; 1
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	0e 94 a3 0b 	call	0x1746	; 0x1746 <MorphGPIO_set_pin_direction>
	
	MorphGPIO_imp_test();
     274:	0e 94 af 0b 	call	0x175e	; 0x175e <MorphGPIO_imp_test>
    while (1) 
    {
		
		
		
    }
     278:	ff cf       	rjmp	.-2      	; 0x278 <main+0x5a>

0000027a <morph_config_gpio_get_pin_value>:
	}
	
}

enum MorphPinValue morph_config_gpio_get_pin_value(MorphPinNumber pn)
{
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	00 d0       	rcall	.+0      	; 0x280 <morph_config_gpio_get_pin_value+0x6>
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62
     284:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t value = 0;
     286:	19 82       	std	Y+1, r1	; 0x01
	
	switch(pn)
     288:	8a 81       	ldd	r24, Y+2	; 0x02
     28a:	88 2f       	mov	r24, r24
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	09 2e       	mov	r0, r25
     290:	00 0c       	add	r0, r0
     292:	aa 0b       	sbc	r26, r26
     294:	bb 0b       	sbc	r27, r27
     296:	41 e0       	ldi	r20, 0x01	; 1
     298:	50 e0       	ldi	r21, 0x00	; 0
     29a:	2f e1       	ldi	r18, 0x1F	; 31
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	84 1b       	sub	r24, r20
     2a0:	95 0b       	sbc	r25, r21
     2a2:	28 17       	cp	r18, r24
     2a4:	39 07       	cpc	r19, r25
     2a6:	08 f4       	brcc	.+2      	; 0x2aa <morph_config_gpio_get_pin_value+0x30>
     2a8:	d8 c0       	rjmp	.+432    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     2aa:	8c 5c       	subi	r24, 0xCC	; 204
     2ac:	9f 4f       	sbci	r25, 0xFF	; 255
     2ae:	fc 01       	movw	r30, r24
     2b0:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__tablejump2__>
	{
				
		case 1:
		
		// PD3
		value = ((PORTD >> 3) & 0x1);
     2b4:	8b e2       	ldi	r24, 0x2B	; 43
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	fc 01       	movw	r30, r24
     2ba:	80 81       	ld	r24, Z
     2bc:	86 95       	lsr	r24
     2be:	86 95       	lsr	r24
     2c0:	86 95       	lsr	r24
     2c2:	81 70       	andi	r24, 0x01	; 1
     2c4:	89 83       	std	Y+1, r24	; 0x01
		
		break;
     2c6:	c9 c0       	rjmp	.+402    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				
		case 2:
				
		// PD4
		value = ((PORTD >> 4) & 0x1);
     2c8:	8b e2       	ldi	r24, 0x2B	; 43
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	fc 01       	movw	r30, r24
     2ce:	80 81       	ld	r24, Z
     2d0:	82 95       	swap	r24
     2d2:	8f 70       	andi	r24, 0x0F	; 15
     2d4:	81 70       	andi	r24, 0x01	; 1
     2d6:	89 83       	std	Y+1, r24	; 0x01

		break;
     2d8:	c0 c0       	rjmp	.+384    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		break;
				
		case 7:
				
		// PB6
		value = ((PORTB >> 6) & 0x1);
     2da:	85 e2       	ldi	r24, 0x25	; 37
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	fc 01       	movw	r30, r24
     2e0:	80 81       	ld	r24, Z
     2e2:	82 95       	swap	r24
     2e4:	86 95       	lsr	r24
     2e6:	86 95       	lsr	r24
     2e8:	83 70       	andi	r24, 0x03	; 3
     2ea:	81 70       	andi	r24, 0x01	; 1
     2ec:	89 83       	std	Y+1, r24	; 0x01
		break;
     2ee:	b5 c0       	rjmp	.+362    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				
		case 8:
				
		// PB7
		value = ((PORTB >> 7) & 0x1);
     2f0:	85 e2       	ldi	r24, 0x25	; 37
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	fc 01       	movw	r30, r24
     2f6:	80 81       	ld	r24, Z
     2f8:	88 1f       	adc	r24, r24
     2fa:	88 27       	eor	r24, r24
     2fc:	88 1f       	adc	r24, r24
     2fe:	89 83       	std	Y+1, r24	; 0x01
		break;
     300:	ac c0       	rjmp	.+344    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				
		case 9:
				
		// PD5
		value = ((PORTD >> 5) & 0x1);
     302:	8b e2       	ldi	r24, 0x2B	; 43
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	fc 01       	movw	r30, r24
     308:	80 81       	ld	r24, Z
     30a:	82 95       	swap	r24
     30c:	86 95       	lsr	r24
     30e:	87 70       	andi	r24, 0x07	; 7
     310:	81 70       	andi	r24, 0x01	; 1
     312:	89 83       	std	Y+1, r24	; 0x01
		break;
     314:	a2 c0       	rjmp	.+324    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				
		case 10:
				
		// PD6
		value = ((PORTD >> 6) & 0x1);
     316:	8b e2       	ldi	r24, 0x2B	; 43
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	fc 01       	movw	r30, r24
     31c:	80 81       	ld	r24, Z
     31e:	82 95       	swap	r24
     320:	86 95       	lsr	r24
     322:	86 95       	lsr	r24
     324:	83 70       	andi	r24, 0x03	; 3
     326:	81 70       	andi	r24, 0x01	; 1
     328:	89 83       	std	Y+1, r24	; 0x01
		break;
     32a:	97 c0       	rjmp	.+302    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				
		case 11:
				
		// PD7
		value = ((PORTD >> 7) & 0x1);
     32c:	8b e2       	ldi	r24, 0x2B	; 43
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	fc 01       	movw	r30, r24
     332:	80 81       	ld	r24, Z
     334:	88 1f       	adc	r24, r24
     336:	88 27       	eor	r24, r24
     338:	88 1f       	adc	r24, r24
     33a:	89 83       	std	Y+1, r24	; 0x01
		break;
     33c:	8e c0       	rjmp	.+284    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				
		case 12:
				
		// PB0
		value = ((PORTB >> 0) & 0x1);
     33e:	85 e2       	ldi	r24, 0x25	; 37
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	fc 01       	movw	r30, r24
     344:	80 81       	ld	r24, Z
     346:	81 70       	andi	r24, 0x01	; 1
     348:	89 83       	std	Y+1, r24	; 0x01
		break;
     34a:	87 c0       	rjmp	.+270    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				
		case 13:
				
		// PB1
		value = ((PORTB >> 1) & 0x1);
     34c:	85 e2       	ldi	r24, 0x25	; 37
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	fc 01       	movw	r30, r24
     352:	80 81       	ld	r24, Z
     354:	86 95       	lsr	r24
     356:	81 70       	andi	r24, 0x01	; 1
     358:	89 83       	std	Y+1, r24	; 0x01
		break;
     35a:	7f c0       	rjmp	.+254    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				
		case 14:
				
		// PB2
		value = ((PORTB >> 2) & 0x1);
     35c:	85 e2       	ldi	r24, 0x25	; 37
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	fc 01       	movw	r30, r24
     362:	80 81       	ld	r24, Z
     364:	86 95       	lsr	r24
     366:	86 95       	lsr	r24
     368:	81 70       	andi	r24, 0x01	; 1
     36a:	89 83       	std	Y+1, r24	; 0x01
		break;
     36c:	76 c0       	rjmp	.+236    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				
		case 15:
				
		// PB3
		value = ((PORTB >> 3) & 0x1);
     36e:	85 e2       	ldi	r24, 0x25	; 37
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	fc 01       	movw	r30, r24
     374:	80 81       	ld	r24, Z
     376:	86 95       	lsr	r24
     378:	86 95       	lsr	r24
     37a:	86 95       	lsr	r24
     37c:	81 70       	andi	r24, 0x01	; 1
     37e:	89 83       	std	Y+1, r24	; 0x01
		break;
     380:	6c c0       	rjmp	.+216    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

		case 16:
				
		// PB4
		value = ((PORTB >> 4) & 0x1);
     382:	85 e2       	ldi	r24, 0x25	; 37
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	fc 01       	movw	r30, r24
     388:	80 81       	ld	r24, Z
     38a:	82 95       	swap	r24
     38c:	8f 70       	andi	r24, 0x0F	; 15
     38e:	81 70       	andi	r24, 0x01	; 1
     390:	89 83       	std	Y+1, r24	; 0x01
		break;
     392:	63 c0       	rjmp	.+198    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

		case 17:
				
		// PB5
		value = ((PORTB >> 5) & 0x1);
     394:	85 e2       	ldi	r24, 0x25	; 37
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	fc 01       	movw	r30, r24
     39a:	80 81       	ld	r24, Z
     39c:	82 95       	swap	r24
     39e:	86 95       	lsr	r24
     3a0:	87 70       	andi	r24, 0x07	; 7
     3a2:	81 70       	andi	r24, 0x01	; 1
     3a4:	89 83       	std	Y+1, r24	; 0x01
		break;
     3a6:	59 c0       	rjmp	.+178    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		break;
				
		case 23:
				
		// PC0
		value = ((PORTC >> 0) & 0x1);
     3a8:	88 e2       	ldi	r24, 0x28	; 40
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	fc 01       	movw	r30, r24
     3ae:	80 81       	ld	r24, Z
     3b0:	81 70       	andi	r24, 0x01	; 1
     3b2:	89 83       	std	Y+1, r24	; 0x01
		break;
     3b4:	52 c0       	rjmp	.+164    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

		case 24:
				
		// PC1
		value = ((PORTC >> 1) & 0x1);
     3b6:	88 e2       	ldi	r24, 0x28	; 40
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	fc 01       	movw	r30, r24
     3bc:	80 81       	ld	r24, Z
     3be:	86 95       	lsr	r24
     3c0:	81 70       	andi	r24, 0x01	; 1
     3c2:	89 83       	std	Y+1, r24	; 0x01
		break;
     3c4:	4a c0       	rjmp	.+148    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				
		case 25:
				
		// PC2
		value = ((PORTC >> 2) & 0x1);
     3c6:	88 e2       	ldi	r24, 0x28	; 40
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	fc 01       	movw	r30, r24
     3cc:	80 81       	ld	r24, Z
     3ce:	86 95       	lsr	r24
     3d0:	86 95       	lsr	r24
     3d2:	81 70       	andi	r24, 0x01	; 1
     3d4:	89 83       	std	Y+1, r24	; 0x01
		break;
     3d6:	41 c0       	rjmp	.+130    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

		case 26:
				
		// PC3
		value = ((PORTC >> 3) & 0x1);
     3d8:	88 e2       	ldi	r24, 0x28	; 40
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	fc 01       	movw	r30, r24
     3de:	80 81       	ld	r24, Z
     3e0:	86 95       	lsr	r24
     3e2:	86 95       	lsr	r24
     3e4:	86 95       	lsr	r24
     3e6:	81 70       	andi	r24, 0x01	; 1
     3e8:	89 83       	std	Y+1, r24	; 0x01
		break;
     3ea:	37 c0       	rjmp	.+110    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				
		case 27:
				
		// PC4
		value = ((PORTC >> 4) & 0x1);
     3ec:	88 e2       	ldi	r24, 0x28	; 40
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	fc 01       	movw	r30, r24
     3f2:	80 81       	ld	r24, Z
     3f4:	82 95       	swap	r24
     3f6:	8f 70       	andi	r24, 0x0F	; 15
     3f8:	81 70       	andi	r24, 0x01	; 1
     3fa:	89 83       	std	Y+1, r24	; 0x01
		break;
     3fc:	2e c0       	rjmp	.+92     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

		case 28:
				
		// PC5
		value = ((PORTC >> 5) & 0x1);
     3fe:	88 e2       	ldi	r24, 0x28	; 40
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	fc 01       	movw	r30, r24
     404:	80 81       	ld	r24, Z
     406:	82 95       	swap	r24
     408:	86 95       	lsr	r24
     40a:	87 70       	andi	r24, 0x07	; 7
     40c:	81 70       	andi	r24, 0x01	; 1
     40e:	89 83       	std	Y+1, r24	; 0x01
		break;
     410:	24 c0       	rjmp	.+72     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

		case 29:
				
		// PC6
		value = ((PORTC >> 6) & 0x1);
     412:	88 e2       	ldi	r24, 0x28	; 40
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	fc 01       	movw	r30, r24
     418:	80 81       	ld	r24, Z
     41a:	82 95       	swap	r24
     41c:	86 95       	lsr	r24
     41e:	86 95       	lsr	r24
     420:	83 70       	andi	r24, 0x03	; 3
     422:	81 70       	andi	r24, 0x01	; 1
     424:	89 83       	std	Y+1, r24	; 0x01
		break;
     426:	19 c0       	rjmp	.+50     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

		case 30:
				
		// PD0
		value = ((PORTD >> 0) & 0x1);
     428:	8b e2       	ldi	r24, 0x2B	; 43
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	fc 01       	movw	r30, r24
     42e:	80 81       	ld	r24, Z
     430:	81 70       	andi	r24, 0x01	; 1
     432:	89 83       	std	Y+1, r24	; 0x01
		break;
     434:	12 c0       	rjmp	.+36     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

		case 31:
				
		// PD1
		value = ((PORTD >> 1) & 0x1);
     436:	8b e2       	ldi	r24, 0x2B	; 43
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	fc 01       	movw	r30, r24
     43c:	80 81       	ld	r24, Z
     43e:	86 95       	lsr	r24
     440:	81 70       	andi	r24, 0x01	; 1
     442:	89 83       	std	Y+1, r24	; 0x01
		break;
     444:	0a c0       	rjmp	.+20     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

		case 32:
				
		// PD2
		value = ((PORTD >> 2) & 0x1);
     446:	8b e2       	ldi	r24, 0x2B	; 43
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	fc 01       	movw	r30, r24
     44c:	80 81       	ld	r24, Z
     44e:	86 95       	lsr	r24
     450:	86 95       	lsr	r24
     452:	81 70       	andi	r24, 0x01	; 1
     454:	89 83       	std	Y+1, r24	; 0x01
		break;
     456:	01 c0       	rjmp	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

		break;
				
		case 3:
		// GND
		break;
     458:	00 00       	nop
		value = ((PORTD >> 2) & 0x1);
		break;
				
	}
	
	return value == 1 ? High : Low;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	99 81       	ldd	r25, Y+1	; 0x01
     45e:	91 30       	cpi	r25, 0x01	; 1
     460:	09 f0       	breq	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     462:	80 e0       	ldi	r24, 0x00	; 0
	
}
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <morph_config_gpio_set_pin_direction>:

void morph_config_gpio_set_pin_direction(MorphPinNumber pn, enum MorphPinDirection pd)
{
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	00 d0       	rcall	.+0      	; 0x474 <morph_config_gpio_set_pin_direction+0x6>
     474:	1f 92       	push	r1
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	8a 83       	std	Y+2, r24	; 0x02
     47c:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t value = (pd == Output ? 1 : 0);
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	9b 81       	ldd	r25, Y+3	; 0x03
     482:	91 30       	cpi	r25, 0x01	; 1
     484:	09 f0       	breq	.+2      	; 0x488 <morph_config_gpio_set_pin_direction+0x1a>
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	89 83       	std	Y+1, r24	; 0x01
	
	// Figure out what pin we are talking about.
	
	// This is for the 32 pin package of the 328
	switch(pn)
     48a:	8a 81       	ldd	r24, Y+2	; 0x02
     48c:	88 2f       	mov	r24, r24
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	09 2e       	mov	r0, r25
     492:	00 0c       	add	r0, r0
     494:	aa 0b       	sbc	r26, r26
     496:	bb 0b       	sbc	r27, r27
     498:	41 e0       	ldi	r20, 0x01	; 1
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	2f e1       	ldi	r18, 0x1F	; 31
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	84 1b       	sub	r24, r20
     4a2:	95 0b       	sbc	r25, r21
     4a4:	28 17       	cp	r18, r24
     4a6:	39 07       	cpc	r19, r25
     4a8:	08 f4       	brcc	.+2      	; 0x4ac <morph_config_gpio_set_pin_direction+0x3e>
     4aa:	cc c1       	rjmp	.+920    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>
     4ac:	8c 5a       	subi	r24, 0xAC	; 172
     4ae:	9f 4f       	sbci	r25, 0xFF	; 255
     4b0:	fc 01       	movw	r30, r24
     4b2:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__tablejump2__>
	{
		
		case 1:
		// PD3
		DDRD =  (DDRD & ~(0x1 << 3)) | (value << 3);
     4b6:	8a e2       	ldi	r24, 0x2A	; 42
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	2a e2       	ldi	r18, 0x2A	; 42
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	f9 01       	movw	r30, r18
     4c0:	20 81       	ld	r18, Z
     4c2:	42 2f       	mov	r20, r18
     4c4:	47 7f       	andi	r20, 0xF7	; 247
     4c6:	29 81       	ldd	r18, Y+1	; 0x01
     4c8:	22 2f       	mov	r18, r18
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	22 0f       	add	r18, r18
     4ce:	33 1f       	adc	r19, r19
     4d0:	22 0f       	add	r18, r18
     4d2:	33 1f       	adc	r19, r19
     4d4:	22 0f       	add	r18, r18
     4d6:	33 1f       	adc	r19, r19
     4d8:	24 2b       	or	r18, r20
     4da:	fc 01       	movw	r30, r24
     4dc:	20 83       	st	Z, r18
		break;
     4de:	b2 c1       	rjmp	.+868    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>
		
		case 2:
		
		// PD4
		DDRD =  (DDRD & ~(0x1 << 4)) | (value << 4);
     4e0:	8a e2       	ldi	r24, 0x2A	; 42
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	2a e2       	ldi	r18, 0x2A	; 42
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	f9 01       	movw	r30, r18
     4ea:	20 81       	ld	r18, Z
     4ec:	42 2f       	mov	r20, r18
     4ee:	4f 7e       	andi	r20, 0xEF	; 239
     4f0:	29 81       	ldd	r18, Y+1	; 0x01
     4f2:	22 2f       	mov	r18, r18
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	22 95       	swap	r18
     4f8:	32 95       	swap	r19
     4fa:	30 7f       	andi	r19, 0xF0	; 240
     4fc:	32 27       	eor	r19, r18
     4fe:	20 7f       	andi	r18, 0xF0	; 240
     500:	32 27       	eor	r19, r18
     502:	24 2b       	or	r18, r20
     504:	fc 01       	movw	r30, r24
     506:	20 83       	st	Z, r18

		break;
     508:	9d c1       	rjmp	.+826    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>
		break;
		
		case 7:
		
		// PB6
		DDRB =  (DDRB & ~(0x1 << 6)) | (value << 6);
     50a:	84 e2       	ldi	r24, 0x24	; 36
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	24 e2       	ldi	r18, 0x24	; 36
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	f9 01       	movw	r30, r18
     514:	20 81       	ld	r18, Z
     516:	42 2f       	mov	r20, r18
     518:	4f 7b       	andi	r20, 0xBF	; 191
     51a:	29 81       	ldd	r18, Y+1	; 0x01
     51c:	22 2f       	mov	r18, r18
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	00 24       	eor	r0, r0
     522:	36 95       	lsr	r19
     524:	27 95       	ror	r18
     526:	07 94       	ror	r0
     528:	36 95       	lsr	r19
     52a:	27 95       	ror	r18
     52c:	07 94       	ror	r0
     52e:	32 2f       	mov	r19, r18
     530:	20 2d       	mov	r18, r0
     532:	24 2b       	or	r18, r20
     534:	fc 01       	movw	r30, r24
     536:	20 83       	st	Z, r18
		break;
     538:	85 c1       	rjmp	.+778    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>
		
		case 8:
		
		// PB7
		DDRB =  (DDRB & ~(0x1 << 7)) | (value << 7);
     53a:	84 e2       	ldi	r24, 0x24	; 36
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	24 e2       	ldi	r18, 0x24	; 36
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	f9 01       	movw	r30, r18
     544:	20 81       	ld	r18, Z
     546:	42 2f       	mov	r20, r18
     548:	4f 77       	andi	r20, 0x7F	; 127
     54a:	29 81       	ldd	r18, Y+1	; 0x01
     54c:	22 2f       	mov	r18, r18
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	36 95       	lsr	r19
     552:	32 2f       	mov	r19, r18
     554:	22 27       	eor	r18, r18
     556:	37 95       	ror	r19
     558:	27 95       	ror	r18
     55a:	24 2b       	or	r18, r20
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
		break;
     560:	71 c1       	rjmp	.+738    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>
		
		case 9:
		
		// PD5
		DDRD =  (DDRD & ~(0x1 << 5)) | (value << 5);
     562:	8a e2       	ldi	r24, 0x2A	; 42
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	2a e2       	ldi	r18, 0x2A	; 42
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	f9 01       	movw	r30, r18
     56c:	20 81       	ld	r18, Z
     56e:	42 2f       	mov	r20, r18
     570:	4f 7d       	andi	r20, 0xDF	; 223
     572:	29 81       	ldd	r18, Y+1	; 0x01
     574:	22 2f       	mov	r18, r18
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	22 0f       	add	r18, r18
     57a:	33 1f       	adc	r19, r19
     57c:	22 95       	swap	r18
     57e:	32 95       	swap	r19
     580:	30 7f       	andi	r19, 0xF0	; 240
     582:	32 27       	eor	r19, r18
     584:	20 7f       	andi	r18, 0xF0	; 240
     586:	32 27       	eor	r19, r18
     588:	24 2b       	or	r18, r20
     58a:	fc 01       	movw	r30, r24
     58c:	20 83       	st	Z, r18
		break;
     58e:	5a c1       	rjmp	.+692    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>
		
		case 10:
		
		// PD6
		DDRD =  (DDRD & ~(0x1 << 6)) | (value << 6);
     590:	8a e2       	ldi	r24, 0x2A	; 42
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	2a e2       	ldi	r18, 0x2A	; 42
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	f9 01       	movw	r30, r18
     59a:	20 81       	ld	r18, Z
     59c:	42 2f       	mov	r20, r18
     59e:	4f 7b       	andi	r20, 0xBF	; 191
     5a0:	29 81       	ldd	r18, Y+1	; 0x01
     5a2:	22 2f       	mov	r18, r18
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	00 24       	eor	r0, r0
     5a8:	36 95       	lsr	r19
     5aa:	27 95       	ror	r18
     5ac:	07 94       	ror	r0
     5ae:	36 95       	lsr	r19
     5b0:	27 95       	ror	r18
     5b2:	07 94       	ror	r0
     5b4:	32 2f       	mov	r19, r18
     5b6:	20 2d       	mov	r18, r0
     5b8:	24 2b       	or	r18, r20
     5ba:	fc 01       	movw	r30, r24
     5bc:	20 83       	st	Z, r18
		break;
     5be:	42 c1       	rjmp	.+644    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>
		
		case 11:
		
		// PD7
		DDRD =  (DDRD & ~(0x1 << 7)) | (value << 7);
     5c0:	8a e2       	ldi	r24, 0x2A	; 42
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	2a e2       	ldi	r18, 0x2A	; 42
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	f9 01       	movw	r30, r18
     5ca:	20 81       	ld	r18, Z
     5cc:	42 2f       	mov	r20, r18
     5ce:	4f 77       	andi	r20, 0x7F	; 127
     5d0:	29 81       	ldd	r18, Y+1	; 0x01
     5d2:	22 2f       	mov	r18, r18
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	36 95       	lsr	r19
     5d8:	32 2f       	mov	r19, r18
     5da:	22 27       	eor	r18, r18
     5dc:	37 95       	ror	r19
     5de:	27 95       	ror	r18
     5e0:	24 2b       	or	r18, r20
     5e2:	fc 01       	movw	r30, r24
     5e4:	20 83       	st	Z, r18
		break;
     5e6:	2e c1       	rjmp	.+604    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>
		
		case 12:
		
		// PB0
		DDRB =  (DDRB & ~(0x1 << 0)) | (value << 0);
     5e8:	84 e2       	ldi	r24, 0x24	; 36
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	24 e2       	ldi	r18, 0x24	; 36
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	f9 01       	movw	r30, r18
     5f2:	20 81       	ld	r18, Z
     5f4:	32 2f       	mov	r19, r18
     5f6:	3e 7f       	andi	r19, 0xFE	; 254
     5f8:	29 81       	ldd	r18, Y+1	; 0x01
     5fa:	23 2b       	or	r18, r19
     5fc:	fc 01       	movw	r30, r24
     5fe:	20 83       	st	Z, r18
		break;
     600:	21 c1       	rjmp	.+578    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>
		
		case 13:
		
		// PB1
		DDRB =  (DDRB & ~(0x1 << 1)) | (value << 1);
     602:	84 e2       	ldi	r24, 0x24	; 36
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	24 e2       	ldi	r18, 0x24	; 36
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	f9 01       	movw	r30, r18
     60c:	20 81       	ld	r18, Z
     60e:	42 2f       	mov	r20, r18
     610:	4d 7f       	andi	r20, 0xFD	; 253
     612:	29 81       	ldd	r18, Y+1	; 0x01
     614:	22 2f       	mov	r18, r18
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	22 0f       	add	r18, r18
     61a:	33 1f       	adc	r19, r19
     61c:	24 2b       	or	r18, r20
     61e:	fc 01       	movw	r30, r24
     620:	20 83       	st	Z, r18
		break;
     622:	10 c1       	rjmp	.+544    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>
		
		case 14:
		
		// PB2
		DDRB =  (DDRB & ~(0x1 << 2)) | (value << 2);
     624:	84 e2       	ldi	r24, 0x24	; 36
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	24 e2       	ldi	r18, 0x24	; 36
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	f9 01       	movw	r30, r18
     62e:	20 81       	ld	r18, Z
     630:	42 2f       	mov	r20, r18
     632:	4b 7f       	andi	r20, 0xFB	; 251
     634:	29 81       	ldd	r18, Y+1	; 0x01
     636:	22 2f       	mov	r18, r18
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	22 0f       	add	r18, r18
     63c:	33 1f       	adc	r19, r19
     63e:	22 0f       	add	r18, r18
     640:	33 1f       	adc	r19, r19
     642:	24 2b       	or	r18, r20
     644:	fc 01       	movw	r30, r24
     646:	20 83       	st	Z, r18
		break;
     648:	fd c0       	rjmp	.+506    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>
		
		case 15:
		
		// PB3
		DDRB =  (DDRB & ~(0x1 << 3)) | (value << 3);
     64a:	84 e2       	ldi	r24, 0x24	; 36
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	24 e2       	ldi	r18, 0x24	; 36
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	f9 01       	movw	r30, r18
     654:	20 81       	ld	r18, Z
     656:	42 2f       	mov	r20, r18
     658:	47 7f       	andi	r20, 0xF7	; 247
     65a:	29 81       	ldd	r18, Y+1	; 0x01
     65c:	22 2f       	mov	r18, r18
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	22 0f       	add	r18, r18
     662:	33 1f       	adc	r19, r19
     664:	22 0f       	add	r18, r18
     666:	33 1f       	adc	r19, r19
     668:	22 0f       	add	r18, r18
     66a:	33 1f       	adc	r19, r19
     66c:	24 2b       	or	r18, r20
     66e:	fc 01       	movw	r30, r24
     670:	20 83       	st	Z, r18
		break;
     672:	e8 c0       	rjmp	.+464    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>

		case 16:
		
		// PB4
		DDRB =  (DDRB & ~(0x1 << 4)) | (value << 4);
     674:	84 e2       	ldi	r24, 0x24	; 36
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	24 e2       	ldi	r18, 0x24	; 36
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	f9 01       	movw	r30, r18
     67e:	20 81       	ld	r18, Z
     680:	42 2f       	mov	r20, r18
     682:	4f 7e       	andi	r20, 0xEF	; 239
     684:	29 81       	ldd	r18, Y+1	; 0x01
     686:	22 2f       	mov	r18, r18
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	22 95       	swap	r18
     68c:	32 95       	swap	r19
     68e:	30 7f       	andi	r19, 0xF0	; 240
     690:	32 27       	eor	r19, r18
     692:	20 7f       	andi	r18, 0xF0	; 240
     694:	32 27       	eor	r19, r18
     696:	24 2b       	or	r18, r20
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18
		break;
     69c:	d3 c0       	rjmp	.+422    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>

		case 17:
		
		// PB5
		DDRB =  (DDRB & ~(0x1 << 5)) | (value << 5);
     69e:	84 e2       	ldi	r24, 0x24	; 36
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	24 e2       	ldi	r18, 0x24	; 36
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	f9 01       	movw	r30, r18
     6a8:	20 81       	ld	r18, Z
     6aa:	42 2f       	mov	r20, r18
     6ac:	4f 7d       	andi	r20, 0xDF	; 223
     6ae:	29 81       	ldd	r18, Y+1	; 0x01
     6b0:	22 2f       	mov	r18, r18
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	22 0f       	add	r18, r18
     6b6:	33 1f       	adc	r19, r19
     6b8:	22 95       	swap	r18
     6ba:	32 95       	swap	r19
     6bc:	30 7f       	andi	r19, 0xF0	; 240
     6be:	32 27       	eor	r19, r18
     6c0:	20 7f       	andi	r18, 0xF0	; 240
     6c2:	32 27       	eor	r19, r18
     6c4:	24 2b       	or	r18, r20
     6c6:	fc 01       	movw	r30, r24
     6c8:	20 83       	st	Z, r18
		break;
     6ca:	bc c0       	rjmp	.+376    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>
		break;
		
		case 23:
		
		// PC0
		DDRC =  (DDRC & ~(0x1 << 0)) | (value << 0);
     6cc:	87 e2       	ldi	r24, 0x27	; 39
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	27 e2       	ldi	r18, 0x27	; 39
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	f9 01       	movw	r30, r18
     6d6:	20 81       	ld	r18, Z
     6d8:	32 2f       	mov	r19, r18
     6da:	3e 7f       	andi	r19, 0xFE	; 254
     6dc:	29 81       	ldd	r18, Y+1	; 0x01
     6de:	23 2b       	or	r18, r19
     6e0:	fc 01       	movw	r30, r24
     6e2:	20 83       	st	Z, r18
		break;
     6e4:	af c0       	rjmp	.+350    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>

		case 24:
		
		// PC1
		DDRC =  (DDRC & ~(0x1 << 1)) | (value << 1);
     6e6:	87 e2       	ldi	r24, 0x27	; 39
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	27 e2       	ldi	r18, 0x27	; 39
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	f9 01       	movw	r30, r18
     6f0:	20 81       	ld	r18, Z
     6f2:	42 2f       	mov	r20, r18
     6f4:	4d 7f       	andi	r20, 0xFD	; 253
     6f6:	29 81       	ldd	r18, Y+1	; 0x01
     6f8:	22 2f       	mov	r18, r18
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	22 0f       	add	r18, r18
     6fe:	33 1f       	adc	r19, r19
     700:	24 2b       	or	r18, r20
     702:	fc 01       	movw	r30, r24
     704:	20 83       	st	Z, r18
		break;
     706:	9e c0       	rjmp	.+316    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>
		
		case 25:
		
		// PC2
		DDRC =  (DDRC & ~(0x1 << 2)) | (value << 2);
     708:	87 e2       	ldi	r24, 0x27	; 39
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	27 e2       	ldi	r18, 0x27	; 39
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	f9 01       	movw	r30, r18
     712:	20 81       	ld	r18, Z
     714:	42 2f       	mov	r20, r18
     716:	4b 7f       	andi	r20, 0xFB	; 251
     718:	29 81       	ldd	r18, Y+1	; 0x01
     71a:	22 2f       	mov	r18, r18
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	22 0f       	add	r18, r18
     720:	33 1f       	adc	r19, r19
     722:	22 0f       	add	r18, r18
     724:	33 1f       	adc	r19, r19
     726:	24 2b       	or	r18, r20
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18
		break;
     72c:	8b c0       	rjmp	.+278    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>

		case 26:
		
		// PC3
		DDRC =  (DDRC & ~(0x1 << 3)) | (value << 3);
     72e:	87 e2       	ldi	r24, 0x27	; 39
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	27 e2       	ldi	r18, 0x27	; 39
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	f9 01       	movw	r30, r18
     738:	20 81       	ld	r18, Z
     73a:	42 2f       	mov	r20, r18
     73c:	47 7f       	andi	r20, 0xF7	; 247
     73e:	29 81       	ldd	r18, Y+1	; 0x01
     740:	22 2f       	mov	r18, r18
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	22 0f       	add	r18, r18
     746:	33 1f       	adc	r19, r19
     748:	22 0f       	add	r18, r18
     74a:	33 1f       	adc	r19, r19
     74c:	22 0f       	add	r18, r18
     74e:	33 1f       	adc	r19, r19
     750:	24 2b       	or	r18, r20
     752:	fc 01       	movw	r30, r24
     754:	20 83       	st	Z, r18
		break;
     756:	76 c0       	rjmp	.+236    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>
		
		case 27:
		
		// PC4
		DDRC =  (DDRC & ~(0x1 << 4)) | (value << 4);
     758:	87 e2       	ldi	r24, 0x27	; 39
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	27 e2       	ldi	r18, 0x27	; 39
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	f9 01       	movw	r30, r18
     762:	20 81       	ld	r18, Z
     764:	42 2f       	mov	r20, r18
     766:	4f 7e       	andi	r20, 0xEF	; 239
     768:	29 81       	ldd	r18, Y+1	; 0x01
     76a:	22 2f       	mov	r18, r18
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	22 95       	swap	r18
     770:	32 95       	swap	r19
     772:	30 7f       	andi	r19, 0xF0	; 240
     774:	32 27       	eor	r19, r18
     776:	20 7f       	andi	r18, 0xF0	; 240
     778:	32 27       	eor	r19, r18
     77a:	24 2b       	or	r18, r20
     77c:	fc 01       	movw	r30, r24
     77e:	20 83       	st	Z, r18
		break;
     780:	61 c0       	rjmp	.+194    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>

		case 28:
		
		// PC5
		DDRC =  (DDRC & ~(0x1 << 5)) | (value << 5);
     782:	87 e2       	ldi	r24, 0x27	; 39
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	27 e2       	ldi	r18, 0x27	; 39
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	f9 01       	movw	r30, r18
     78c:	20 81       	ld	r18, Z
     78e:	42 2f       	mov	r20, r18
     790:	4f 7d       	andi	r20, 0xDF	; 223
     792:	29 81       	ldd	r18, Y+1	; 0x01
     794:	22 2f       	mov	r18, r18
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	22 0f       	add	r18, r18
     79a:	33 1f       	adc	r19, r19
     79c:	22 95       	swap	r18
     79e:	32 95       	swap	r19
     7a0:	30 7f       	andi	r19, 0xF0	; 240
     7a2:	32 27       	eor	r19, r18
     7a4:	20 7f       	andi	r18, 0xF0	; 240
     7a6:	32 27       	eor	r19, r18
     7a8:	24 2b       	or	r18, r20
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
		break;
     7ae:	4a c0       	rjmp	.+148    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>

		case 29:
		
		// PC6
		DDRC =  (DDRC & ~(0x1 << 6)) | (value << 6);
     7b0:	87 e2       	ldi	r24, 0x27	; 39
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	27 e2       	ldi	r18, 0x27	; 39
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	f9 01       	movw	r30, r18
     7ba:	20 81       	ld	r18, Z
     7bc:	42 2f       	mov	r20, r18
     7be:	4f 7b       	andi	r20, 0xBF	; 191
     7c0:	29 81       	ldd	r18, Y+1	; 0x01
     7c2:	22 2f       	mov	r18, r18
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	00 24       	eor	r0, r0
     7c8:	36 95       	lsr	r19
     7ca:	27 95       	ror	r18
     7cc:	07 94       	ror	r0
     7ce:	36 95       	lsr	r19
     7d0:	27 95       	ror	r18
     7d2:	07 94       	ror	r0
     7d4:	32 2f       	mov	r19, r18
     7d6:	20 2d       	mov	r18, r0
     7d8:	24 2b       	or	r18, r20
     7da:	fc 01       	movw	r30, r24
     7dc:	20 83       	st	Z, r18
		break;
     7de:	32 c0       	rjmp	.+100    	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>

		case 30:
		
		// PD0
		DDRD =  (DDRD & ~(0x1 << 0)) | (value << 0);
     7e0:	8a e2       	ldi	r24, 0x2A	; 42
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	2a e2       	ldi	r18, 0x2A	; 42
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	f9 01       	movw	r30, r18
     7ea:	20 81       	ld	r18, Z
     7ec:	32 2f       	mov	r19, r18
     7ee:	3e 7f       	andi	r19, 0xFE	; 254
     7f0:	29 81       	ldd	r18, Y+1	; 0x01
     7f2:	23 2b       	or	r18, r19
     7f4:	fc 01       	movw	r30, r24
     7f6:	20 83       	st	Z, r18
		break;
     7f8:	25 c0       	rjmp	.+74     	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>

		case 31:
		
		// PD1
		DDRD =  (DDRD & ~(0x1 << 1)) | (value << 1);
     7fa:	8a e2       	ldi	r24, 0x2A	; 42
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	2a e2       	ldi	r18, 0x2A	; 42
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	f9 01       	movw	r30, r18
     804:	20 81       	ld	r18, Z
     806:	42 2f       	mov	r20, r18
     808:	4d 7f       	andi	r20, 0xFD	; 253
     80a:	29 81       	ldd	r18, Y+1	; 0x01
     80c:	22 2f       	mov	r18, r18
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	22 0f       	add	r18, r18
     812:	33 1f       	adc	r19, r19
     814:	24 2b       	or	r18, r20
     816:	fc 01       	movw	r30, r24
     818:	20 83       	st	Z, r18
		break;
     81a:	14 c0       	rjmp	.+40     	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>

		case 32:
		
		// PD2
		DDRD =  (DDRD & ~(0x1 << 2)) | (value << 2);
     81c:	8a e2       	ldi	r24, 0x2A	; 42
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	2a e2       	ldi	r18, 0x2A	; 42
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	f9 01       	movw	r30, r18
     826:	20 81       	ld	r18, Z
     828:	42 2f       	mov	r20, r18
     82a:	4b 7f       	andi	r20, 0xFB	; 251
     82c:	29 81       	ldd	r18, Y+1	; 0x01
     82e:	22 2f       	mov	r18, r18
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	22 0f       	add	r18, r18
     834:	33 1f       	adc	r19, r19
     836:	22 0f       	add	r18, r18
     838:	33 1f       	adc	r19, r19
     83a:	24 2b       	or	r18, r20
     83c:	fc 01       	movw	r30, r24
     83e:	20 83       	st	Z, r18
		break;
     840:	01 c0       	rjmp	.+2      	; 0x844 <morph_config_gpio_set_pin_direction+0x3d6>

		break;
		
		case 3:
		// GND
		break;
     842:	00 00       	nop
		DDRD =  (DDRD & ~(0x1 << 2)) | (value << 2);
		break;
		
	}

}
     844:	00 00       	nop
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <morph_config_gpio_get_pin_direction>:

enum MorphPinDirection morph_config_gpio_get_pin_direction(MorphPinNumber pn)
{
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	00 d0       	rcall	.+0      	; 0x858 <morph_config_gpio_get_pin_direction+0x6>
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t value = 0;
     85e:	19 82       	std	Y+1, r1	; 0x01
	
	switch(pn)
     860:	8a 81       	ldd	r24, Y+2	; 0x02
     862:	88 2f       	mov	r24, r24
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	09 2e       	mov	r0, r25
     868:	00 0c       	add	r0, r0
     86a:	aa 0b       	sbc	r26, r26
     86c:	bb 0b       	sbc	r27, r27
     86e:	41 e0       	ldi	r20, 0x01	; 1
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	2f e1       	ldi	r18, 0x1F	; 31
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	84 1b       	sub	r24, r20
     878:	95 0b       	sbc	r25, r21
     87a:	28 17       	cp	r18, r24
     87c:	39 07       	cpc	r19, r25
     87e:	08 f4       	brcc	.+2      	; 0x882 <morph_config_gpio_get_pin_direction+0x30>
     880:	d8 c0       	rjmp	.+432    	; 0xa32 <__stack+0x133>
     882:	8c 58       	subi	r24, 0x8C	; 140
     884:	9f 4f       	sbci	r25, 0xFF	; 255
     886:	fc 01       	movw	r30, r24
     888:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__tablejump2__>
	{
		
		case 1:
		
		// PD3
		value = (DDRD >> 3) & 0x1;
     88c:	8a e2       	ldi	r24, 0x2A	; 42
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	fc 01       	movw	r30, r24
     892:	80 81       	ld	r24, Z
     894:	86 95       	lsr	r24
     896:	86 95       	lsr	r24
     898:	86 95       	lsr	r24
     89a:	81 70       	andi	r24, 0x01	; 1
     89c:	89 83       	std	Y+1, r24	; 0x01
		
		break;
     89e:	c9 c0       	rjmp	.+402    	; 0xa32 <__stack+0x133>
		
		case 2:
		
		// PD4
		value = (DDRD >> 4) & 0x1;
     8a0:	8a e2       	ldi	r24, 0x2A	; 42
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	fc 01       	movw	r30, r24
     8a6:	80 81       	ld	r24, Z
     8a8:	82 95       	swap	r24
     8aa:	8f 70       	andi	r24, 0x0F	; 15
     8ac:	81 70       	andi	r24, 0x01	; 1
     8ae:	89 83       	std	Y+1, r24	; 0x01

		break;
     8b0:	c0 c0       	rjmp	.+384    	; 0xa32 <__stack+0x133>
		break;
		
		case 7:
		
		// PB6
		value = (DDRB >> 6) & 0x1;
     8b2:	84 e2       	ldi	r24, 0x24	; 36
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	fc 01       	movw	r30, r24
     8b8:	80 81       	ld	r24, Z
     8ba:	82 95       	swap	r24
     8bc:	86 95       	lsr	r24
     8be:	86 95       	lsr	r24
     8c0:	83 70       	andi	r24, 0x03	; 3
     8c2:	81 70       	andi	r24, 0x01	; 1
     8c4:	89 83       	std	Y+1, r24	; 0x01
		break;
     8c6:	b5 c0       	rjmp	.+362    	; 0xa32 <__stack+0x133>
		
		case 8:
		
		// PB7
		value = (DDRB >> 7) & 0x1;
     8c8:	84 e2       	ldi	r24, 0x24	; 36
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	fc 01       	movw	r30, r24
     8ce:	80 81       	ld	r24, Z
     8d0:	88 1f       	adc	r24, r24
     8d2:	88 27       	eor	r24, r24
     8d4:	88 1f       	adc	r24, r24
     8d6:	89 83       	std	Y+1, r24	; 0x01
		break;
     8d8:	ac c0       	rjmp	.+344    	; 0xa32 <__stack+0x133>
		
		case 9:
		
		// PD5
		value = (DDRD >> 5) & 0x1;
     8da:	8a e2       	ldi	r24, 0x2A	; 42
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	fc 01       	movw	r30, r24
     8e0:	80 81       	ld	r24, Z
     8e2:	82 95       	swap	r24
     8e4:	86 95       	lsr	r24
     8e6:	87 70       	andi	r24, 0x07	; 7
     8e8:	81 70       	andi	r24, 0x01	; 1
     8ea:	89 83       	std	Y+1, r24	; 0x01
		break;
     8ec:	a2 c0       	rjmp	.+324    	; 0xa32 <__stack+0x133>
		
		case 10:
		
		// PD6
		value = (DDRD >> 6) & 0x1;
     8ee:	8a e2       	ldi	r24, 0x2A	; 42
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	fc 01       	movw	r30, r24
     8f4:	80 81       	ld	r24, Z
     8f6:	82 95       	swap	r24
     8f8:	86 95       	lsr	r24
     8fa:	86 95       	lsr	r24
     8fc:	83 70       	andi	r24, 0x03	; 3
     8fe:	81 70       	andi	r24, 0x01	; 1
     900:	89 83       	std	Y+1, r24	; 0x01
		break;
     902:	97 c0       	rjmp	.+302    	; 0xa32 <__stack+0x133>
		
		case 11:
		
		// PD7
		value = (DDRD >> 7) & 0x1;
     904:	8a e2       	ldi	r24, 0x2A	; 42
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	fc 01       	movw	r30, r24
     90a:	80 81       	ld	r24, Z
     90c:	88 1f       	adc	r24, r24
     90e:	88 27       	eor	r24, r24
     910:	88 1f       	adc	r24, r24
     912:	89 83       	std	Y+1, r24	; 0x01
		break;
     914:	8e c0       	rjmp	.+284    	; 0xa32 <__stack+0x133>
		
		case 12:
		
		// PB0
		value = (DDRB >> 0) & 0x1;
     916:	84 e2       	ldi	r24, 0x24	; 36
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	fc 01       	movw	r30, r24
     91c:	80 81       	ld	r24, Z
     91e:	81 70       	andi	r24, 0x01	; 1
     920:	89 83       	std	Y+1, r24	; 0x01
		break;
     922:	87 c0       	rjmp	.+270    	; 0xa32 <__stack+0x133>
		
		case 13:
		
		// PB1
		value = (DDRB >> 1) & 0x1;
     924:	84 e2       	ldi	r24, 0x24	; 36
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	fc 01       	movw	r30, r24
     92a:	80 81       	ld	r24, Z
     92c:	86 95       	lsr	r24
     92e:	81 70       	andi	r24, 0x01	; 1
     930:	89 83       	std	Y+1, r24	; 0x01
		break;
     932:	7f c0       	rjmp	.+254    	; 0xa32 <__stack+0x133>
		
		case 14:
		
		// PB2
		value = (DDRB >> 2) & 0x1;
     934:	84 e2       	ldi	r24, 0x24	; 36
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	fc 01       	movw	r30, r24
     93a:	80 81       	ld	r24, Z
     93c:	86 95       	lsr	r24
     93e:	86 95       	lsr	r24
     940:	81 70       	andi	r24, 0x01	; 1
     942:	89 83       	std	Y+1, r24	; 0x01
		break;
     944:	76 c0       	rjmp	.+236    	; 0xa32 <__stack+0x133>
		
		case 15:
		
		// PB3
		value = (DDRB >> 3) & 0x1;
     946:	84 e2       	ldi	r24, 0x24	; 36
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	fc 01       	movw	r30, r24
     94c:	80 81       	ld	r24, Z
     94e:	86 95       	lsr	r24
     950:	86 95       	lsr	r24
     952:	86 95       	lsr	r24
     954:	81 70       	andi	r24, 0x01	; 1
     956:	89 83       	std	Y+1, r24	; 0x01
		break;
     958:	6c c0       	rjmp	.+216    	; 0xa32 <__stack+0x133>

		case 16:
		
		// PB4
		value = (DDRB >> 4) & 0x1;
     95a:	84 e2       	ldi	r24, 0x24	; 36
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	fc 01       	movw	r30, r24
     960:	80 81       	ld	r24, Z
     962:	82 95       	swap	r24
     964:	8f 70       	andi	r24, 0x0F	; 15
     966:	81 70       	andi	r24, 0x01	; 1
     968:	89 83       	std	Y+1, r24	; 0x01
		break;
     96a:	63 c0       	rjmp	.+198    	; 0xa32 <__stack+0x133>

		case 17:
		
		// PB5
		value = (DDRB >> 5) & 0x1;
     96c:	84 e2       	ldi	r24, 0x24	; 36
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	fc 01       	movw	r30, r24
     972:	80 81       	ld	r24, Z
     974:	82 95       	swap	r24
     976:	86 95       	lsr	r24
     978:	87 70       	andi	r24, 0x07	; 7
     97a:	81 70       	andi	r24, 0x01	; 1
     97c:	89 83       	std	Y+1, r24	; 0x01
		break;
     97e:	59 c0       	rjmp	.+178    	; 0xa32 <__stack+0x133>
		break;
		
		case 23:
		
		// PC0
		value = (DDRC >> 0) & 0x1;
     980:	87 e2       	ldi	r24, 0x27	; 39
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	fc 01       	movw	r30, r24
     986:	80 81       	ld	r24, Z
     988:	81 70       	andi	r24, 0x01	; 1
     98a:	89 83       	std	Y+1, r24	; 0x01
		break;
     98c:	52 c0       	rjmp	.+164    	; 0xa32 <__stack+0x133>

		case 24:
		
		// PC1
		value = (DDRC >> 1) & 0x1;
     98e:	87 e2       	ldi	r24, 0x27	; 39
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	fc 01       	movw	r30, r24
     994:	80 81       	ld	r24, Z
     996:	86 95       	lsr	r24
     998:	81 70       	andi	r24, 0x01	; 1
     99a:	89 83       	std	Y+1, r24	; 0x01
		break;
     99c:	4a c0       	rjmp	.+148    	; 0xa32 <__stack+0x133>
		
		case 25:
		
		// PC2
		value = (DDRC >> 2) & 0x1;
     99e:	87 e2       	ldi	r24, 0x27	; 39
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	fc 01       	movw	r30, r24
     9a4:	80 81       	ld	r24, Z
     9a6:	86 95       	lsr	r24
     9a8:	86 95       	lsr	r24
     9aa:	81 70       	andi	r24, 0x01	; 1
     9ac:	89 83       	std	Y+1, r24	; 0x01
		break;
     9ae:	41 c0       	rjmp	.+130    	; 0xa32 <__stack+0x133>

		case 26:
		
		// PC3
		value = (DDRC >> 3) & 0x1;
     9b0:	87 e2       	ldi	r24, 0x27	; 39
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	fc 01       	movw	r30, r24
     9b6:	80 81       	ld	r24, Z
     9b8:	86 95       	lsr	r24
     9ba:	86 95       	lsr	r24
     9bc:	86 95       	lsr	r24
     9be:	81 70       	andi	r24, 0x01	; 1
     9c0:	89 83       	std	Y+1, r24	; 0x01
		break;
     9c2:	37 c0       	rjmp	.+110    	; 0xa32 <__stack+0x133>
		
		case 27:
		
		// PC4
		value = (DDRC >> 4) & 0x1;
     9c4:	87 e2       	ldi	r24, 0x27	; 39
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	fc 01       	movw	r30, r24
     9ca:	80 81       	ld	r24, Z
     9cc:	82 95       	swap	r24
     9ce:	8f 70       	andi	r24, 0x0F	; 15
     9d0:	81 70       	andi	r24, 0x01	; 1
     9d2:	89 83       	std	Y+1, r24	; 0x01
		break;
     9d4:	2e c0       	rjmp	.+92     	; 0xa32 <__stack+0x133>

		case 28:
		
		// PC5
		value = (DDRC >> 5) & 0x1;
     9d6:	87 e2       	ldi	r24, 0x27	; 39
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	fc 01       	movw	r30, r24
     9dc:	80 81       	ld	r24, Z
     9de:	82 95       	swap	r24
     9e0:	86 95       	lsr	r24
     9e2:	87 70       	andi	r24, 0x07	; 7
     9e4:	81 70       	andi	r24, 0x01	; 1
     9e6:	89 83       	std	Y+1, r24	; 0x01
		break;
     9e8:	24 c0       	rjmp	.+72     	; 0xa32 <__stack+0x133>

		case 29:
		
		// PC6
		value = (DDRC >> 6) & 0x1;
     9ea:	87 e2       	ldi	r24, 0x27	; 39
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	fc 01       	movw	r30, r24
     9f0:	80 81       	ld	r24, Z
     9f2:	82 95       	swap	r24
     9f4:	86 95       	lsr	r24
     9f6:	86 95       	lsr	r24
     9f8:	83 70       	andi	r24, 0x03	; 3
     9fa:	81 70       	andi	r24, 0x01	; 1
     9fc:	89 83       	std	Y+1, r24	; 0x01
		break;
     9fe:	19 c0       	rjmp	.+50     	; 0xa32 <__stack+0x133>

		case 30:
		
		// PD0
		value = (DDRD >> 0) & 0x1;
     a00:	8a e2       	ldi	r24, 0x2A	; 42
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	fc 01       	movw	r30, r24
     a06:	80 81       	ld	r24, Z
     a08:	81 70       	andi	r24, 0x01	; 1
     a0a:	89 83       	std	Y+1, r24	; 0x01
		break;
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x133>

		case 31:
		
		// PD1
		value = (DDRD >> 1) & 0x1;
     a0e:	8a e2       	ldi	r24, 0x2A	; 42
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	fc 01       	movw	r30, r24
     a14:	80 81       	ld	r24, Z
     a16:	86 95       	lsr	r24
     a18:	81 70       	andi	r24, 0x01	; 1
     a1a:	89 83       	std	Y+1, r24	; 0x01
		break;
     a1c:	0a c0       	rjmp	.+20     	; 0xa32 <__stack+0x133>

		case 32:
		
		// PD2
		value = (DDRD >> 2) & 0x1;
     a1e:	8a e2       	ldi	r24, 0x2A	; 42
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	fc 01       	movw	r30, r24
     a24:	80 81       	ld	r24, Z
     a26:	86 95       	lsr	r24
     a28:	86 95       	lsr	r24
     a2a:	81 70       	andi	r24, 0x01	; 1
     a2c:	89 83       	std	Y+1, r24	; 0x01
		break;
     a2e:	01 c0       	rjmp	.+2      	; 0xa32 <__stack+0x133>

		break;
		
		case 3:
		// GND
		break;
     a30:	00 00       	nop
		value = (DDRD >> 2) & 0x1;
		break;
		
	}
	
	return value == 1 ? Output : Input;
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	99 81       	ldd	r25, Y+1	; 0x01
     a36:	91 30       	cpi	r25, 0x01	; 1
     a38:	09 f0       	breq	.+2      	; 0xa3c <__stack+0x13d>
     a3a:	80 e0       	ldi	r24, 0x00	; 0
	
}
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	08 95       	ret

00000a46 <morph_config_gpio_set_pin_pull_state>:

void morph_config_gpio_set_pin_pull_state(MorphPinNumber pn, enum MorphPinPullState ps)
{
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	00 d0       	rcall	.+0      	; 0xa4c <morph_config_gpio_set_pin_pull_state+0x6>
     a4c:	1f 92       	push	r1
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	8a 83       	std	Y+2, r24	; 0x02
     a54:	6b 83       	std	Y+3, r22	; 0x03

	// Figure out what pin we are talking about.
	
	uint8_t value = ps == PullHigh ? 1 : 0;
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	9b 81       	ldd	r25, Y+3	; 0x03
     a5a:	91 30       	cpi	r25, 0x01	; 1
     a5c:	09 f0       	breq	.+2      	; 0xa60 <morph_config_gpio_set_pin_pull_state+0x1a>
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	89 83       	std	Y+1, r24	; 0x01

	// This is for the 32 pin package of the 328
	switch(pn)
     a62:	8a 81       	ldd	r24, Y+2	; 0x02
     a64:	88 2f       	mov	r24, r24
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	09 2e       	mov	r0, r25
     a6a:	00 0c       	add	r0, r0
     a6c:	aa 0b       	sbc	r26, r26
     a6e:	bb 0b       	sbc	r27, r27
     a70:	41 e0       	ldi	r20, 0x01	; 1
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	2f e1       	ldi	r18, 0x1F	; 31
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	84 1b       	sub	r24, r20
     a7a:	95 0b       	sbc	r25, r21
     a7c:	28 17       	cp	r18, r24
     a7e:	39 07       	cpc	r19, r25
     a80:	08 f4       	brcc	.+2      	; 0xa84 <morph_config_gpio_set_pin_pull_state+0x3e>
     a82:	2a c3       	rjmp	.+1620   	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
     a84:	8c 56       	subi	r24, 0x6C	; 108
     a86:	9f 4f       	sbci	r25, 0xFF	; 255
     a88:	fc 01       	movw	r30, r24
     a8a:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__tablejump2__>
	
		case 1:
		// PD3

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 3) & 0x1) == 0)
     a8e:	8a e2       	ldi	r24, 0x2A	; 42
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	fc 01       	movw	r30, r24
     a94:	80 81       	ld	r24, Z
     a96:	86 95       	lsr	r24
     a98:	86 95       	lsr	r24
     a9a:	86 95       	lsr	r24
     a9c:	88 2f       	mov	r24, r24
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	81 70       	andi	r24, 0x01	; 1
     aa2:	99 27       	eor	r25, r25
     aa4:	89 2b       	or	r24, r25
     aa6:	09 f0       	breq	.+2      	; 0xaaa <morph_config_gpio_set_pin_pull_state+0x64>
     aa8:	ea c2       	rjmp	.+1492   	; 0x107e <morph_config_gpio_set_pin_pull_state+0x638>
			PORTD = (PORTD & ~(0x1 << 3)) | (value << 3);
     aaa:	8b e2       	ldi	r24, 0x2B	; 43
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	2b e2       	ldi	r18, 0x2B	; 43
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	f9 01       	movw	r30, r18
     ab4:	20 81       	ld	r18, Z
     ab6:	42 2f       	mov	r20, r18
     ab8:	47 7f       	andi	r20, 0xF7	; 247
     aba:	29 81       	ldd	r18, Y+1	; 0x01
     abc:	22 2f       	mov	r18, r18
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	22 0f       	add	r18, r18
     ac2:	33 1f       	adc	r19, r19
     ac4:	22 0f       	add	r18, r18
     ac6:	33 1f       	adc	r19, r19
     ac8:	22 0f       	add	r18, r18
     aca:	33 1f       	adc	r19, r19
     acc:	24 2b       	or	r18, r20
     ace:	fc 01       	movw	r30, r24
     ad0:	20 83       	st	Z, r18

		break;
     ad2:	d5 c2       	rjmp	.+1450   	; 0x107e <morph_config_gpio_set_pin_pull_state+0x638>
	
		case 2:
	
		// PD4
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 4) & 0x1) == 0)
     ad4:	8a e2       	ldi	r24, 0x2A	; 42
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	fc 01       	movw	r30, r24
     ada:	80 81       	ld	r24, Z
     adc:	82 95       	swap	r24
     ade:	8f 70       	andi	r24, 0x0F	; 15
     ae0:	88 2f       	mov	r24, r24
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	81 70       	andi	r24, 0x01	; 1
     ae6:	99 27       	eor	r25, r25
     ae8:	89 2b       	or	r24, r25
     aea:	09 f0       	breq	.+2      	; 0xaee <morph_config_gpio_set_pin_pull_state+0xa8>
     aec:	ca c2       	rjmp	.+1428   	; 0x1082 <morph_config_gpio_set_pin_pull_state+0x63c>
			PORTD = (PORTD & ~(0x1 << 4)) | (value << 4);
     aee:	8b e2       	ldi	r24, 0x2B	; 43
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	2b e2       	ldi	r18, 0x2B	; 43
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	f9 01       	movw	r30, r18
     af8:	20 81       	ld	r18, Z
     afa:	42 2f       	mov	r20, r18
     afc:	4f 7e       	andi	r20, 0xEF	; 239
     afe:	29 81       	ldd	r18, Y+1	; 0x01
     b00:	22 2f       	mov	r18, r18
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	22 95       	swap	r18
     b06:	32 95       	swap	r19
     b08:	30 7f       	andi	r19, 0xF0	; 240
     b0a:	32 27       	eor	r19, r18
     b0c:	20 7f       	andi	r18, 0xF0	; 240
     b0e:	32 27       	eor	r19, r18
     b10:	24 2b       	or	r18, r20
     b12:	fc 01       	movw	r30, r24
     b14:	20 83       	st	Z, r18

		break;
     b16:	b5 c2       	rjmp	.+1386   	; 0x1082 <morph_config_gpio_set_pin_pull_state+0x63c>
	
		case 7:
	
		// PB6
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 6) & 0x1) == 0)
     b18:	84 e2       	ldi	r24, 0x24	; 36
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	fc 01       	movw	r30, r24
     b1e:	80 81       	ld	r24, Z
     b20:	82 95       	swap	r24
     b22:	86 95       	lsr	r24
     b24:	86 95       	lsr	r24
     b26:	83 70       	andi	r24, 0x03	; 3
     b28:	88 2f       	mov	r24, r24
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	81 70       	andi	r24, 0x01	; 1
     b2e:	99 27       	eor	r25, r25
     b30:	89 2b       	or	r24, r25
     b32:	09 f0       	breq	.+2      	; 0xb36 <morph_config_gpio_set_pin_pull_state+0xf0>
     b34:	a8 c2       	rjmp	.+1360   	; 0x1086 <morph_config_gpio_set_pin_pull_state+0x640>
			PORTB = (PORTB & ~(0x1 << 6)) | (value << 6);
     b36:	85 e2       	ldi	r24, 0x25	; 37
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	25 e2       	ldi	r18, 0x25	; 37
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	f9 01       	movw	r30, r18
     b40:	20 81       	ld	r18, Z
     b42:	42 2f       	mov	r20, r18
     b44:	4f 7b       	andi	r20, 0xBF	; 191
     b46:	29 81       	ldd	r18, Y+1	; 0x01
     b48:	22 2f       	mov	r18, r18
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	00 24       	eor	r0, r0
     b4e:	36 95       	lsr	r19
     b50:	27 95       	ror	r18
     b52:	07 94       	ror	r0
     b54:	36 95       	lsr	r19
     b56:	27 95       	ror	r18
     b58:	07 94       	ror	r0
     b5a:	32 2f       	mov	r19, r18
     b5c:	20 2d       	mov	r18, r0
     b5e:	24 2b       	or	r18, r20
     b60:	fc 01       	movw	r30, r24
     b62:	20 83       	st	Z, r18
		break;
     b64:	90 c2       	rjmp	.+1312   	; 0x1086 <morph_config_gpio_set_pin_pull_state+0x640>
		case 8:
	
		// PB7

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 7) & 0x1) == 0)
     b66:	84 e2       	ldi	r24, 0x24	; 36
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	fc 01       	movw	r30, r24
     b6c:	80 81       	ld	r24, Z
     b6e:	88 1f       	adc	r24, r24
     b70:	88 27       	eor	r24, r24
     b72:	88 1f       	adc	r24, r24
     b74:	88 2f       	mov	r24, r24
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	81 70       	andi	r24, 0x01	; 1
     b7a:	99 27       	eor	r25, r25
     b7c:	89 2b       	or	r24, r25
     b7e:	09 f0       	breq	.+2      	; 0xb82 <morph_config_gpio_set_pin_pull_state+0x13c>
     b80:	84 c2       	rjmp	.+1288   	; 0x108a <morph_config_gpio_set_pin_pull_state+0x644>
			PORTB = (PORTB & ~(0x1 << 7)) | (value << 7);
     b82:	85 e2       	ldi	r24, 0x25	; 37
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	25 e2       	ldi	r18, 0x25	; 37
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	f9 01       	movw	r30, r18
     b8c:	20 81       	ld	r18, Z
     b8e:	42 2f       	mov	r20, r18
     b90:	4f 77       	andi	r20, 0x7F	; 127
     b92:	29 81       	ldd	r18, Y+1	; 0x01
     b94:	22 2f       	mov	r18, r18
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	36 95       	lsr	r19
     b9a:	32 2f       	mov	r19, r18
     b9c:	22 27       	eor	r18, r18
     b9e:	37 95       	ror	r19
     ba0:	27 95       	ror	r18
     ba2:	24 2b       	or	r18, r20
     ba4:	fc 01       	movw	r30, r24
     ba6:	20 83       	st	Z, r18
		break;
     ba8:	70 c2       	rjmp	.+1248   	; 0x108a <morph_config_gpio_set_pin_pull_state+0x644>
		case 9:
	
		// PD5

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 5) & 0x1) == 0)
     baa:	8a e2       	ldi	r24, 0x2A	; 42
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	fc 01       	movw	r30, r24
     bb0:	80 81       	ld	r24, Z
     bb2:	82 95       	swap	r24
     bb4:	86 95       	lsr	r24
     bb6:	87 70       	andi	r24, 0x07	; 7
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	81 70       	andi	r24, 0x01	; 1
     bbe:	99 27       	eor	r25, r25
     bc0:	89 2b       	or	r24, r25
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <morph_config_gpio_set_pin_pull_state+0x180>
     bc4:	64 c2       	rjmp	.+1224   	; 0x108e <morph_config_gpio_set_pin_pull_state+0x648>
			PORTD = (PORTD & ~(0x1 << 5)) | (value << 5);
     bc6:	8b e2       	ldi	r24, 0x2B	; 43
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	2b e2       	ldi	r18, 0x2B	; 43
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	f9 01       	movw	r30, r18
     bd0:	20 81       	ld	r18, Z
     bd2:	42 2f       	mov	r20, r18
     bd4:	4f 7d       	andi	r20, 0xDF	; 223
     bd6:	29 81       	ldd	r18, Y+1	; 0x01
     bd8:	22 2f       	mov	r18, r18
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	22 0f       	add	r18, r18
     bde:	33 1f       	adc	r19, r19
     be0:	22 95       	swap	r18
     be2:	32 95       	swap	r19
     be4:	30 7f       	andi	r19, 0xF0	; 240
     be6:	32 27       	eor	r19, r18
     be8:	20 7f       	andi	r18, 0xF0	; 240
     bea:	32 27       	eor	r19, r18
     bec:	24 2b       	or	r18, r20
     bee:	fc 01       	movw	r30, r24
     bf0:	20 83       	st	Z, r18
		break;
     bf2:	4d c2       	rjmp	.+1178   	; 0x108e <morph_config_gpio_set_pin_pull_state+0x648>
		case 10:
	
		// PD6

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 6) & 0x1) == 0)
     bf4:	8a e2       	ldi	r24, 0x2A	; 42
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	fc 01       	movw	r30, r24
     bfa:	80 81       	ld	r24, Z
     bfc:	82 95       	swap	r24
     bfe:	86 95       	lsr	r24
     c00:	86 95       	lsr	r24
     c02:	83 70       	andi	r24, 0x03	; 3
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	81 70       	andi	r24, 0x01	; 1
     c0a:	99 27       	eor	r25, r25
     c0c:	89 2b       	or	r24, r25
     c0e:	09 f0       	breq	.+2      	; 0xc12 <morph_config_gpio_set_pin_pull_state+0x1cc>
     c10:	40 c2       	rjmp	.+1152   	; 0x1092 <morph_config_gpio_set_pin_pull_state+0x64c>
			PORTD = (PORTD & ~(0x1 << 6)) | (value << 6);
     c12:	8b e2       	ldi	r24, 0x2B	; 43
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	2b e2       	ldi	r18, 0x2B	; 43
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	f9 01       	movw	r30, r18
     c1c:	20 81       	ld	r18, Z
     c1e:	42 2f       	mov	r20, r18
     c20:	4f 7b       	andi	r20, 0xBF	; 191
     c22:	29 81       	ldd	r18, Y+1	; 0x01
     c24:	22 2f       	mov	r18, r18
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	00 24       	eor	r0, r0
     c2a:	36 95       	lsr	r19
     c2c:	27 95       	ror	r18
     c2e:	07 94       	ror	r0
     c30:	36 95       	lsr	r19
     c32:	27 95       	ror	r18
     c34:	07 94       	ror	r0
     c36:	32 2f       	mov	r19, r18
     c38:	20 2d       	mov	r18, r0
     c3a:	24 2b       	or	r18, r20
     c3c:	fc 01       	movw	r30, r24
     c3e:	20 83       	st	Z, r18
		break;
     c40:	28 c2       	rjmp	.+1104   	; 0x1092 <morph_config_gpio_set_pin_pull_state+0x64c>
		case 11:
	
		// PD7

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 7) & 0x1) == 0)
     c42:	8a e2       	ldi	r24, 0x2A	; 42
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	fc 01       	movw	r30, r24
     c48:	80 81       	ld	r24, Z
     c4a:	88 1f       	adc	r24, r24
     c4c:	88 27       	eor	r24, r24
     c4e:	88 1f       	adc	r24, r24
     c50:	88 2f       	mov	r24, r24
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	81 70       	andi	r24, 0x01	; 1
     c56:	99 27       	eor	r25, r25
     c58:	89 2b       	or	r24, r25
     c5a:	09 f0       	breq	.+2      	; 0xc5e <morph_config_gpio_set_pin_pull_state+0x218>
     c5c:	1c c2       	rjmp	.+1080   	; 0x1096 <morph_config_gpio_set_pin_pull_state+0x650>
			PORTD = (PORTD & ~(0x1 << 7)) | (value << 7);
     c5e:	8b e2       	ldi	r24, 0x2B	; 43
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	2b e2       	ldi	r18, 0x2B	; 43
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	f9 01       	movw	r30, r18
     c68:	20 81       	ld	r18, Z
     c6a:	42 2f       	mov	r20, r18
     c6c:	4f 77       	andi	r20, 0x7F	; 127
     c6e:	29 81       	ldd	r18, Y+1	; 0x01
     c70:	22 2f       	mov	r18, r18
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	36 95       	lsr	r19
     c76:	32 2f       	mov	r19, r18
     c78:	22 27       	eor	r18, r18
     c7a:	37 95       	ror	r19
     c7c:	27 95       	ror	r18
     c7e:	24 2b       	or	r18, r20
     c80:	fc 01       	movw	r30, r24
     c82:	20 83       	st	Z, r18
		break;
     c84:	08 c2       	rjmp	.+1040   	; 0x1096 <morph_config_gpio_set_pin_pull_state+0x650>
		case 12:
	
		// PB0

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 0) & 0x1) == 0)
     c86:	84 e2       	ldi	r24, 0x24	; 36
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	fc 01       	movw	r30, r24
     c8c:	80 81       	ld	r24, Z
     c8e:	88 2f       	mov	r24, r24
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	81 70       	andi	r24, 0x01	; 1
     c94:	99 27       	eor	r25, r25
     c96:	89 2b       	or	r24, r25
     c98:	09 f0       	breq	.+2      	; 0xc9c <morph_config_gpio_set_pin_pull_state+0x256>
     c9a:	ff c1       	rjmp	.+1022   	; 0x109a <morph_config_gpio_set_pin_pull_state+0x654>
			PORTB = (PORTB & ~(0x1 << 0)) | (value << 0);
     c9c:	85 e2       	ldi	r24, 0x25	; 37
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	25 e2       	ldi	r18, 0x25	; 37
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	f9 01       	movw	r30, r18
     ca6:	20 81       	ld	r18, Z
     ca8:	32 2f       	mov	r19, r18
     caa:	3e 7f       	andi	r19, 0xFE	; 254
     cac:	29 81       	ldd	r18, Y+1	; 0x01
     cae:	23 2b       	or	r18, r19
     cb0:	fc 01       	movw	r30, r24
     cb2:	20 83       	st	Z, r18
		break;
     cb4:	f2 c1       	rjmp	.+996    	; 0x109a <morph_config_gpio_set_pin_pull_state+0x654>
		case 13:
	
		// PB1

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 1) & 0x1) == 0)
     cb6:	84 e2       	ldi	r24, 0x24	; 36
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	fc 01       	movw	r30, r24
     cbc:	80 81       	ld	r24, Z
     cbe:	86 95       	lsr	r24
     cc0:	88 2f       	mov	r24, r24
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	81 70       	andi	r24, 0x01	; 1
     cc6:	99 27       	eor	r25, r25
     cc8:	89 2b       	or	r24, r25
     cca:	09 f0       	breq	.+2      	; 0xcce <morph_config_gpio_set_pin_pull_state+0x288>
     ccc:	e8 c1       	rjmp	.+976    	; 0x109e <morph_config_gpio_set_pin_pull_state+0x658>
			PORTB = (PORTB & ~(0x1 << 1)) | (value << 1);
     cce:	85 e2       	ldi	r24, 0x25	; 37
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	25 e2       	ldi	r18, 0x25	; 37
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	f9 01       	movw	r30, r18
     cd8:	20 81       	ld	r18, Z
     cda:	42 2f       	mov	r20, r18
     cdc:	4d 7f       	andi	r20, 0xFD	; 253
     cde:	29 81       	ldd	r18, Y+1	; 0x01
     ce0:	22 2f       	mov	r18, r18
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	22 0f       	add	r18, r18
     ce6:	33 1f       	adc	r19, r19
     ce8:	24 2b       	or	r18, r20
     cea:	fc 01       	movw	r30, r24
     cec:	20 83       	st	Z, r18
		break;
     cee:	d7 c1       	rjmp	.+942    	; 0x109e <morph_config_gpio_set_pin_pull_state+0x658>
		case 14:
	
		// PB2

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 2) & 0x1) == 0)
     cf0:	84 e2       	ldi	r24, 0x24	; 36
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	fc 01       	movw	r30, r24
     cf6:	80 81       	ld	r24, Z
     cf8:	86 95       	lsr	r24
     cfa:	86 95       	lsr	r24
     cfc:	88 2f       	mov	r24, r24
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	81 70       	andi	r24, 0x01	; 1
     d02:	99 27       	eor	r25, r25
     d04:	89 2b       	or	r24, r25
     d06:	09 f0       	breq	.+2      	; 0xd0a <morph_config_gpio_set_pin_pull_state+0x2c4>
     d08:	cc c1       	rjmp	.+920    	; 0x10a2 <morph_config_gpio_set_pin_pull_state+0x65c>
			PORTB = (PORTB & ~(0x1 << 2)) | (value << 2);
     d0a:	85 e2       	ldi	r24, 0x25	; 37
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	25 e2       	ldi	r18, 0x25	; 37
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	f9 01       	movw	r30, r18
     d14:	20 81       	ld	r18, Z
     d16:	42 2f       	mov	r20, r18
     d18:	4b 7f       	andi	r20, 0xFB	; 251
     d1a:	29 81       	ldd	r18, Y+1	; 0x01
     d1c:	22 2f       	mov	r18, r18
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	22 0f       	add	r18, r18
     d22:	33 1f       	adc	r19, r19
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	24 2b       	or	r18, r20
     d2a:	fc 01       	movw	r30, r24
     d2c:	20 83       	st	Z, r18
		break;
     d2e:	b9 c1       	rjmp	.+882    	; 0x10a2 <morph_config_gpio_set_pin_pull_state+0x65c>
		case 15:
	
		// PB3

		// We can only have a pin pull if the pin is set to an input.
		if((((DDRB >> 3) & 0x1)) == 0)
     d30:	84 e2       	ldi	r24, 0x24	; 36
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	fc 01       	movw	r30, r24
     d36:	80 81       	ld	r24, Z
     d38:	86 95       	lsr	r24
     d3a:	86 95       	lsr	r24
     d3c:	86 95       	lsr	r24
     d3e:	88 2f       	mov	r24, r24
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	81 70       	andi	r24, 0x01	; 1
     d44:	99 27       	eor	r25, r25
     d46:	89 2b       	or	r24, r25
     d48:	09 f0       	breq	.+2      	; 0xd4c <morph_config_gpio_set_pin_pull_state+0x306>
     d4a:	ad c1       	rjmp	.+858    	; 0x10a6 <morph_config_gpio_set_pin_pull_state+0x660>
			PORTB = (PORTB & ~(0x1 << 3)) | (value << 3);
     d4c:	85 e2       	ldi	r24, 0x25	; 37
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	25 e2       	ldi	r18, 0x25	; 37
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	f9 01       	movw	r30, r18
     d56:	20 81       	ld	r18, Z
     d58:	42 2f       	mov	r20, r18
     d5a:	47 7f       	andi	r20, 0xF7	; 247
     d5c:	29 81       	ldd	r18, Y+1	; 0x01
     d5e:	22 2f       	mov	r18, r18
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	22 0f       	add	r18, r18
     d64:	33 1f       	adc	r19, r19
     d66:	22 0f       	add	r18, r18
     d68:	33 1f       	adc	r19, r19
     d6a:	22 0f       	add	r18, r18
     d6c:	33 1f       	adc	r19, r19
     d6e:	24 2b       	or	r18, r20
     d70:	fc 01       	movw	r30, r24
     d72:	20 83       	st	Z, r18
		break;
     d74:	98 c1       	rjmp	.+816    	; 0x10a6 <morph_config_gpio_set_pin_pull_state+0x660>
		case 16:
	
		// PB4

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 4) & 0x1) == 0)
     d76:	84 e2       	ldi	r24, 0x24	; 36
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	fc 01       	movw	r30, r24
     d7c:	80 81       	ld	r24, Z
     d7e:	82 95       	swap	r24
     d80:	8f 70       	andi	r24, 0x0F	; 15
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	81 70       	andi	r24, 0x01	; 1
     d88:	99 27       	eor	r25, r25
     d8a:	89 2b       	or	r24, r25
     d8c:	09 f0       	breq	.+2      	; 0xd90 <morph_config_gpio_set_pin_pull_state+0x34a>
     d8e:	8d c1       	rjmp	.+794    	; 0x10aa <morph_config_gpio_set_pin_pull_state+0x664>
			PORTB = (PORTB & ~(0x1 << 4)) | (value << 4);
     d90:	85 e2       	ldi	r24, 0x25	; 37
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	25 e2       	ldi	r18, 0x25	; 37
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	f9 01       	movw	r30, r18
     d9a:	20 81       	ld	r18, Z
     d9c:	42 2f       	mov	r20, r18
     d9e:	4f 7e       	andi	r20, 0xEF	; 239
     da0:	29 81       	ldd	r18, Y+1	; 0x01
     da2:	22 2f       	mov	r18, r18
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	22 95       	swap	r18
     da8:	32 95       	swap	r19
     daa:	30 7f       	andi	r19, 0xF0	; 240
     dac:	32 27       	eor	r19, r18
     dae:	20 7f       	andi	r18, 0xF0	; 240
     db0:	32 27       	eor	r19, r18
     db2:	24 2b       	or	r18, r20
     db4:	fc 01       	movw	r30, r24
     db6:	20 83       	st	Z, r18
		break;
     db8:	78 c1       	rjmp	.+752    	; 0x10aa <morph_config_gpio_set_pin_pull_state+0x664>
		case 17:
	
		// PB5

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 5) & 0x1) == 0)
     dba:	84 e2       	ldi	r24, 0x24	; 36
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	fc 01       	movw	r30, r24
     dc0:	80 81       	ld	r24, Z
     dc2:	82 95       	swap	r24
     dc4:	86 95       	lsr	r24
     dc6:	87 70       	andi	r24, 0x07	; 7
     dc8:	88 2f       	mov	r24, r24
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	81 70       	andi	r24, 0x01	; 1
     dce:	99 27       	eor	r25, r25
     dd0:	89 2b       	or	r24, r25
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <morph_config_gpio_set_pin_pull_state+0x390>
     dd4:	6c c1       	rjmp	.+728    	; 0x10ae <morph_config_gpio_set_pin_pull_state+0x668>
			PORTB = (PORTB & ~(0x1 << 5)) | (value << 5);
     dd6:	85 e2       	ldi	r24, 0x25	; 37
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	25 e2       	ldi	r18, 0x25	; 37
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	f9 01       	movw	r30, r18
     de0:	20 81       	ld	r18, Z
     de2:	42 2f       	mov	r20, r18
     de4:	4f 7d       	andi	r20, 0xDF	; 223
     de6:	29 81       	ldd	r18, Y+1	; 0x01
     de8:	22 2f       	mov	r18, r18
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	22 95       	swap	r18
     df2:	32 95       	swap	r19
     df4:	30 7f       	andi	r19, 0xF0	; 240
     df6:	32 27       	eor	r19, r18
     df8:	20 7f       	andi	r18, 0xF0	; 240
     dfa:	32 27       	eor	r19, r18
     dfc:	24 2b       	or	r18, r20
     dfe:	fc 01       	movw	r30, r24
     e00:	20 83       	st	Z, r18
		break;
     e02:	55 c1       	rjmp	.+682    	; 0x10ae <morph_config_gpio_set_pin_pull_state+0x668>
		case 23:
	
		// PC0

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 0) & 0x1) == 0)
     e04:	87 e2       	ldi	r24, 0x27	; 39
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	fc 01       	movw	r30, r24
     e0a:	80 81       	ld	r24, Z
     e0c:	88 2f       	mov	r24, r24
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	81 70       	andi	r24, 0x01	; 1
     e12:	99 27       	eor	r25, r25
     e14:	89 2b       	or	r24, r25
     e16:	09 f0       	breq	.+2      	; 0xe1a <morph_config_gpio_set_pin_pull_state+0x3d4>
     e18:	4c c1       	rjmp	.+664    	; 0x10b2 <morph_config_gpio_set_pin_pull_state+0x66c>
			PORTC = (PORTC & ~(0x1 << 0)) | (value << 0);
     e1a:	88 e2       	ldi	r24, 0x28	; 40
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	28 e2       	ldi	r18, 0x28	; 40
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	f9 01       	movw	r30, r18
     e24:	20 81       	ld	r18, Z
     e26:	32 2f       	mov	r19, r18
     e28:	3e 7f       	andi	r19, 0xFE	; 254
     e2a:	29 81       	ldd	r18, Y+1	; 0x01
     e2c:	23 2b       	or	r18, r19
     e2e:	fc 01       	movw	r30, r24
     e30:	20 83       	st	Z, r18
		break;
     e32:	3f c1       	rjmp	.+638    	; 0x10b2 <morph_config_gpio_set_pin_pull_state+0x66c>
		case 24:
	
		// PC1

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 1) & 0x1) == 0)
     e34:	87 e2       	ldi	r24, 0x27	; 39
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	fc 01       	movw	r30, r24
     e3a:	80 81       	ld	r24, Z
     e3c:	86 95       	lsr	r24
     e3e:	88 2f       	mov	r24, r24
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	81 70       	andi	r24, 0x01	; 1
     e44:	99 27       	eor	r25, r25
     e46:	89 2b       	or	r24, r25
     e48:	09 f0       	breq	.+2      	; 0xe4c <morph_config_gpio_set_pin_pull_state+0x406>
     e4a:	35 c1       	rjmp	.+618    	; 0x10b6 <morph_config_gpio_set_pin_pull_state+0x670>
			PORTC = (PORTC & ~(0x1 << 1)) | (value << 1);
     e4c:	88 e2       	ldi	r24, 0x28	; 40
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	28 e2       	ldi	r18, 0x28	; 40
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	f9 01       	movw	r30, r18
     e56:	20 81       	ld	r18, Z
     e58:	42 2f       	mov	r20, r18
     e5a:	4d 7f       	andi	r20, 0xFD	; 253
     e5c:	29 81       	ldd	r18, Y+1	; 0x01
     e5e:	22 2f       	mov	r18, r18
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	22 0f       	add	r18, r18
     e64:	33 1f       	adc	r19, r19
     e66:	24 2b       	or	r18, r20
     e68:	fc 01       	movw	r30, r24
     e6a:	20 83       	st	Z, r18
		break;
     e6c:	24 c1       	rjmp	.+584    	; 0x10b6 <morph_config_gpio_set_pin_pull_state+0x670>
		case 25:
	
		// PC2

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 2) & 0x1) == 0)
     e6e:	87 e2       	ldi	r24, 0x27	; 39
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	fc 01       	movw	r30, r24
     e74:	80 81       	ld	r24, Z
     e76:	86 95       	lsr	r24
     e78:	86 95       	lsr	r24
     e7a:	88 2f       	mov	r24, r24
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	81 70       	andi	r24, 0x01	; 1
     e80:	99 27       	eor	r25, r25
     e82:	89 2b       	or	r24, r25
     e84:	09 f0       	breq	.+2      	; 0xe88 <morph_config_gpio_set_pin_pull_state+0x442>
     e86:	19 c1       	rjmp	.+562    	; 0x10ba <morph_config_gpio_set_pin_pull_state+0x674>
			PORTC = (PORTC & ~(0x1 << 2)) | (value << 2);
     e88:	88 e2       	ldi	r24, 0x28	; 40
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	28 e2       	ldi	r18, 0x28	; 40
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	f9 01       	movw	r30, r18
     e92:	20 81       	ld	r18, Z
     e94:	42 2f       	mov	r20, r18
     e96:	4b 7f       	andi	r20, 0xFB	; 251
     e98:	29 81       	ldd	r18, Y+1	; 0x01
     e9a:	22 2f       	mov	r18, r18
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	22 0f       	add	r18, r18
     ea0:	33 1f       	adc	r19, r19
     ea2:	22 0f       	add	r18, r18
     ea4:	33 1f       	adc	r19, r19
     ea6:	24 2b       	or	r18, r20
     ea8:	fc 01       	movw	r30, r24
     eaa:	20 83       	st	Z, r18
		break;
     eac:	06 c1       	rjmp	.+524    	; 0x10ba <morph_config_gpio_set_pin_pull_state+0x674>
		case 26:
	
		// PC3

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 3) & 0x1) == 0)
     eae:	87 e2       	ldi	r24, 0x27	; 39
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	fc 01       	movw	r30, r24
     eb4:	80 81       	ld	r24, Z
     eb6:	86 95       	lsr	r24
     eb8:	86 95       	lsr	r24
     eba:	86 95       	lsr	r24
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	81 70       	andi	r24, 0x01	; 1
     ec2:	99 27       	eor	r25, r25
     ec4:	89 2b       	or	r24, r25
     ec6:	09 f0       	breq	.+2      	; 0xeca <morph_config_gpio_set_pin_pull_state+0x484>
     ec8:	fa c0       	rjmp	.+500    	; 0x10be <morph_config_gpio_set_pin_pull_state+0x678>
			PORTC = (PORTC & ~(0x1 << 3)) | (value << 3);
     eca:	88 e2       	ldi	r24, 0x28	; 40
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	28 e2       	ldi	r18, 0x28	; 40
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	f9 01       	movw	r30, r18
     ed4:	20 81       	ld	r18, Z
     ed6:	42 2f       	mov	r20, r18
     ed8:	47 7f       	andi	r20, 0xF7	; 247
     eda:	29 81       	ldd	r18, Y+1	; 0x01
     edc:	22 2f       	mov	r18, r18
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	22 0f       	add	r18, r18
     ee2:	33 1f       	adc	r19, r19
     ee4:	22 0f       	add	r18, r18
     ee6:	33 1f       	adc	r19, r19
     ee8:	22 0f       	add	r18, r18
     eea:	33 1f       	adc	r19, r19
     eec:	24 2b       	or	r18, r20
     eee:	fc 01       	movw	r30, r24
     ef0:	20 83       	st	Z, r18
		break;
     ef2:	e5 c0       	rjmp	.+458    	; 0x10be <morph_config_gpio_set_pin_pull_state+0x678>
		case 27:
	
		// PC4

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 4) & 0x1) == 0)
     ef4:	87 e2       	ldi	r24, 0x27	; 39
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	fc 01       	movw	r30, r24
     efa:	80 81       	ld	r24, Z
     efc:	82 95       	swap	r24
     efe:	8f 70       	andi	r24, 0x0F	; 15
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	81 70       	andi	r24, 0x01	; 1
     f06:	99 27       	eor	r25, r25
     f08:	89 2b       	or	r24, r25
     f0a:	09 f0       	breq	.+2      	; 0xf0e <morph_config_gpio_set_pin_pull_state+0x4c8>
     f0c:	da c0       	rjmp	.+436    	; 0x10c2 <morph_config_gpio_set_pin_pull_state+0x67c>
			PORTC = (PORTC & ~(0x1 << 4)) | (value << 4);
     f0e:	88 e2       	ldi	r24, 0x28	; 40
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	28 e2       	ldi	r18, 0x28	; 40
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	f9 01       	movw	r30, r18
     f18:	20 81       	ld	r18, Z
     f1a:	42 2f       	mov	r20, r18
     f1c:	4f 7e       	andi	r20, 0xEF	; 239
     f1e:	29 81       	ldd	r18, Y+1	; 0x01
     f20:	22 2f       	mov	r18, r18
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	22 95       	swap	r18
     f26:	32 95       	swap	r19
     f28:	30 7f       	andi	r19, 0xF0	; 240
     f2a:	32 27       	eor	r19, r18
     f2c:	20 7f       	andi	r18, 0xF0	; 240
     f2e:	32 27       	eor	r19, r18
     f30:	24 2b       	or	r18, r20
     f32:	fc 01       	movw	r30, r24
     f34:	20 83       	st	Z, r18
		break;
     f36:	c5 c0       	rjmp	.+394    	; 0x10c2 <morph_config_gpio_set_pin_pull_state+0x67c>
		case 28:
	
		// PC5

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 5) & 0x1) == 0)
     f38:	87 e2       	ldi	r24, 0x27	; 39
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	fc 01       	movw	r30, r24
     f3e:	80 81       	ld	r24, Z
     f40:	82 95       	swap	r24
     f42:	86 95       	lsr	r24
     f44:	87 70       	andi	r24, 0x07	; 7
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	81 70       	andi	r24, 0x01	; 1
     f4c:	99 27       	eor	r25, r25
     f4e:	89 2b       	or	r24, r25
     f50:	09 f0       	breq	.+2      	; 0xf54 <morph_config_gpio_set_pin_pull_state+0x50e>
     f52:	b9 c0       	rjmp	.+370    	; 0x10c6 <morph_config_gpio_set_pin_pull_state+0x680>
			PORTC = (PORTC & ~(0x1 << 5)) | (value << 5);
     f54:	88 e2       	ldi	r24, 0x28	; 40
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	28 e2       	ldi	r18, 0x28	; 40
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	f9 01       	movw	r30, r18
     f5e:	20 81       	ld	r18, Z
     f60:	42 2f       	mov	r20, r18
     f62:	4f 7d       	andi	r20, 0xDF	; 223
     f64:	29 81       	ldd	r18, Y+1	; 0x01
     f66:	22 2f       	mov	r18, r18
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	22 0f       	add	r18, r18
     f6c:	33 1f       	adc	r19, r19
     f6e:	22 95       	swap	r18
     f70:	32 95       	swap	r19
     f72:	30 7f       	andi	r19, 0xF0	; 240
     f74:	32 27       	eor	r19, r18
     f76:	20 7f       	andi	r18, 0xF0	; 240
     f78:	32 27       	eor	r19, r18
     f7a:	24 2b       	or	r18, r20
     f7c:	fc 01       	movw	r30, r24
     f7e:	20 83       	st	Z, r18
		break;
     f80:	a2 c0       	rjmp	.+324    	; 0x10c6 <morph_config_gpio_set_pin_pull_state+0x680>
		case 29:
	
		// PC6

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 6) & 0x1) == 0)
     f82:	87 e2       	ldi	r24, 0x27	; 39
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	fc 01       	movw	r30, r24
     f88:	80 81       	ld	r24, Z
     f8a:	82 95       	swap	r24
     f8c:	86 95       	lsr	r24
     f8e:	86 95       	lsr	r24
     f90:	83 70       	andi	r24, 0x03	; 3
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	81 70       	andi	r24, 0x01	; 1
     f98:	99 27       	eor	r25, r25
     f9a:	89 2b       	or	r24, r25
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <morph_config_gpio_set_pin_pull_state+0x55a>
     f9e:	95 c0       	rjmp	.+298    	; 0x10ca <morph_config_gpio_set_pin_pull_state+0x684>
			PORTC = (PORTC & ~(0x1 << 6)) | (value << 6);
     fa0:	88 e2       	ldi	r24, 0x28	; 40
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	28 e2       	ldi	r18, 0x28	; 40
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	f9 01       	movw	r30, r18
     faa:	20 81       	ld	r18, Z
     fac:	42 2f       	mov	r20, r18
     fae:	4f 7b       	andi	r20, 0xBF	; 191
     fb0:	29 81       	ldd	r18, Y+1	; 0x01
     fb2:	22 2f       	mov	r18, r18
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	00 24       	eor	r0, r0
     fb8:	36 95       	lsr	r19
     fba:	27 95       	ror	r18
     fbc:	07 94       	ror	r0
     fbe:	36 95       	lsr	r19
     fc0:	27 95       	ror	r18
     fc2:	07 94       	ror	r0
     fc4:	32 2f       	mov	r19, r18
     fc6:	20 2d       	mov	r18, r0
     fc8:	24 2b       	or	r18, r20
     fca:	fc 01       	movw	r30, r24
     fcc:	20 83       	st	Z, r18
		break;
     fce:	7d c0       	rjmp	.+250    	; 0x10ca <morph_config_gpio_set_pin_pull_state+0x684>
		case 30:
	
		// PD0

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 0) & 0x1) == 0)
     fd0:	8a e2       	ldi	r24, 0x2A	; 42
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	fc 01       	movw	r30, r24
     fd6:	80 81       	ld	r24, Z
     fd8:	88 2f       	mov	r24, r24
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	81 70       	andi	r24, 0x01	; 1
     fde:	99 27       	eor	r25, r25
     fe0:	89 2b       	or	r24, r25
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <morph_config_gpio_set_pin_pull_state+0x5a0>
     fe4:	74 c0       	rjmp	.+232    	; 0x10ce <morph_config_gpio_set_pin_pull_state+0x688>
			PORTD = (PORTD & ~(0x1 << 0)) | (value << 0);
     fe6:	8b e2       	ldi	r24, 0x2B	; 43
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	2b e2       	ldi	r18, 0x2B	; 43
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	f9 01       	movw	r30, r18
     ff0:	20 81       	ld	r18, Z
     ff2:	32 2f       	mov	r19, r18
     ff4:	3e 7f       	andi	r19, 0xFE	; 254
     ff6:	29 81       	ldd	r18, Y+1	; 0x01
     ff8:	23 2b       	or	r18, r19
     ffa:	fc 01       	movw	r30, r24
     ffc:	20 83       	st	Z, r18
		break;
     ffe:	67 c0       	rjmp	.+206    	; 0x10ce <morph_config_gpio_set_pin_pull_state+0x688>
		case 31:
	
		// PD1

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 1) & 0x1) == 0)
    1000:	8a e2       	ldi	r24, 0x2A	; 42
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	fc 01       	movw	r30, r24
    1006:	80 81       	ld	r24, Z
    1008:	86 95       	lsr	r24
    100a:	88 2f       	mov	r24, r24
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	81 70       	andi	r24, 0x01	; 1
    1010:	99 27       	eor	r25, r25
    1012:	89 2b       	or	r24, r25
    1014:	09 f0       	breq	.+2      	; 0x1018 <morph_config_gpio_set_pin_pull_state+0x5d2>
    1016:	5d c0       	rjmp	.+186    	; 0x10d2 <morph_config_gpio_set_pin_pull_state+0x68c>
			PORTD = (PORTD & ~(0x1 << 1)) | (value << 1);
    1018:	8b e2       	ldi	r24, 0x2B	; 43
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	2b e2       	ldi	r18, 0x2B	; 43
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	f9 01       	movw	r30, r18
    1022:	20 81       	ld	r18, Z
    1024:	42 2f       	mov	r20, r18
    1026:	4d 7f       	andi	r20, 0xFD	; 253
    1028:	29 81       	ldd	r18, Y+1	; 0x01
    102a:	22 2f       	mov	r18, r18
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	22 0f       	add	r18, r18
    1030:	33 1f       	adc	r19, r19
    1032:	24 2b       	or	r18, r20
    1034:	fc 01       	movw	r30, r24
    1036:	20 83       	st	Z, r18
		break;
    1038:	4c c0       	rjmp	.+152    	; 0x10d2 <morph_config_gpio_set_pin_pull_state+0x68c>
		case 32:
	
		// PD2

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 2) & 0x1) == 0)
    103a:	8a e2       	ldi	r24, 0x2A	; 42
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	fc 01       	movw	r30, r24
    1040:	80 81       	ld	r24, Z
    1042:	86 95       	lsr	r24
    1044:	86 95       	lsr	r24
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	81 70       	andi	r24, 0x01	; 1
    104c:	99 27       	eor	r25, r25
    104e:	89 2b       	or	r24, r25
    1050:	09 f0       	breq	.+2      	; 0x1054 <morph_config_gpio_set_pin_pull_state+0x60e>
    1052:	41 c0       	rjmp	.+130    	; 0x10d6 <morph_config_gpio_set_pin_pull_state+0x690>
			PORTD = (PORTD & ~(0x1 << 2)) | (value << 2);
    1054:	8b e2       	ldi	r24, 0x2B	; 43
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	2b e2       	ldi	r18, 0x2B	; 43
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	f9 01       	movw	r30, r18
    105e:	20 81       	ld	r18, Z
    1060:	42 2f       	mov	r20, r18
    1062:	4b 7f       	andi	r20, 0xFB	; 251
    1064:	29 81       	ldd	r18, Y+1	; 0x01
    1066:	22 2f       	mov	r18, r18
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	22 0f       	add	r18, r18
    106c:	33 1f       	adc	r19, r19
    106e:	22 0f       	add	r18, r18
    1070:	33 1f       	adc	r19, r19
    1072:	24 2b       	or	r18, r20
    1074:	fc 01       	movw	r30, r24
    1076:	20 83       	st	Z, r18
		break;
    1078:	2e c0       	rjmp	.+92     	; 0x10d6 <morph_config_gpio_set_pin_pull_state+0x690>

		break;
	
		case 3:
		// GND
		break;
    107a:	00 00       	nop
    107c:	2d c0       	rjmp	.+90     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 3) & 0x1) == 0)
			PORTD = (PORTD & ~(0x1 << 3)) | (value << 3);

		break;
    107e:	00 00       	nop
    1080:	2b c0       	rjmp	.+86     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PD4
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 4) & 0x1) == 0)
			PORTD = (PORTD & ~(0x1 << 4)) | (value << 4);

		break;
    1082:	00 00       	nop
    1084:	29 c0       	rjmp	.+82     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
	
		// PB6
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 6) & 0x1) == 0)
			PORTB = (PORTB & ~(0x1 << 6)) | (value << 6);
		break;
    1086:	00 00       	nop
    1088:	27 c0       	rjmp	.+78     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PB7

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 7) & 0x1) == 0)
			PORTB = (PORTB & ~(0x1 << 7)) | (value << 7);
		break;
    108a:	00 00       	nop
    108c:	25 c0       	rjmp	.+74     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PD5

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 5) & 0x1) == 0)
			PORTD = (PORTD & ~(0x1 << 5)) | (value << 5);
		break;
    108e:	00 00       	nop
    1090:	23 c0       	rjmp	.+70     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PD6

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 6) & 0x1) == 0)
			PORTD = (PORTD & ~(0x1 << 6)) | (value << 6);
		break;
    1092:	00 00       	nop
    1094:	21 c0       	rjmp	.+66     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PD7

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 7) & 0x1) == 0)
			PORTD = (PORTD & ~(0x1 << 7)) | (value << 7);
		break;
    1096:	00 00       	nop
    1098:	1f c0       	rjmp	.+62     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PB0

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 0) & 0x1) == 0)
			PORTB = (PORTB & ~(0x1 << 0)) | (value << 0);
		break;
    109a:	00 00       	nop
    109c:	1d c0       	rjmp	.+58     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PB1

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 1) & 0x1) == 0)
			PORTB = (PORTB & ~(0x1 << 1)) | (value << 1);
		break;
    109e:	00 00       	nop
    10a0:	1b c0       	rjmp	.+54     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PB2

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 2) & 0x1) == 0)
			PORTB = (PORTB & ~(0x1 << 2)) | (value << 2);
		break;
    10a2:	00 00       	nop
    10a4:	19 c0       	rjmp	.+50     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PB3

		// We can only have a pin pull if the pin is set to an input.
		if((((DDRB >> 3) & 0x1)) == 0)
			PORTB = (PORTB & ~(0x1 << 3)) | (value << 3);
		break;
    10a6:	00 00       	nop
    10a8:	17 c0       	rjmp	.+46     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PB4

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 4) & 0x1) == 0)
			PORTB = (PORTB & ~(0x1 << 4)) | (value << 4);
		break;
    10aa:	00 00       	nop
    10ac:	15 c0       	rjmp	.+42     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PB5

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 5) & 0x1) == 0)
			PORTB = (PORTB & ~(0x1 << 5)) | (value << 5);
		break;
    10ae:	00 00       	nop
    10b0:	13 c0       	rjmp	.+38     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PC0

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 0) & 0x1) == 0)
			PORTC = (PORTC & ~(0x1 << 0)) | (value << 0);
		break;
    10b2:	00 00       	nop
    10b4:	11 c0       	rjmp	.+34     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PC1

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 1) & 0x1) == 0)
			PORTC = (PORTC & ~(0x1 << 1)) | (value << 1);
		break;
    10b6:	00 00       	nop
    10b8:	0f c0       	rjmp	.+30     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PC2

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 2) & 0x1) == 0)
			PORTC = (PORTC & ~(0x1 << 2)) | (value << 2);
		break;
    10ba:	00 00       	nop
    10bc:	0d c0       	rjmp	.+26     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PC3

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 3) & 0x1) == 0)
			PORTC = (PORTC & ~(0x1 << 3)) | (value << 3);
		break;
    10be:	00 00       	nop
    10c0:	0b c0       	rjmp	.+22     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PC4

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 4) & 0x1) == 0)
			PORTC = (PORTC & ~(0x1 << 4)) | (value << 4);
		break;
    10c2:	00 00       	nop
    10c4:	09 c0       	rjmp	.+18     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PC5

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 5) & 0x1) == 0)
			PORTC = (PORTC & ~(0x1 << 5)) | (value << 5);
		break;
    10c6:	00 00       	nop
    10c8:	07 c0       	rjmp	.+14     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PC6

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 6) & 0x1) == 0)
			PORTC = (PORTC & ~(0x1 << 6)) | (value << 6);
		break;
    10ca:	00 00       	nop
    10cc:	05 c0       	rjmp	.+10     	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PD0

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 0) & 0x1) == 0)
			PORTD = (PORTD & ~(0x1 << 0)) | (value << 0);
		break;
    10ce:	00 00       	nop
    10d0:	03 c0       	rjmp	.+6      	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PD1

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 1) & 0x1) == 0)
			PORTD = (PORTD & ~(0x1 << 1)) | (value << 1);
		break;
    10d2:	00 00       	nop
    10d4:	01 c0       	rjmp	.+2      	; 0x10d8 <morph_config_gpio_set_pin_pull_state+0x692>
		// PD2

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 2) & 0x1) == 0)
			PORTD = (PORTD & ~(0x1 << 2)) | (value << 2);
		break;
    10d6:	00 00       	nop
	
	}
	
	
}
    10d8:	00 00       	nop
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	08 95       	ret

000010e6 <morph_config_gpio_get_pin_pull_state>:

enum MorphPinPullState morph_config_gpio_get_pin_pull_state(MorphPinNumber pn)
{
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <morph_config_gpio_get_pin_pull_state+0x6>
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	8a 83       	std	Y+2, r24	; 0x02

	// Figure out what pin we are talking about.
	
	enum MorphPinPullState value = PullNone;
    10f2:	19 82       	std	Y+1, r1	; 0x01

	// This is for the 32 pin package of the 328
	switch(pn)
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	88 2f       	mov	r24, r24
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	09 2e       	mov	r0, r25
    10fc:	00 0c       	add	r0, r0
    10fe:	aa 0b       	sbc	r26, r26
    1100:	bb 0b       	sbc	r27, r27
    1102:	41 e0       	ldi	r20, 0x01	; 1
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	2f e1       	ldi	r18, 0x1F	; 31
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	84 1b       	sub	r24, r20
    110c:	95 0b       	sbc	r25, r21
    110e:	28 17       	cp	r18, r24
    1110:	39 07       	cpc	r19, r25
    1112:	08 f4       	brcc	.+2      	; 0x1116 <morph_config_gpio_get_pin_pull_state+0x30>
    1114:	d8 c2       	rjmp	.+1456   	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
    1116:	8c 54       	subi	r24, 0x4C	; 76
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	fc 01       	movw	r30, r24
    111c:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__tablejump2__>
		
		case 1:
		// PD3

		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 3) & 0x1) == 0 && ((PORTD >> 3) & 0x1) == 1)
    1120:	8a e2       	ldi	r24, 0x2A	; 42
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	fc 01       	movw	r30, r24
    1126:	80 81       	ld	r24, Z
    1128:	86 95       	lsr	r24
    112a:	86 95       	lsr	r24
    112c:	86 95       	lsr	r24
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	81 70       	andi	r24, 0x01	; 1
    1134:	99 27       	eor	r25, r25
    1136:	89 2b       	or	r24, r25
    1138:	09 f0       	breq	.+2      	; 0x113c <morph_config_gpio_get_pin_pull_state+0x56>
    113a:	98 c2       	rjmp	.+1328   	; 0x166c <morph_config_gpio_get_pin_pull_state+0x586>
    113c:	8b e2       	ldi	r24, 0x2B	; 43
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	fc 01       	movw	r30, r24
    1142:	80 81       	ld	r24, Z
    1144:	86 95       	lsr	r24
    1146:	86 95       	lsr	r24
    1148:	86 95       	lsr	r24
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	81 70       	andi	r24, 0x01	; 1
    1150:	99 27       	eor	r25, r25
    1152:	89 2b       	or	r24, r25
    1154:	09 f4       	brne	.+2      	; 0x1158 <morph_config_gpio_get_pin_pull_state+0x72>
    1156:	8a c2       	rjmp	.+1300   	; 0x166c <morph_config_gpio_get_pin_pull_state+0x586>
		{
			value = PullHigh;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    115c:	87 c2       	rjmp	.+1294   	; 0x166c <morph_config_gpio_get_pin_pull_state+0x586>
		
		case 2:
		
		// PD4
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 4) & 0x1) == 0 && ((PORTD >> 4) & 0x1) == 1)
    115e:	8a e2       	ldi	r24, 0x2A	; 42
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	fc 01       	movw	r30, r24
    1164:	80 81       	ld	r24, Z
    1166:	82 95       	swap	r24
    1168:	8f 70       	andi	r24, 0x0F	; 15
    116a:	88 2f       	mov	r24, r24
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	81 70       	andi	r24, 0x01	; 1
    1170:	99 27       	eor	r25, r25
    1172:	89 2b       	or	r24, r25
    1174:	09 f0       	breq	.+2      	; 0x1178 <morph_config_gpio_get_pin_pull_state+0x92>
    1176:	7c c2       	rjmp	.+1272   	; 0x1670 <morph_config_gpio_get_pin_pull_state+0x58a>
    1178:	8b e2       	ldi	r24, 0x2B	; 43
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	fc 01       	movw	r30, r24
    117e:	80 81       	ld	r24, Z
    1180:	82 95       	swap	r24
    1182:	8f 70       	andi	r24, 0x0F	; 15
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	81 70       	andi	r24, 0x01	; 1
    118a:	99 27       	eor	r25, r25
    118c:	89 2b       	or	r24, r25
    118e:	09 f4       	brne	.+2      	; 0x1192 <morph_config_gpio_get_pin_pull_state+0xac>
    1190:	6f c2       	rjmp	.+1246   	; 0x1670 <morph_config_gpio_get_pin_pull_state+0x58a>
		{
			value = PullHigh;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    1196:	6c c2       	rjmp	.+1240   	; 0x1670 <morph_config_gpio_get_pin_pull_state+0x58a>
		
		case 7:
		
		// PB6
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 6) & 0x1) == 0 && ((PORTB >> 6) & 0x1) == 1)
    1198:	84 e2       	ldi	r24, 0x24	; 36
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	fc 01       	movw	r30, r24
    119e:	80 81       	ld	r24, Z
    11a0:	82 95       	swap	r24
    11a2:	86 95       	lsr	r24
    11a4:	86 95       	lsr	r24
    11a6:	83 70       	andi	r24, 0x03	; 3
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	81 70       	andi	r24, 0x01	; 1
    11ae:	99 27       	eor	r25, r25
    11b0:	89 2b       	or	r24, r25
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <morph_config_gpio_get_pin_pull_state+0xd0>
    11b4:	5f c2       	rjmp	.+1214   	; 0x1674 <morph_config_gpio_get_pin_pull_state+0x58e>
    11b6:	85 e2       	ldi	r24, 0x25	; 37
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	fc 01       	movw	r30, r24
    11bc:	80 81       	ld	r24, Z
    11be:	82 95       	swap	r24
    11c0:	86 95       	lsr	r24
    11c2:	86 95       	lsr	r24
    11c4:	83 70       	andi	r24, 0x03	; 3
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	81 70       	andi	r24, 0x01	; 1
    11cc:	99 27       	eor	r25, r25
    11ce:	89 2b       	or	r24, r25
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <morph_config_gpio_get_pin_pull_state+0xee>
    11d2:	50 c2       	rjmp	.+1184   	; 0x1674 <morph_config_gpio_get_pin_pull_state+0x58e>
		{
			value = PullHigh;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    11d8:	4d c2       	rjmp	.+1178   	; 0x1674 <morph_config_gpio_get_pin_pull_state+0x58e>
		
		case 8:
		
		// PB7
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 7) & 0x1) == 0 && ((PORTB >> 7) & 0x1) == 1)
    11da:	84 e2       	ldi	r24, 0x24	; 36
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	fc 01       	movw	r30, r24
    11e0:	80 81       	ld	r24, Z
    11e2:	88 1f       	adc	r24, r24
    11e4:	88 27       	eor	r24, r24
    11e6:	88 1f       	adc	r24, r24
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	81 70       	andi	r24, 0x01	; 1
    11ee:	99 27       	eor	r25, r25
    11f0:	89 2b       	or	r24, r25
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <morph_config_gpio_get_pin_pull_state+0x110>
    11f4:	41 c2       	rjmp	.+1154   	; 0x1678 <morph_config_gpio_get_pin_pull_state+0x592>
    11f6:	85 e2       	ldi	r24, 0x25	; 37
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	fc 01       	movw	r30, r24
    11fc:	80 81       	ld	r24, Z
    11fe:	88 1f       	adc	r24, r24
    1200:	88 27       	eor	r24, r24
    1202:	88 1f       	adc	r24, r24
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	81 70       	andi	r24, 0x01	; 1
    120a:	99 27       	eor	r25, r25
    120c:	89 2b       	or	r24, r25
    120e:	09 f4       	brne	.+2      	; 0x1212 <morph_config_gpio_get_pin_pull_state+0x12c>
    1210:	33 c2       	rjmp	.+1126   	; 0x1678 <morph_config_gpio_get_pin_pull_state+0x592>
		{
			value = PullHigh;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    1216:	30 c2       	rjmp	.+1120   	; 0x1678 <morph_config_gpio_get_pin_pull_state+0x592>
		
		case 9:
		
		// PD5
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 5) & 0x1) == 0 && ((PORTD >> 5) & 0x1) == 1)
    1218:	8a e2       	ldi	r24, 0x2A	; 42
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	fc 01       	movw	r30, r24
    121e:	80 81       	ld	r24, Z
    1220:	82 95       	swap	r24
    1222:	86 95       	lsr	r24
    1224:	87 70       	andi	r24, 0x07	; 7
    1226:	88 2f       	mov	r24, r24
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	81 70       	andi	r24, 0x01	; 1
    122c:	99 27       	eor	r25, r25
    122e:	89 2b       	or	r24, r25
    1230:	09 f0       	breq	.+2      	; 0x1234 <morph_config_gpio_get_pin_pull_state+0x14e>
    1232:	24 c2       	rjmp	.+1096   	; 0x167c <morph_config_gpio_get_pin_pull_state+0x596>
    1234:	8b e2       	ldi	r24, 0x2B	; 43
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	fc 01       	movw	r30, r24
    123a:	80 81       	ld	r24, Z
    123c:	82 95       	swap	r24
    123e:	86 95       	lsr	r24
    1240:	87 70       	andi	r24, 0x07	; 7
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	81 70       	andi	r24, 0x01	; 1
    1248:	99 27       	eor	r25, r25
    124a:	89 2b       	or	r24, r25
    124c:	09 f4       	brne	.+2      	; 0x1250 <morph_config_gpio_get_pin_pull_state+0x16a>
    124e:	16 c2       	rjmp	.+1068   	; 0x167c <morph_config_gpio_get_pin_pull_state+0x596>
		{
			value = PullHigh;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    1254:	13 c2       	rjmp	.+1062   	; 0x167c <morph_config_gpio_get_pin_pull_state+0x596>
		
		case 10:
		
		// PD6
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 6) & 0x1) == 0 && ((PORTD >> 6) & 0x1) == 1)
    1256:	8a e2       	ldi	r24, 0x2A	; 42
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	fc 01       	movw	r30, r24
    125c:	80 81       	ld	r24, Z
    125e:	82 95       	swap	r24
    1260:	86 95       	lsr	r24
    1262:	86 95       	lsr	r24
    1264:	83 70       	andi	r24, 0x03	; 3
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	81 70       	andi	r24, 0x01	; 1
    126c:	99 27       	eor	r25, r25
    126e:	89 2b       	or	r24, r25
    1270:	09 f0       	breq	.+2      	; 0x1274 <morph_config_gpio_get_pin_pull_state+0x18e>
    1272:	06 c2       	rjmp	.+1036   	; 0x1680 <morph_config_gpio_get_pin_pull_state+0x59a>
    1274:	8b e2       	ldi	r24, 0x2B	; 43
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	fc 01       	movw	r30, r24
    127a:	80 81       	ld	r24, Z
    127c:	82 95       	swap	r24
    127e:	86 95       	lsr	r24
    1280:	86 95       	lsr	r24
    1282:	83 70       	andi	r24, 0x03	; 3
    1284:	88 2f       	mov	r24, r24
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	81 70       	andi	r24, 0x01	; 1
    128a:	99 27       	eor	r25, r25
    128c:	89 2b       	or	r24, r25
    128e:	09 f4       	brne	.+2      	; 0x1292 <morph_config_gpio_get_pin_pull_state+0x1ac>
    1290:	f7 c1       	rjmp	.+1006   	; 0x1680 <morph_config_gpio_get_pin_pull_state+0x59a>
		{
			value = PullHigh;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    1296:	f4 c1       	rjmp	.+1000   	; 0x1680 <morph_config_gpio_get_pin_pull_state+0x59a>
		
		case 11:
		
		// PD7
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 7) & 0x1) == 0 && ((PORTD >> 7) & 0x1) == 1)
    1298:	8a e2       	ldi	r24, 0x2A	; 42
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	fc 01       	movw	r30, r24
    129e:	80 81       	ld	r24, Z
    12a0:	88 1f       	adc	r24, r24
    12a2:	88 27       	eor	r24, r24
    12a4:	88 1f       	adc	r24, r24
    12a6:	88 2f       	mov	r24, r24
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	81 70       	andi	r24, 0x01	; 1
    12ac:	99 27       	eor	r25, r25
    12ae:	89 2b       	or	r24, r25
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <morph_config_gpio_get_pin_pull_state+0x1ce>
    12b2:	e8 c1       	rjmp	.+976    	; 0x1684 <morph_config_gpio_get_pin_pull_state+0x59e>
    12b4:	8b e2       	ldi	r24, 0x2B	; 43
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	fc 01       	movw	r30, r24
    12ba:	80 81       	ld	r24, Z
    12bc:	88 1f       	adc	r24, r24
    12be:	88 27       	eor	r24, r24
    12c0:	88 1f       	adc	r24, r24
    12c2:	88 2f       	mov	r24, r24
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	81 70       	andi	r24, 0x01	; 1
    12c8:	99 27       	eor	r25, r25
    12ca:	89 2b       	or	r24, r25
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <morph_config_gpio_get_pin_pull_state+0x1ea>
    12ce:	da c1       	rjmp	.+948    	; 0x1684 <morph_config_gpio_get_pin_pull_state+0x59e>
		{
			value = PullHigh;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    12d4:	d7 c1       	rjmp	.+942    	; 0x1684 <morph_config_gpio_get_pin_pull_state+0x59e>
		
		case 12:
		
		// PB0
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 0) & 0x1) == 0 && ((PORTB >> 0) & 0x1) == 1)
    12d6:	84 e2       	ldi	r24, 0x24	; 36
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	fc 01       	movw	r30, r24
    12dc:	80 81       	ld	r24, Z
    12de:	88 2f       	mov	r24, r24
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	81 70       	andi	r24, 0x01	; 1
    12e4:	99 27       	eor	r25, r25
    12e6:	89 2b       	or	r24, r25
    12e8:	09 f0       	breq	.+2      	; 0x12ec <morph_config_gpio_get_pin_pull_state+0x206>
    12ea:	ce c1       	rjmp	.+924    	; 0x1688 <morph_config_gpio_get_pin_pull_state+0x5a2>
    12ec:	85 e2       	ldi	r24, 0x25	; 37
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	fc 01       	movw	r30, r24
    12f2:	80 81       	ld	r24, Z
    12f4:	88 2f       	mov	r24, r24
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	81 70       	andi	r24, 0x01	; 1
    12fa:	99 27       	eor	r25, r25
    12fc:	89 2b       	or	r24, r25
    12fe:	09 f4       	brne	.+2      	; 0x1302 <morph_config_gpio_get_pin_pull_state+0x21c>
    1300:	c3 c1       	rjmp	.+902    	; 0x1688 <morph_config_gpio_get_pin_pull_state+0x5a2>
		{
			value = PullHigh;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    1306:	c0 c1       	rjmp	.+896    	; 0x1688 <morph_config_gpio_get_pin_pull_state+0x5a2>
		
		case 13:
		
		// PB1
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 1) & 0x1) == 0 && ((PORTB >> 1) & 0x1) == 1)
    1308:	84 e2       	ldi	r24, 0x24	; 36
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	fc 01       	movw	r30, r24
    130e:	80 81       	ld	r24, Z
    1310:	86 95       	lsr	r24
    1312:	88 2f       	mov	r24, r24
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	81 70       	andi	r24, 0x01	; 1
    1318:	99 27       	eor	r25, r25
    131a:	89 2b       	or	r24, r25
    131c:	09 f0       	breq	.+2      	; 0x1320 <morph_config_gpio_get_pin_pull_state+0x23a>
    131e:	b6 c1       	rjmp	.+876    	; 0x168c <morph_config_gpio_get_pin_pull_state+0x5a6>
    1320:	85 e2       	ldi	r24, 0x25	; 37
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	fc 01       	movw	r30, r24
    1326:	80 81       	ld	r24, Z
    1328:	86 95       	lsr	r24
    132a:	88 2f       	mov	r24, r24
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	81 70       	andi	r24, 0x01	; 1
    1330:	99 27       	eor	r25, r25
    1332:	89 2b       	or	r24, r25
    1334:	09 f4       	brne	.+2      	; 0x1338 <morph_config_gpio_get_pin_pull_state+0x252>
    1336:	aa c1       	rjmp	.+852    	; 0x168c <morph_config_gpio_get_pin_pull_state+0x5a6>
		{
			value = PullHigh;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    133c:	a7 c1       	rjmp	.+846    	; 0x168c <morph_config_gpio_get_pin_pull_state+0x5a6>
		
		case 14:
		
		// PB2
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 2) & 0x1) == 0 && ((PORTB >> 2) & 0x1) == 1)
    133e:	84 e2       	ldi	r24, 0x24	; 36
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	fc 01       	movw	r30, r24
    1344:	80 81       	ld	r24, Z
    1346:	86 95       	lsr	r24
    1348:	86 95       	lsr	r24
    134a:	88 2f       	mov	r24, r24
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	81 70       	andi	r24, 0x01	; 1
    1350:	99 27       	eor	r25, r25
    1352:	89 2b       	or	r24, r25
    1354:	09 f0       	breq	.+2      	; 0x1358 <morph_config_gpio_get_pin_pull_state+0x272>
    1356:	9c c1       	rjmp	.+824    	; 0x1690 <morph_config_gpio_get_pin_pull_state+0x5aa>
    1358:	85 e2       	ldi	r24, 0x25	; 37
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	fc 01       	movw	r30, r24
    135e:	80 81       	ld	r24, Z
    1360:	86 95       	lsr	r24
    1362:	86 95       	lsr	r24
    1364:	88 2f       	mov	r24, r24
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	99 27       	eor	r25, r25
    136c:	89 2b       	or	r24, r25
    136e:	09 f4       	brne	.+2      	; 0x1372 <morph_config_gpio_get_pin_pull_state+0x28c>
    1370:	8f c1       	rjmp	.+798    	; 0x1690 <morph_config_gpio_get_pin_pull_state+0x5aa>
		{
			value = PullHigh;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    1376:	8c c1       	rjmp	.+792    	; 0x1690 <morph_config_gpio_get_pin_pull_state+0x5aa>
		
		case 15:
		
		// PB3
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 3) & 0x1) == 0 && ((PORTB >> 3) & 0x1) == 1)
    1378:	84 e2       	ldi	r24, 0x24	; 36
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	fc 01       	movw	r30, r24
    137e:	80 81       	ld	r24, Z
    1380:	86 95       	lsr	r24
    1382:	86 95       	lsr	r24
    1384:	86 95       	lsr	r24
    1386:	88 2f       	mov	r24, r24
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	81 70       	andi	r24, 0x01	; 1
    138c:	99 27       	eor	r25, r25
    138e:	89 2b       	or	r24, r25
    1390:	09 f0       	breq	.+2      	; 0x1394 <morph_config_gpio_get_pin_pull_state+0x2ae>
    1392:	80 c1       	rjmp	.+768    	; 0x1694 <morph_config_gpio_get_pin_pull_state+0x5ae>
    1394:	85 e2       	ldi	r24, 0x25	; 37
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	fc 01       	movw	r30, r24
    139a:	80 81       	ld	r24, Z
    139c:	86 95       	lsr	r24
    139e:	86 95       	lsr	r24
    13a0:	86 95       	lsr	r24
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	81 70       	andi	r24, 0x01	; 1
    13a8:	99 27       	eor	r25, r25
    13aa:	89 2b       	or	r24, r25
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <morph_config_gpio_get_pin_pull_state+0x2ca>
    13ae:	72 c1       	rjmp	.+740    	; 0x1694 <morph_config_gpio_get_pin_pull_state+0x5ae>
		{
			value = PullHigh;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    13b4:	6f c1       	rjmp	.+734    	; 0x1694 <morph_config_gpio_get_pin_pull_state+0x5ae>

		case 16:
		
		// PB4
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 4) & 0x1) == 0 && ((PORTB >> 4) & 0x1) == 1)
    13b6:	84 e2       	ldi	r24, 0x24	; 36
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	fc 01       	movw	r30, r24
    13bc:	80 81       	ld	r24, Z
    13be:	82 95       	swap	r24
    13c0:	8f 70       	andi	r24, 0x0F	; 15
    13c2:	88 2f       	mov	r24, r24
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	81 70       	andi	r24, 0x01	; 1
    13c8:	99 27       	eor	r25, r25
    13ca:	89 2b       	or	r24, r25
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <morph_config_gpio_get_pin_pull_state+0x2ea>
    13ce:	64 c1       	rjmp	.+712    	; 0x1698 <morph_config_gpio_get_pin_pull_state+0x5b2>
    13d0:	85 e2       	ldi	r24, 0x25	; 37
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	fc 01       	movw	r30, r24
    13d6:	80 81       	ld	r24, Z
    13d8:	82 95       	swap	r24
    13da:	8f 70       	andi	r24, 0x0F	; 15
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	81 70       	andi	r24, 0x01	; 1
    13e2:	99 27       	eor	r25, r25
    13e4:	89 2b       	or	r24, r25
    13e6:	09 f4       	brne	.+2      	; 0x13ea <morph_config_gpio_get_pin_pull_state+0x304>
    13e8:	57 c1       	rjmp	.+686    	; 0x1698 <morph_config_gpio_get_pin_pull_state+0x5b2>
		{
			value = PullHigh;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    13ee:	54 c1       	rjmp	.+680    	; 0x1698 <morph_config_gpio_get_pin_pull_state+0x5b2>

		case 17:
		
		// PB5
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRB >> 5) & 0x1) == 0 && ((PORTB >> 5) & 0x1) == 1)
    13f0:	84 e2       	ldi	r24, 0x24	; 36
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	fc 01       	movw	r30, r24
    13f6:	80 81       	ld	r24, Z
    13f8:	82 95       	swap	r24
    13fa:	86 95       	lsr	r24
    13fc:	87 70       	andi	r24, 0x07	; 7
    13fe:	88 2f       	mov	r24, r24
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	81 70       	andi	r24, 0x01	; 1
    1404:	99 27       	eor	r25, r25
    1406:	89 2b       	or	r24, r25
    1408:	09 f0       	breq	.+2      	; 0x140c <morph_config_gpio_get_pin_pull_state+0x326>
    140a:	48 c1       	rjmp	.+656    	; 0x169c <morph_config_gpio_get_pin_pull_state+0x5b6>
    140c:	85 e2       	ldi	r24, 0x25	; 37
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	fc 01       	movw	r30, r24
    1412:	80 81       	ld	r24, Z
    1414:	82 95       	swap	r24
    1416:	86 95       	lsr	r24
    1418:	87 70       	andi	r24, 0x07	; 7
    141a:	88 2f       	mov	r24, r24
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	81 70       	andi	r24, 0x01	; 1
    1420:	99 27       	eor	r25, r25
    1422:	89 2b       	or	r24, r25
    1424:	09 f4       	brne	.+2      	; 0x1428 <morph_config_gpio_get_pin_pull_state+0x342>
    1426:	3a c1       	rjmp	.+628    	; 0x169c <morph_config_gpio_get_pin_pull_state+0x5b6>
		{
			value = PullHigh;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    142c:	37 c1       	rjmp	.+622    	; 0x169c <morph_config_gpio_get_pin_pull_state+0x5b6>
		
		case 23:
		
		// PC0
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 0) & 0x1) == 0 && ((PORTC >> 0) & 0x1) == 1)
    142e:	87 e2       	ldi	r24, 0x27	; 39
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	fc 01       	movw	r30, r24
    1434:	80 81       	ld	r24, Z
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	81 70       	andi	r24, 0x01	; 1
    143c:	99 27       	eor	r25, r25
    143e:	89 2b       	or	r24, r25
    1440:	09 f0       	breq	.+2      	; 0x1444 <morph_config_gpio_get_pin_pull_state+0x35e>
    1442:	2e c1       	rjmp	.+604    	; 0x16a0 <morph_config_gpio_get_pin_pull_state+0x5ba>
    1444:	88 e2       	ldi	r24, 0x28	; 40
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	fc 01       	movw	r30, r24
    144a:	80 81       	ld	r24, Z
    144c:	88 2f       	mov	r24, r24
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	81 70       	andi	r24, 0x01	; 1
    1452:	99 27       	eor	r25, r25
    1454:	89 2b       	or	r24, r25
    1456:	09 f4       	brne	.+2      	; 0x145a <morph_config_gpio_get_pin_pull_state+0x374>
    1458:	23 c1       	rjmp	.+582    	; 0x16a0 <morph_config_gpio_get_pin_pull_state+0x5ba>
		{
			value = PullHigh;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    145e:	20 c1       	rjmp	.+576    	; 0x16a0 <morph_config_gpio_get_pin_pull_state+0x5ba>

		case 24:
		
		// PC1
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 1) & 0x1) == 0 && ((PORTC >> 1) & 0x1) == 1)
    1460:	87 e2       	ldi	r24, 0x27	; 39
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	fc 01       	movw	r30, r24
    1466:	80 81       	ld	r24, Z
    1468:	86 95       	lsr	r24
    146a:	88 2f       	mov	r24, r24
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	81 70       	andi	r24, 0x01	; 1
    1470:	99 27       	eor	r25, r25
    1472:	89 2b       	or	r24, r25
    1474:	09 f0       	breq	.+2      	; 0x1478 <morph_config_gpio_get_pin_pull_state+0x392>
    1476:	16 c1       	rjmp	.+556    	; 0x16a4 <morph_config_gpio_get_pin_pull_state+0x5be>
    1478:	88 e2       	ldi	r24, 0x28	; 40
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	fc 01       	movw	r30, r24
    147e:	80 81       	ld	r24, Z
    1480:	86 95       	lsr	r24
    1482:	88 2f       	mov	r24, r24
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	81 70       	andi	r24, 0x01	; 1
    1488:	99 27       	eor	r25, r25
    148a:	89 2b       	or	r24, r25
    148c:	09 f4       	brne	.+2      	; 0x1490 <morph_config_gpio_get_pin_pull_state+0x3aa>
    148e:	0a c1       	rjmp	.+532    	; 0x16a4 <morph_config_gpio_get_pin_pull_state+0x5be>
		{
			value = PullHigh;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    1494:	07 c1       	rjmp	.+526    	; 0x16a4 <morph_config_gpio_get_pin_pull_state+0x5be>
		
		case 25:
		
		// PC2
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 2) & 0x1) == 0 && ((PORTC >> 2) & 0x1) == 1)
    1496:	87 e2       	ldi	r24, 0x27	; 39
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	fc 01       	movw	r30, r24
    149c:	80 81       	ld	r24, Z
    149e:	86 95       	lsr	r24
    14a0:	86 95       	lsr	r24
    14a2:	88 2f       	mov	r24, r24
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	81 70       	andi	r24, 0x01	; 1
    14a8:	99 27       	eor	r25, r25
    14aa:	89 2b       	or	r24, r25
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <morph_config_gpio_get_pin_pull_state+0x3ca>
    14ae:	fc c0       	rjmp	.+504    	; 0x16a8 <morph_config_gpio_get_pin_pull_state+0x5c2>
    14b0:	88 e2       	ldi	r24, 0x28	; 40
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	fc 01       	movw	r30, r24
    14b6:	80 81       	ld	r24, Z
    14b8:	86 95       	lsr	r24
    14ba:	86 95       	lsr	r24
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	81 70       	andi	r24, 0x01	; 1
    14c2:	99 27       	eor	r25, r25
    14c4:	89 2b       	or	r24, r25
    14c6:	09 f4       	brne	.+2      	; 0x14ca <morph_config_gpio_get_pin_pull_state+0x3e4>
    14c8:	ef c0       	rjmp	.+478    	; 0x16a8 <morph_config_gpio_get_pin_pull_state+0x5c2>
		{
			value = PullHigh;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    14ce:	ec c0       	rjmp	.+472    	; 0x16a8 <morph_config_gpio_get_pin_pull_state+0x5c2>

		case 26:
		
		// PC3
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 3) & 0x1) == 0 && ((PORTC >> 3) & 0x1) == 1)
    14d0:	87 e2       	ldi	r24, 0x27	; 39
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	fc 01       	movw	r30, r24
    14d6:	80 81       	ld	r24, Z
    14d8:	86 95       	lsr	r24
    14da:	86 95       	lsr	r24
    14dc:	86 95       	lsr	r24
    14de:	88 2f       	mov	r24, r24
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	81 70       	andi	r24, 0x01	; 1
    14e4:	99 27       	eor	r25, r25
    14e6:	89 2b       	or	r24, r25
    14e8:	09 f0       	breq	.+2      	; 0x14ec <morph_config_gpio_get_pin_pull_state+0x406>
    14ea:	e0 c0       	rjmp	.+448    	; 0x16ac <morph_config_gpio_get_pin_pull_state+0x5c6>
    14ec:	88 e2       	ldi	r24, 0x28	; 40
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	fc 01       	movw	r30, r24
    14f2:	80 81       	ld	r24, Z
    14f4:	86 95       	lsr	r24
    14f6:	86 95       	lsr	r24
    14f8:	86 95       	lsr	r24
    14fa:	88 2f       	mov	r24, r24
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	81 70       	andi	r24, 0x01	; 1
    1500:	99 27       	eor	r25, r25
    1502:	89 2b       	or	r24, r25
    1504:	09 f4       	brne	.+2      	; 0x1508 <morph_config_gpio_get_pin_pull_state+0x422>
    1506:	d2 c0       	rjmp	.+420    	; 0x16ac <morph_config_gpio_get_pin_pull_state+0x5c6>
		{
			value = PullHigh;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    150c:	cf c0       	rjmp	.+414    	; 0x16ac <morph_config_gpio_get_pin_pull_state+0x5c6>
		
		case 27:
		
		// PC4
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 4) & 0x1) == 0 && ((PORTC >> 4) & 0x1) == 1)
    150e:	87 e2       	ldi	r24, 0x27	; 39
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	fc 01       	movw	r30, r24
    1514:	80 81       	ld	r24, Z
    1516:	82 95       	swap	r24
    1518:	8f 70       	andi	r24, 0x0F	; 15
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	81 70       	andi	r24, 0x01	; 1
    1520:	99 27       	eor	r25, r25
    1522:	89 2b       	or	r24, r25
    1524:	09 f0       	breq	.+2      	; 0x1528 <morph_config_gpio_get_pin_pull_state+0x442>
    1526:	c4 c0       	rjmp	.+392    	; 0x16b0 <morph_config_gpio_get_pin_pull_state+0x5ca>
    1528:	88 e2       	ldi	r24, 0x28	; 40
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	fc 01       	movw	r30, r24
    152e:	80 81       	ld	r24, Z
    1530:	82 95       	swap	r24
    1532:	8f 70       	andi	r24, 0x0F	; 15
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	81 70       	andi	r24, 0x01	; 1
    153a:	99 27       	eor	r25, r25
    153c:	89 2b       	or	r24, r25
    153e:	09 f4       	brne	.+2      	; 0x1542 <morph_config_gpio_get_pin_pull_state+0x45c>
    1540:	b7 c0       	rjmp	.+366    	; 0x16b0 <morph_config_gpio_get_pin_pull_state+0x5ca>
		{
			value = PullHigh;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    1546:	b4 c0       	rjmp	.+360    	; 0x16b0 <morph_config_gpio_get_pin_pull_state+0x5ca>

		case 28:
		
		// PC5
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 5) & 0x1) == 0 && ((PORTC >> 5) & 0x1) == 1)
    1548:	87 e2       	ldi	r24, 0x27	; 39
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	fc 01       	movw	r30, r24
    154e:	80 81       	ld	r24, Z
    1550:	82 95       	swap	r24
    1552:	86 95       	lsr	r24
    1554:	87 70       	andi	r24, 0x07	; 7
    1556:	88 2f       	mov	r24, r24
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	81 70       	andi	r24, 0x01	; 1
    155c:	99 27       	eor	r25, r25
    155e:	89 2b       	or	r24, r25
    1560:	09 f0       	breq	.+2      	; 0x1564 <morph_config_gpio_get_pin_pull_state+0x47e>
    1562:	a8 c0       	rjmp	.+336    	; 0x16b4 <morph_config_gpio_get_pin_pull_state+0x5ce>
    1564:	88 e2       	ldi	r24, 0x28	; 40
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	fc 01       	movw	r30, r24
    156a:	80 81       	ld	r24, Z
    156c:	82 95       	swap	r24
    156e:	86 95       	lsr	r24
    1570:	87 70       	andi	r24, 0x07	; 7
    1572:	88 2f       	mov	r24, r24
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	81 70       	andi	r24, 0x01	; 1
    1578:	99 27       	eor	r25, r25
    157a:	89 2b       	or	r24, r25
    157c:	09 f4       	brne	.+2      	; 0x1580 <morph_config_gpio_get_pin_pull_state+0x49a>
    157e:	9a c0       	rjmp	.+308    	; 0x16b4 <morph_config_gpio_get_pin_pull_state+0x5ce>
		{
			value = PullHigh;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    1584:	97 c0       	rjmp	.+302    	; 0x16b4 <morph_config_gpio_get_pin_pull_state+0x5ce>

		case 29:
		
		// PC6
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRC >> 6) & 0x1) == 0 && ((PORTC >> 6) & 0x1) == 1)
    1586:	87 e2       	ldi	r24, 0x27	; 39
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	fc 01       	movw	r30, r24
    158c:	80 81       	ld	r24, Z
    158e:	82 95       	swap	r24
    1590:	86 95       	lsr	r24
    1592:	86 95       	lsr	r24
    1594:	83 70       	andi	r24, 0x03	; 3
    1596:	88 2f       	mov	r24, r24
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	81 70       	andi	r24, 0x01	; 1
    159c:	99 27       	eor	r25, r25
    159e:	89 2b       	or	r24, r25
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <morph_config_gpio_get_pin_pull_state+0x4be>
    15a2:	8a c0       	rjmp	.+276    	; 0x16b8 <morph_config_gpio_get_pin_pull_state+0x5d2>
    15a4:	88 e2       	ldi	r24, 0x28	; 40
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	fc 01       	movw	r30, r24
    15aa:	80 81       	ld	r24, Z
    15ac:	82 95       	swap	r24
    15ae:	86 95       	lsr	r24
    15b0:	86 95       	lsr	r24
    15b2:	83 70       	andi	r24, 0x03	; 3
    15b4:	88 2f       	mov	r24, r24
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	81 70       	andi	r24, 0x01	; 1
    15ba:	99 27       	eor	r25, r25
    15bc:	89 2b       	or	r24, r25
    15be:	09 f4       	brne	.+2      	; 0x15c2 <morph_config_gpio_get_pin_pull_state+0x4dc>
    15c0:	7b c0       	rjmp	.+246    	; 0x16b8 <morph_config_gpio_get_pin_pull_state+0x5d2>
		{
			value = PullHigh;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    15c6:	78 c0       	rjmp	.+240    	; 0x16b8 <morph_config_gpio_get_pin_pull_state+0x5d2>

		case 30:
		
		// PD0
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 0) & 0x1) == 0 && ((PORTD >> 0) & 0x1) == 1)
    15c8:	8a e2       	ldi	r24, 0x2A	; 42
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	fc 01       	movw	r30, r24
    15ce:	80 81       	ld	r24, Z
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	81 70       	andi	r24, 0x01	; 1
    15d6:	99 27       	eor	r25, r25
    15d8:	89 2b       	or	r24, r25
    15da:	09 f0       	breq	.+2      	; 0x15de <morph_config_gpio_get_pin_pull_state+0x4f8>
    15dc:	6f c0       	rjmp	.+222    	; 0x16bc <morph_config_gpio_get_pin_pull_state+0x5d6>
    15de:	8b e2       	ldi	r24, 0x2B	; 43
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	fc 01       	movw	r30, r24
    15e4:	80 81       	ld	r24, Z
    15e6:	88 2f       	mov	r24, r24
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	81 70       	andi	r24, 0x01	; 1
    15ec:	99 27       	eor	r25, r25
    15ee:	89 2b       	or	r24, r25
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <morph_config_gpio_get_pin_pull_state+0x50e>
    15f2:	64 c0       	rjmp	.+200    	; 0x16bc <morph_config_gpio_get_pin_pull_state+0x5d6>
		{
			value = PullHigh;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    15f8:	61 c0       	rjmp	.+194    	; 0x16bc <morph_config_gpio_get_pin_pull_state+0x5d6>

		case 31:
		
		// PD1
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 1) & 0x1) == 0 && ((PORTD >> 1) & 0x1) == 1)
    15fa:	8a e2       	ldi	r24, 0x2A	; 42
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	fc 01       	movw	r30, r24
    1600:	80 81       	ld	r24, Z
    1602:	86 95       	lsr	r24
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	81 70       	andi	r24, 0x01	; 1
    160a:	99 27       	eor	r25, r25
    160c:	89 2b       	or	r24, r25
    160e:	09 f0       	breq	.+2      	; 0x1612 <morph_config_gpio_get_pin_pull_state+0x52c>
    1610:	57 c0       	rjmp	.+174    	; 0x16c0 <morph_config_gpio_get_pin_pull_state+0x5da>
    1612:	8b e2       	ldi	r24, 0x2B	; 43
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	fc 01       	movw	r30, r24
    1618:	80 81       	ld	r24, Z
    161a:	86 95       	lsr	r24
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	81 70       	andi	r24, 0x01	; 1
    1622:	99 27       	eor	r25, r25
    1624:	89 2b       	or	r24, r25
    1626:	09 f4       	brne	.+2      	; 0x162a <morph_config_gpio_get_pin_pull_state+0x544>
    1628:	4b c0       	rjmp	.+150    	; 0x16c0 <morph_config_gpio_get_pin_pull_state+0x5da>
		{
			value = PullHigh;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    162e:	48 c0       	rjmp	.+144    	; 0x16c0 <morph_config_gpio_get_pin_pull_state+0x5da>

		case 32:
		
		// PD2
		// We can only have a pin pull if the pin is set to an input.
		if(((DDRD >> 2) & 0x1) == 0 && ((PORTD >> 2) & 0x1) == 1)
    1630:	8a e2       	ldi	r24, 0x2A	; 42
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	fc 01       	movw	r30, r24
    1636:	80 81       	ld	r24, Z
    1638:	86 95       	lsr	r24
    163a:	86 95       	lsr	r24
    163c:	88 2f       	mov	r24, r24
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	81 70       	andi	r24, 0x01	; 1
    1642:	99 27       	eor	r25, r25
    1644:	89 2b       	or	r24, r25
    1646:	09 f0       	breq	.+2      	; 0x164a <morph_config_gpio_get_pin_pull_state+0x564>
    1648:	3d c0       	rjmp	.+122    	; 0x16c4 <morph_config_gpio_get_pin_pull_state+0x5de>
    164a:	8b e2       	ldi	r24, 0x2B	; 43
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	fc 01       	movw	r30, r24
    1650:	80 81       	ld	r24, Z
    1652:	86 95       	lsr	r24
    1654:	86 95       	lsr	r24
    1656:	88 2f       	mov	r24, r24
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	81 70       	andi	r24, 0x01	; 1
    165c:	99 27       	eor	r25, r25
    165e:	89 2b       	or	r24, r25
    1660:	89 f1       	breq	.+98     	; 0x16c4 <morph_config_gpio_get_pin_pull_state+0x5de>
		{
			value = PullHigh;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	89 83       	std	Y+1, r24	; 0x01
		}

		break;
    1666:	2e c0       	rjmp	.+92     	; 0x16c4 <morph_config_gpio_get_pin_pull_state+0x5de>
		break;

		
		case 3:
		// GND
		break;
    1668:	00 00       	nop
    166a:	2d c0       	rjmp	.+90     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRD >> 3) & 0x1) == 0 && ((PORTD >> 3) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    166c:	00 00       	nop
    166e:	2b c0       	rjmp	.+86     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRD >> 4) & 0x1) == 0 && ((PORTD >> 4) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    1670:	00 00       	nop
    1672:	29 c0       	rjmp	.+82     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRB >> 6) & 0x1) == 0 && ((PORTB >> 6) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    1674:	00 00       	nop
    1676:	27 c0       	rjmp	.+78     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRB >> 7) & 0x1) == 0 && ((PORTB >> 7) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    1678:	00 00       	nop
    167a:	25 c0       	rjmp	.+74     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRD >> 5) & 0x1) == 0 && ((PORTD >> 5) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    167c:	00 00       	nop
    167e:	23 c0       	rjmp	.+70     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRD >> 6) & 0x1) == 0 && ((PORTD >> 6) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    1680:	00 00       	nop
    1682:	21 c0       	rjmp	.+66     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRD >> 7) & 0x1) == 0 && ((PORTD >> 7) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    1684:	00 00       	nop
    1686:	1f c0       	rjmp	.+62     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRB >> 0) & 0x1) == 0 && ((PORTB >> 0) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    1688:	00 00       	nop
    168a:	1d c0       	rjmp	.+58     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRB >> 1) & 0x1) == 0 && ((PORTB >> 1) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    168c:	00 00       	nop
    168e:	1b c0       	rjmp	.+54     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRB >> 2) & 0x1) == 0 && ((PORTB >> 2) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    1690:	00 00       	nop
    1692:	19 c0       	rjmp	.+50     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRB >> 3) & 0x1) == 0 && ((PORTB >> 3) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    1694:	00 00       	nop
    1696:	17 c0       	rjmp	.+46     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRB >> 4) & 0x1) == 0 && ((PORTB >> 4) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    1698:	00 00       	nop
    169a:	15 c0       	rjmp	.+42     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRB >> 5) & 0x1) == 0 && ((PORTB >> 5) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    169c:	00 00       	nop
    169e:	13 c0       	rjmp	.+38     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRC >> 0) & 0x1) == 0 && ((PORTC >> 0) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    16a0:	00 00       	nop
    16a2:	11 c0       	rjmp	.+34     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRC >> 1) & 0x1) == 0 && ((PORTC >> 1) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    16a4:	00 00       	nop
    16a6:	0f c0       	rjmp	.+30     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRC >> 2) & 0x1) == 0 && ((PORTC >> 2) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    16a8:	00 00       	nop
    16aa:	0d c0       	rjmp	.+26     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRC >> 3) & 0x1) == 0 && ((PORTC >> 3) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    16ac:	00 00       	nop
    16ae:	0b c0       	rjmp	.+22     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRC >> 4) & 0x1) == 0 && ((PORTC >> 4) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    16b0:	00 00       	nop
    16b2:	09 c0       	rjmp	.+18     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRC >> 5) & 0x1) == 0 && ((PORTC >> 5) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    16b4:	00 00       	nop
    16b6:	07 c0       	rjmp	.+14     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRC >> 6) & 0x1) == 0 && ((PORTC >> 6) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    16b8:	00 00       	nop
    16ba:	05 c0       	rjmp	.+10     	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRD >> 0) & 0x1) == 0 && ((PORTD >> 0) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    16bc:	00 00       	nop
    16be:	03 c0       	rjmp	.+6      	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRD >> 1) & 0x1) == 0 && ((PORTD >> 1) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    16c0:	00 00       	nop
    16c2:	01 c0       	rjmp	.+2      	; 0x16c6 <morph_config_gpio_get_pin_pull_state+0x5e0>
		if(((DDRD >> 2) & 0x1) == 0 && ((PORTD >> 2) & 0x1) == 1)
		{
			value = PullHigh;
		}

		break;
    16c4:	00 00       	nop

		
	}
	
	return value;
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	08 95       	ret

000016d2 <morph_implementation_test>:

void morph_implementation_test()
{
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	1f 92       	push	r1
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t i = 0;
    16dc:	19 82       	std	Y+1, r1	; 0x01
	
	i ++;
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	8f 5f       	subi	r24, 0xFF	; 255
    16e2:	89 83       	std	Y+1, r24	; 0x01
	
	i ++; 
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	8f 5f       	subi	r24, 0xFF	; 255
    16e8:	89 83       	std	Y+1, r24	; 0x01
	
	i ++;
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	8f 5f       	subi	r24, 0xFF	; 255
    16ee:	89 83       	std	Y+1, r24	; 0x01
	
}
    16f0:	00 00       	nop
    16f2:	0f 90       	pop	r0
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret

000016fa <MorphUtils_empty_callback>:
	#ifdef MORPH_IMPLICIT
		return morph_config_gpio_get_pin_pull_state(pn);
	#else
		return morph_get_pin_pull_state_function(pn);
	#endif
}
    16fa:	08 95       	ret

000016fc <MorphGPIO_register_get_pin_value_function>:
    16fc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <morph_get_pin_value_function+0x1>
    1700:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <morph_get_pin_value_function>
    1704:	08 95       	ret

00001706 <MorphGPIO_register_set_pin_direction_function>:
    1706:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
    170a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
    170e:	08 95       	ret

00001710 <MorphGPIO_register_get_pin_direction_function>:
    1710:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <morph_get_pin_direction_function+0x1>
    1714:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <morph_get_pin_direction_function>
    1718:	08 95       	ret

0000171a <MorphGPIO_register_set_pin_pull_state_function>:
    171a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <morph_set_pin_pull_state_function+0x1>
    171e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <morph_set_pin_pull_state_function>
    1722:	08 95       	ret

00001724 <MorphGPIO_register_get_pin_pull_state_function>:
    1724:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <morph_get_pin_pull_state_function+0x1>
    1728:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <morph_get_pin_pull_state_function>
    172c:	08 95       	ret

0000172e <MorphGPIO_set_pin_value>:
    172e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1732:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1736:	09 95       	icall
    1738:	08 95       	ret

0000173a <MorphGPIO_get_pin_value>:
    173a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <morph_get_pin_value_function>
    173e:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <morph_get_pin_value_function+0x1>
    1742:	09 95       	icall
    1744:	08 95       	ret

00001746 <MorphGPIO_set_pin_direction>:
    1746:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
    174a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_end+0x1>
    174e:	09 95       	icall
    1750:	08 95       	ret

00001752 <MorphGPIO_get_pin_direction>:
    1752:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <morph_get_pin_direction_function>
    1756:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <morph_get_pin_direction_function+0x1>
    175a:	09 95       	icall
    175c:	08 95       	ret

0000175e <MorphGPIO_imp_test>:

void MorphGPIO_imp_test()
{
	
	morph_implementation_test();
    175e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <morph_implementation_test>
    1762:	08 95       	ret

00001764 <__tablejump2__>:
    1764:	ee 0f       	add	r30, r30
    1766:	ff 1f       	adc	r31, r31
    1768:	05 90       	lpm	r0, Z+
    176a:	f4 91       	lpm	r31, Z
    176c:	e0 2d       	mov	r30, r0
    176e:	09 94       	ijmp

00001770 <_exit>:
    1770:	f8 94       	cli

00001772 <__stop_program>:
    1772:	ff cf       	rjmp	.-2      	; 0x1772 <__stop_program>
