
MorphTest-ATmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a0  00800100  0000270c  000027a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000270c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  008002a0  008002a0  00002940  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002940  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002970  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000628  00000000  00000000  000029b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004092  00000000  00000000  00002fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ffd  00000000  00000000  0000706a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ce4  00000000  00000000  00008067  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001240  00000000  00000000  00009d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002464  00000000  00000000  0000af8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000268d  00000000  00000000  0000d3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c0  00000000  00000000  0000fa7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
       4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      1c:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__vector_7>
      20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      2c:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__vector_11>
      30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      38:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__vector_14>
      3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <timer_update_millis+0x4c>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
      86:	11 24       	eor	r1, r1
      88:	1f be       	out	0x3f, r1	; 63
      8a:	cf ef       	ldi	r28, 0xFF	; 255
      8c:	d8 e0       	ldi	r29, 0x08	; 8
      8e:	de bf       	out	0x3e, r29	; 62
      90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
      92:	12 e0       	ldi	r17, 0x02	; 2
      94:	a0 e0       	ldi	r26, 0x00	; 0
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	ec e0       	ldi	r30, 0x0C	; 12
      9a:	f7 e2       	ldi	r31, 0x27	; 39
      9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
      9e:	05 90       	lpm	r0, Z+
      a0:	0d 92       	st	X+, r0
      a2:	a0 3a       	cpi	r26, 0xA0	; 160
      a4:	b1 07       	cpc	r27, r17
      a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
      a8:	22 e0       	ldi	r18, 0x02	; 2
      aa:	a0 ea       	ldi	r26, 0xA0	; 160
      ac:	b2 e0       	ldi	r27, 0x02	; 2
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
      b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
      b2:	ab 3a       	cpi	r26, 0xAB	; 171
      b4:	b2 07       	cpc	r27, r18
      b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
      b8:	0e 94 23 01 	call	0x246	; 0x246 <main>
      bc:	0c 94 84 13 	jmp	0x2708	; 0x2708 <_exit>

000000c0 <__bad_interrupt>:
      c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <MorphConfig_init>:
void morph_implementation_test();

// Does the configuration during run-time
// Configuration only involves setting function pointer values.
static void MorphConfig_init()
{
      c4:	cf 93       	push	r28
      c6:	df 93       	push	r29
      c8:	cd b7       	in	r28, 0x3d	; 61
      ca:	de b7       	in	r29, 0x3e	; 62

	morph_config_init();
      cc:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <morph_config_init>

	// GPIO Config

	MorphGPIO_register_set_pin_value_function(&morph_config_gpio_set_pin_value);
      d0:	85 e0       	ldi	r24, 0x05	; 5
      d2:	92 e0       	ldi	r25, 0x02	; 2
      d4:	0e 94 cd 11 	call	0x239a	; 0x239a <MorphGPIO_register_set_pin_value_function>

	MorphGPIO_register_get_pin_value_function(&morph_config_gpio_get_pin_value);
      d8:	86 e6       	ldi	r24, 0x66	; 102
      da:	92 e0       	ldi	r25, 0x02	; 2
      dc:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <MorphGPIO_register_get_pin_value_function>
	
	MorphGPIO_register_set_pin_direction_function(&morph_config_gpio_set_pin_direction);
      e0:	8f ea       	ldi	r24, 0xAF	; 175
      e2:	92 e0       	ldi	r25, 0x02	; 2
      e4:	0e 94 d7 11 	call	0x23ae	; 0x23ae <MorphGPIO_register_set_pin_direction_function>
	
	MorphGPIO_register_get_pin_direction_function(&morph_config_gpio_get_pin_direction);
      e8:	80 e1       	ldi	r24, 0x10	; 16
      ea:	93 e0       	ldi	r25, 0x03	; 3
      ec:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <MorphGPIO_register_get_pin_direction_function>

	MorphGPIO_register_set_pin_pull_state_function(&morph_config_gpio_set_pin_pull_state);
      f0:	8a e5       	ldi	r24, 0x5A	; 90
      f2:	93 e0       	ldi	r25, 0x03	; 3
      f4:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MorphGPIO_register_set_pin_pull_state_function>
	
	MorphGPIO_register_get_pin_pull_state_function(&morph_config_gpio_get_pin_pull_state);	
      f8:	84 ed       	ldi	r24, 0xD4	; 212
      fa:	93 e0       	ldi	r25, 0x03	; 3
      fc:	0e 94 e6 11 	call	0x23cc	; 0x23cc <MorphGPIO_register_get_pin_pull_state_function>
	
	// UART Config
	
	MorphUART_register_setup_channel_function(&morph_config_uart_setup_channel);
     100:	8f ed       	ldi	r24, 0xDF	; 223
     102:	93 e0       	ldi	r25, 0x03	; 3
     104:	0e 94 65 12 	call	0x24ca	; 0x24ca <MorphUART_register_setup_channel_function>
	
	//MorphUART_register_disable_channel_function
	
	MorphUART_register_send_data_function(&morph_config_uart_send_data);
     108:	8f ef       	ldi	r24, 0xFF	; 255
     10a:	93 e0       	ldi	r25, 0x03	; 3
     10c:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <MorphUART_register_send_data_function>

	MorphUART_register_read_data_function(&morph_config_uart_read_data);
     110:	8f e0       	ldi	r24, 0x0F	; 15
     112:	94 e0       	ldi	r25, 0x04	; 4
     114:	0e 94 6f 12 	call	0x24de	; 0x24de <MorphUART_register_read_data_function>

	MorphUART_register_send_byte_function(&morph_config_uart_send_byte);
     118:	8a e1       	ldi	r24, 0x1A	; 26
     11a:	94 e0       	ldi	r25, 0x04	; 4
     11c:	0e 94 74 12 	call	0x24e8	; 0x24e8 <MorphUART_register_send_byte_function>
	
	MorphUART_register_read_byte_function(&morph_config_uart_read_byte);
     120:	87 e2       	ldi	r24, 0x27	; 39
     122:	94 e0       	ldi	r25, 0x04	; 4
     124:	0e 94 79 12 	call	0x24f2	; 0x24f2 <MorphUART_register_read_byte_function>

	MorphUART_register_read_byte_buffer_function(&morph_config_uart_read_byte_buffer);
     128:	8d e7       	ldi	r24, 0x7D	; 125
     12a:	94 e0       	ldi	r25, 0x04	; 4
     12c:	0e 94 8d 12 	call	0x251a	; 0x251a <MorphUART_register_read_byte_buffer_function>
	
	MorphUART_register_write_byte_buffer_function(&morph_config_uart_write_byte_buffer);
     130:	87 e4       	ldi	r24, 0x47	; 71
     132:	94 e0       	ldi	r25, 0x04	; 4
     134:	0e 94 83 12 	call	0x2506	; 0x2506 <MorphUART_register_write_byte_buffer_function>
	
	MorphUART_register_write_data_buffer_function(&morph_config_uart_write_data_buffer);
     138:	82 e3       	ldi	r24, 0x32	; 50
     13a:	94 e0       	ldi	r25, 0x04	; 4
     13c:	0e 94 7e 12 	call	0x24fc	; 0x24fc <MorphUART_register_write_data_buffer_function>
	
	MorphUART_register_read_data_buffer_function(&morph_config_uart_read_data_buffer);
     140:	8c e5       	ldi	r24, 0x5C	; 92
     142:	94 e0       	ldi	r25, 0x04	; 4
     144:	0e 94 88 12 	call	0x2510	; 0x2510 <MorphUART_register_read_data_buffer_function>
	
	MorphUART_register_data_ready_function(&morph_config_uart_data_ready);
     148:	8e e9       	ldi	r24, 0x9E	; 158
     14a:	94 e0       	ldi	r25, 0x04	; 4
     14c:	0e 94 92 12 	call	0x2524	; 0x2524 <MorphUART_register_data_ready_function>
	
	MorphUART_register_set_tx_pin_function(&morph_config_uart_set_tx_pin);
     150:	89 ea       	ldi	r24, 0xA9	; 169
     152:	94 e0       	ldi	r25, 0x04	; 4
     154:	0e 94 97 12 	call	0x252e	; 0x252e <MorphUART_register_set_tx_pin_function>

	MorphUART_register_set_rx_pin_function(&morph_config_uart_set_rx_pin);
     158:	86 eb       	ldi	r24, 0xB6	; 182
     15a:	94 e0       	ldi	r25, 0x04	; 4
     15c:	0e 94 9c 12 	call	0x2538	; 0x2538 <MorphUART_register_set_rx_pin_function>
	//MorphI2C_register_write(&morph_config_i2c_write);
	//MorphI2C_register_set_scl_pin(&morph_config_i2c_set_scl_pin);
	//MorphI2C_register_set_sda_pin(&morph_config_i2c_set_sda_pin);

	// Time functions
	MorphTime_register_init_function(&morph_config_time_init);
     160:	8e e0       	ldi	r24, 0x0E	; 14
     162:	95 e0       	ldi	r25, 0x05	; 5
     164:	0e 94 2e 12 	call	0x245c	; 0x245c <MorphTime_register_init_function>
	
	MorphTime_register_init_rtc_function(&morph_config_time_init_rtc);
     168:	8d e4       	ldi	r24, 0x4D	; 77
     16a:	95 e0       	ldi	r25, 0x05	; 5
     16c:	0e 94 33 12 	call	0x2466	; 0x2466 <MorphTime_register_init_rtc_function>
	
	MorphTime_register_millis_function(&morph_config_time_millis);
     170:	85 e5       	ldi	r24, 0x55	; 85
     172:	95 e0       	ldi	r25, 0x05	; 5
     174:	0e 94 38 12 	call	0x2470	; 0x2470 <MorphTime_register_millis_function>
	
	// Timer functions
	
	MorphTimer_register_acquire_timer_function(&morph_config_timer_acquire_timer);
     178:	82 e5       	ldi	r24, 0x52	; 82
     17a:	99 e0       	ldi	r25, 0x09	; 9
     17c:	0e 94 4a 12 	call	0x2494	; 0x2494 <MorphTimer_register_acquire_timer_function>

	MorphTimer_register_set_rate_function(&morph_config_timer_set_rate);
     180:	87 e9       	ldi	r24, 0x97	; 151
     182:	99 e0       	ldi	r25, 0x09	; 9
     184:	0e 94 54 12 	call	0x24a8	; 0x24a8 <MorphTimer_register_set_rate_function>

	MorphTimer_register_release_timer_function(&morph_config_timer_release_timer);
     188:	8a e8       	ldi	r24, 0x8A	; 138
     18a:	99 e0       	ldi	r25, 0x09	; 9
     18c:	0e 94 4f 12 	call	0x249e	; 0x249e <MorphTimer_register_release_timer_function>
	
	MorphTimer_register_set_timer_callback_function(&morph_config_timer_set_timer_callback);
     190:	8f ed       	ldi	r24, 0xDF	; 223
     192:	99 e0       	ldi	r25, 0x09	; 9
     194:	0e 94 59 12 	call	0x24b2	; 0x24b2 <MorphTimer_register_set_timer_callback_function>
		
	// PWM functions

	MorphPWM_register_start_pwm(&morph_config_pwm_start_pwm);
     198:	89 ea       	ldi	r24, 0xA9	; 169
     19a:	9a e0       	ldi	r25, 0x0A	; 10
     19c:	0e 94 fe 11 	call	0x23fc	; 0x23fc <MorphPWM_register_start_pwm>

	MorphPWM_register_stop_pwm(&morph_config_pwm_stop_pwm);
     1a0:	8e eb       	ldi	r24, 0xBE	; 190
     1a2:	9c e0       	ldi	r25, 0x0C	; 12
     1a4:	0e 94 03 12 	call	0x2406	; 0x2406 <MorphPWM_register_stop_pwm>

	MorphPWM_register_set_pwm_duty_float(&morph_config_pwm_set_pwm_duty_float);
     1a8:	89 ec       	ldi	r24, 0xC9	; 201
     1aa:	9c e0       	ldi	r25, 0x0C	; 12
     1ac:	0e 94 08 12 	call	0x2410	; 0x2410 <MorphPWM_register_set_pwm_duty_float>

	MorphPWM_register_set_pwm_duty_64bit(&morph_config_pwm_set_pwm_duty_64bit);
     1b0:	88 e4       	ldi	r24, 0x48	; 72
     1b2:	9d e0       	ldi	r25, 0x0D	; 13
     1b4:	0e 94 0d 12 	call	0x241a	; 0x241a <MorphPWM_register_set_pwm_duty_64bit>

	MorphPWM_register_set_pwm_duty_32bit(&morph_config_pwm_set_pwm_duty_32bit);
     1b8:	89 e6       	ldi	r24, 0x69	; 105
     1ba:	9d e0       	ldi	r25, 0x0D	; 13
     1bc:	0e 94 12 12 	call	0x2424	; 0x2424 <MorphPWM_register_set_pwm_duty_32bit>

	MorphPWM_register_set_pwm_duty_16bit(&morph_config_pwm_set_pwm_duty_16bit);
     1c0:	8e e7       	ldi	r24, 0x7E	; 126
     1c2:	9d e0       	ldi	r25, 0x0D	; 13
     1c4:	0e 94 17 12 	call	0x242e	; 0x242e <MorphPWM_register_set_pwm_duty_16bit>

	MorphPWM_register_set_pwm_duty_8bit(&morph_config_pwm_set_pwm_duty_8bit);
     1c8:	8e e8       	ldi	r24, 0x8E	; 142
     1ca:	9d e0       	ldi	r25, 0x0D	; 13
     1cc:	0e 94 1c 12 	call	0x2438	; 0x2438 <MorphPWM_register_set_pwm_duty_8bit>

	// ADC functions
	MorphADC_register_get_adc_value_function(&morph_config_adc_get_adc_value);
     1d0:	8b e9       	ldi	r24, 0x9B	; 155
     1d2:	9d e0       	ldi	r25, 0x0D	; 13
     1d4:	0e 94 a4 11 	call	0x2348	; 0x2348 <MorphADC_register_get_adc_value_function>

	MorphADC_register_get_adc_pin_function(&morph_config_adc_get_adc_pin);
     1d8:	8a ea       	ldi	r24, 0xAA	; 170
     1da:	9d e0       	ldi	r25, 0x0D	; 13
     1dc:	0e 94 a9 11 	call	0x2352	; 0x2352 <MorphADC_register_get_adc_pin_function>
	
	MorphADC_register_init_adc_function(&morph_config_adc_init_adc);
     1e0:	89 eb       	ldi	r24, 0xB9	; 185
     1e2:	9d e0       	ldi	r25, 0x0D	; 13
     1e4:	0e 94 ae 11 	call	0x235c	; 0x235c <MorphADC_register_init_adc_function>

	MorphADC_register_read_function(&morph_config_adc_read);
     1e8:	84 ec       	ldi	r24, 0xC4	; 196
     1ea:	9d e0       	ldi	r25, 0x0D	; 13
     1ec:	0e 94 b3 11 	call	0x2366	; 0x2366 <MorphADC_register_read_function>
	
	MorphADC_register_set_resolution_function(&morph_config_adc_set_resolution);
     1f0:	81 ed       	ldi	r24, 0xD1	; 209
     1f2:	9d e0       	ldi	r25, 0x0D	; 13
     1f4:	0e 94 b8 11 	call	0x2370	; 0x2370 <MorphADC_register_set_resolution_function>

	MorphADC_register_set_reference_function(&morph_config_adc_set_reference);
     1f8:	8e ed       	ldi	r24, 0xDE	; 222
     1fa:	9d e0       	ldi	r25, 0x0D	; 13
     1fc:	0e 94 bd 11 	call	0x237a	; 0x237a <MorphADC_register_set_reference_function>

	MorphADC_register_set_prescaler_function(&morph_config_adc_set_prescaler);
     200:	8e ee       	ldi	r24, 0xEE	; 238
     202:	9d e0       	ldi	r25, 0x0D	; 13
     204:	0e 94 c2 11 	call	0x2384	; 0x2384 <MorphADC_register_set_prescaler_function>
	
	MorphADC_register_get_maximum_value(&morph_config_adc_get_maximum_value);
     208:	8e ef       	ldi	r24, 0xFE	; 254
     20a:	9d e0       	ldi	r25, 0x0D	; 13
     20c:	0e 94 c7 11 	call	0x238e	; 0x238e <MorphADC_register_get_maximum_value>

}
     210:	00 00       	nop
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <callback_test>:
#include <assert.h>

bool pin_on = false;

void callback_test()
{
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62

	pin_on = !pin_on;
     220:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <__data_end>
     224:	88 2f       	mov	r24, r24
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	21 e0       	ldi	r18, 0x01	; 1
     22a:	89 2b       	or	r24, r25
     22c:	09 f4       	brne	.+2      	; 0x230 <callback_test+0x18>
     22e:	20 e0       	ldi	r18, 0x00	; 0
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	82 27       	eor	r24, r18
     234:	88 2f       	mov	r24, r24
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	81 70       	andi	r24, 0x01	; 1
     23a:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <__data_end>
	
//	MorphGPIO_set_pin_value(19, pin_on ? High : Low);
	
}
     23e:	00 00       	nop
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	08 95       	ret

00000246 <main>:

int main(void)
{
     246:	2f 92       	push	r2
     248:	3f 92       	push	r3
     24a:	4f 92       	push	r4
     24c:	5f 92       	push	r5
     24e:	6f 92       	push	r6
     250:	7f 92       	push	r7
     252:	8f 92       	push	r8
     254:	9f 92       	push	r9
     256:	af 92       	push	r10
     258:	bf 92       	push	r11
     25a:	cf 92       	push	r12
     25c:	df 92       	push	r13
     25e:	ef 92       	push	r14
     260:	ff 92       	push	r15
     262:	0f 93       	push	r16
     264:	1f 93       	push	r17
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
     26e:	2c 97       	sbiw	r28, 0x0c	; 12
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	de bf       	out	0x3e, r29	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	cd bf       	out	0x3d, r28	; 61
	
	MorphConfig_init();
     27a:	0e 94 62 00 	call	0xc4	; 0xc4 <MorphConfig_init>
	
	MorphGPIO_set_pin_direction(19, Output);
     27e:	61 e0       	ldi	r22, 0x01	; 1
     280:	83 e1       	ldi	r24, 0x13	; 19
     282:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <MorphGPIO_set_pin_direction>
	
//	MorphGPIO_set_pin_value(19, High);

	MorphGPIO_set_pin_value(19, Low);
     286:	60 e0       	ldi	r22, 0x00	; 0
     288:	83 e1       	ldi	r24, 0x13	; 19
     28a:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <MorphGPIO_set_pin_value>

	MorphGPIO_set_pin_pull_state(19, PullHigh);
     28e:	61 e0       	ldi	r22, 0x01	; 1
     290:	83 e1       	ldi	r24, 0x13	; 19
     292:	0e 94 f7 11 	call	0x23ee	; 0x23ee <MorphGPIO_set_pin_pull_state>

	//MorphTimer_acquire_timer(0, 8);
//
	//MorphTimer_set_rate(0, 8, 24);
	//
	MorphPWM_start_pwm(12);
     296:	8c e0       	ldi	r24, 0x0C	; 12
     298:	0e 94 21 12 	call	0x2442	; 0x2442 <MorphPWM_start_pwm>
	
	MorphTimer_set_timer_callback(0, 8, &callback_test);
     29c:	4c e0       	ldi	r20, 0x0C	; 12
     29e:	51 e0       	ldi	r21, 0x01	; 1
     2a0:	68 e0       	ldi	r22, 0x08	; 8
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	0e 94 5e 12 	call	0x24bc	; 0x24bc <MorphTimer_set_timer_callback>
	
	MorphTime_init(1, 8);
     2a8:	68 e0       	ldi	r22, 0x08	; 8
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	0e 94 3d 12 	call	0x247a	; 0x247a <MorphTime_init>
	//MorphGPIO_imp_test();

    /* Replace with your application code */
    while (1) 
    {
		MorphTimeValue cur_time = MorphTime_millis();
     2b0:	0e 94 43 12 	call	0x2486	; 0x2486 <MorphTime_millis>
     2b4:	a2 2e       	mov	r10, r18
     2b6:	b3 2e       	mov	r11, r19
     2b8:	c4 2e       	mov	r12, r20
     2ba:	d5 2e       	mov	r13, r21
     2bc:	e6 2e       	mov	r14, r22
     2be:	f7 2e       	mov	r15, r23
     2c0:	08 2f       	mov	r16, r24
     2c2:	19 2f       	mov	r17, r25
     2c4:	a9 82       	std	Y+1, r10	; 0x01
     2c6:	ba 82       	std	Y+2, r11	; 0x02
     2c8:	cb 82       	std	Y+3, r12	; 0x03
     2ca:	dc 82       	std	Y+4, r13	; 0x04
     2cc:	ed 82       	std	Y+5, r14	; 0x05
     2ce:	fe 82       	std	Y+6, r15	; 0x06
     2d0:	0f 83       	std	Y+7, r16	; 0x07
     2d2:	18 87       	std	Y+8, r17	; 0x08

		if(cur_time % 2000 > 1000)
     2d4:	29 80       	ldd	r2, Y+1	; 0x01
     2d6:	3a 80       	ldd	r3, Y+2	; 0x02
     2d8:	4b 80       	ldd	r4, Y+3	; 0x03
     2da:	5c 80       	ldd	r5, Y+4	; 0x04
     2dc:	6d 80       	ldd	r6, Y+5	; 0x05
     2de:	7e 80       	ldd	r7, Y+6	; 0x06
     2e0:	8f 80       	ldd	r8, Y+7	; 0x07
     2e2:	98 84       	ldd	r9, Y+8	; 0x08
     2e4:	0f 2e       	mov	r0, r31
     2e6:	f0 ed       	ldi	r31, 0xD0	; 208
     2e8:	af 2e       	mov	r10, r31
     2ea:	f0 2d       	mov	r31, r0
     2ec:	0f 2e       	mov	r0, r31
     2ee:	f7 e0       	ldi	r31, 0x07	; 7
     2f0:	bf 2e       	mov	r11, r31
     2f2:	f0 2d       	mov	r31, r0
     2f4:	c1 2c       	mov	r12, r1
     2f6:	d1 2c       	mov	r13, r1
     2f8:	e1 2c       	mov	r14, r1
     2fa:	f1 2c       	mov	r15, r1
     2fc:	00 e0       	ldi	r16, 0x00	; 0
     2fe:	10 e0       	ldi	r17, 0x00	; 0
     300:	22 2d       	mov	r18, r2
     302:	33 2d       	mov	r19, r3
     304:	44 2d       	mov	r20, r4
     306:	55 2d       	mov	r21, r5
     308:	66 2d       	mov	r22, r6
     30a:	77 2d       	mov	r23, r7
     30c:	88 2d       	mov	r24, r8
     30e:	99 2d       	mov	r25, r9
     310:	0e 94 a1 12 	call	0x2542	; 0x2542 <__moddi3>
     314:	22 2e       	mov	r2, r18
     316:	33 2e       	mov	r3, r19
     318:	44 2e       	mov	r4, r20
     31a:	55 2e       	mov	r5, r21
     31c:	66 2e       	mov	r6, r22
     31e:	77 2e       	mov	r7, r23
     320:	88 2e       	mov	r8, r24
     322:	99 2e       	mov	r9, r25
     324:	a2 2c       	mov	r10, r2
     326:	b3 2c       	mov	r11, r3
     328:	c4 2c       	mov	r12, r4
     32a:	d5 2c       	mov	r13, r5
     32c:	e6 2c       	mov	r14, r6
     32e:	f7 2c       	mov	r15, r7
     330:	08 2d       	mov	r16, r8
     332:	19 2d       	mov	r17, r9
     334:	2a 2d       	mov	r18, r10
     336:	3b 2d       	mov	r19, r11
     338:	4c 2d       	mov	r20, r12
     33a:	5d 2d       	mov	r21, r13
     33c:	6e 2d       	mov	r22, r14
     33e:	7f 2d       	mov	r23, r15
     340:	80 2f       	mov	r24, r16
     342:	91 2f       	mov	r25, r17
     344:	28 3e       	cpi	r18, 0xE8	; 232
     346:	33 40       	sbci	r19, 0x03	; 3
     348:	41 05       	cpc	r20, r1
     34a:	51 05       	cpc	r21, r1
     34c:	61 05       	cpc	r22, r1
     34e:	71 05       	cpc	r23, r1
     350:	81 05       	cpc	r24, r1
     352:	91 05       	cpc	r25, r1
     354:	31 f0       	breq	.+12     	; 0x362 <main+0x11c>
     356:	2c f0       	brlt	.+10     	; 0x362 <main+0x11c>
		{
			
			MorphGPIO_set_pin_value(19, Low);
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	83 e1       	ldi	r24, 0x13	; 19
     35c:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <MorphGPIO_set_pin_value>
     360:	04 c0       	rjmp	.+8      	; 0x36a <main+0x124>
			
		}
		else
		{
			
			MorphGPIO_set_pin_value(19, High);
     362:	61 e0       	ldi	r22, 0x01	; 1
     364:	83 e1       	ldi	r24, 0x13	; 19
     366:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <MorphGPIO_set_pin_value>
		}
		
	
		float duty = ((sin((cur_time / 10000.0f) * 3.141f) + 1.0f)/2.0f);
     36a:	29 81       	ldd	r18, Y+1	; 0x01
     36c:	3a 81       	ldd	r19, Y+2	; 0x02
     36e:	4b 81       	ldd	r20, Y+3	; 0x03
     370:	5c 81       	ldd	r21, Y+4	; 0x04
     372:	6d 81       	ldd	r22, Y+5	; 0x05
     374:	7e 81       	ldd	r23, Y+6	; 0x06
     376:	8f 81       	ldd	r24, Y+7	; 0x07
     378:	98 85       	ldd	r25, Y+8	; 0x08
     37a:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__floatdisf>
     37e:	dc 01       	movw	r26, r24
     380:	cb 01       	movw	r24, r22
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e4       	ldi	r19, 0x40	; 64
     386:	4c e1       	ldi	r20, 0x1C	; 28
     388:	56 e4       	ldi	r21, 0x46	; 70
     38a:	bc 01       	movw	r22, r24
     38c:	cd 01       	movw	r24, r26
     38e:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__divsf3>
     392:	dc 01       	movw	r26, r24
     394:	cb 01       	movw	r24, r22
     396:	25 e2       	ldi	r18, 0x25	; 37
     398:	36 e0       	ldi	r19, 0x06	; 6
     39a:	49 e4       	ldi	r20, 0x49	; 73
     39c:	50 e4       	ldi	r21, 0x40	; 64
     39e:	bc 01       	movw	r22, r24
     3a0:	cd 01       	movw	r24, r26
     3a2:	0e 94 a6 10 	call	0x214c	; 0x214c <__mulsf3>
     3a6:	dc 01       	movw	r26, r24
     3a8:	cb 01       	movw	r24, r22
     3aa:	bc 01       	movw	r22, r24
     3ac:	cd 01       	movw	r24, r26
     3ae:	0e 94 13 11 	call	0x2226	; 0x2226 <sin>
     3b2:	dc 01       	movw	r26, r24
     3b4:	cb 01       	movw	r24, r22
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	40 e8       	ldi	r20, 0x80	; 128
     3bc:	5f e3       	ldi	r21, 0x3F	; 63
     3be:	bc 01       	movw	r22, r24
     3c0:	cd 01       	movw	r24, r26
     3c2:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__addsf3>
     3c6:	dc 01       	movw	r26, r24
     3c8:	cb 01       	movw	r24, r22
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	50 e4       	ldi	r21, 0x40	; 64
     3d2:	bc 01       	movw	r22, r24
     3d4:	cd 01       	movw	r24, r26
     3d6:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__divsf3>
     3da:	dc 01       	movw	r26, r24
     3dc:	cb 01       	movw	r24, r22
     3de:	89 87       	std	Y+9, r24	; 0x09
     3e0:	9a 87       	std	Y+10, r25	; 0x0a
     3e2:	ab 87       	std	Y+11, r26	; 0x0b
     3e4:	bc 87       	std	Y+12, r27	; 0x0c
		
		//float duty = ((cur_time % 5000) / 1000) * (1.0f / 5.0f);
		//
		MorphPWM_set_pwm_duty_float(12, duty);
     3e6:	89 85       	ldd	r24, Y+9	; 0x09
     3e8:	9a 85       	ldd	r25, Y+10	; 0x0a
     3ea:	ab 85       	ldd	r26, Y+11	; 0x0b
     3ec:	bc 85       	ldd	r27, Y+12	; 0x0c
     3ee:	ac 01       	movw	r20, r24
     3f0:	bd 01       	movw	r22, r26
     3f2:	8c e0       	ldi	r24, 0x0C	; 12
     3f4:	0e 94 27 12 	call	0x244e	; 0x244e <MorphPWM_set_pwm_duty_float>
		
    }
     3f8:	5b cf       	rjmp	.-330    	; 0x2b0 <main+0x6a>

000003fa <MorphUtils_empty_callback>:
}

bool morph_config_timer_is_in_use(MorphTimerNumber tn, MorphTimerResolution res)
{
	
}
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	00 00       	nop
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	08 95       	ret

0000040a <morph_config_gpio_set_pin_value>:
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	2e 97       	sbiw	r28, 0x0e	; 14
     414:	0f b6       	in	r0, 0x3f	; 63
     416:	f8 94       	cli
     418:	de bf       	out	0x3e, r29	; 62
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	cd bf       	out	0x3d, r28	; 61
     41e:	8d 87       	std	Y+13, r24	; 0x0d
     420:	6e 87       	std	Y+14, r22	; 0x0e
     422:	8d 85       	ldd	r24, Y+13	; 0x0d
     424:	18 16       	cp	r1, r24
     426:	0c f0       	brlt	.+2      	; 0x42a <morph_config_gpio_set_pin_value+0x20>
     428:	47 c0       	rjmp	.+142    	; 0x4b8 <morph_config_gpio_set_pin_value+0xae>
     42a:	8d 85       	ldd	r24, Y+13	; 0x0d
     42c:	8d 31       	cpi	r24, 0x1D	; 29
     42e:	0c f0       	brlt	.+2      	; 0x432 <morph_config_gpio_set_pin_value+0x28>
     430:	43 c0       	rjmp	.+134    	; 0x4b8 <morph_config_gpio_set_pin_value+0xae>
     432:	8d 85       	ldd	r24, Y+13	; 0x0d
     434:	08 2e       	mov	r0, r24
     436:	00 0c       	add	r0, r0
     438:	99 0b       	sbc	r25, r25
     43a:	01 97       	sbiw	r24, 0x01	; 1
     43c:	88 0f       	add	r24, r24
     43e:	99 1f       	adc	r25, r25
     440:	9c 01       	movw	r18, r24
     442:	22 0f       	add	r18, r18
     444:	33 1f       	adc	r19, r19
     446:	22 0f       	add	r18, r18
     448:	33 1f       	adc	r19, r19
     44a:	82 0f       	add	r24, r18
     44c:	93 1f       	adc	r25, r19
     44e:	80 50       	subi	r24, 0x00	; 0
     450:	9f 4f       	sbci	r25, 0xFF	; 255
     452:	2a e0       	ldi	r18, 0x0A	; 10
     454:	fc 01       	movw	r30, r24
     456:	de 01       	movw	r26, r28
     458:	13 96       	adiw	r26, 0x03	; 3
     45a:	01 90       	ld	r0, Z+
     45c:	0d 92       	st	X+, r0
     45e:	2a 95       	dec	r18
     460:	e1 f7       	brne	.-8      	; 0x45a <morph_config_gpio_set_pin_value+0x50>
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	9e 85       	ldd	r25, Y+14	; 0x0e
     466:	91 30       	cpi	r25, 0x01	; 1
     468:	09 f0       	breq	.+2      	; 0x46c <morph_config_gpio_set_pin_value+0x62>
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	89 83       	std	Y+1, r24	; 0x01
     46e:	8c 81       	ldd	r24, Y+4	; 0x04
     470:	9d 81       	ldd	r25, Y+5	; 0x05
     472:	fc 01       	movw	r30, r24
     474:	80 81       	ld	r24, Z
     476:	8a 83       	std	Y+2, r24	; 0x02
     478:	8c 81       	ldd	r24, Y+4	; 0x04
     47a:	9d 81       	ldd	r25, Y+5	; 0x05
     47c:	2a 85       	ldd	r18, Y+10	; 0x0a
     47e:	42 2f       	mov	r20, r18
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	21 e0       	ldi	r18, 0x01	; 1
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	02 c0       	rjmp	.+4      	; 0x48c <morph_config_gpio_set_pin_value+0x82>
     488:	22 0f       	add	r18, r18
     48a:	33 1f       	adc	r19, r19
     48c:	4a 95       	dec	r20
     48e:	e2 f7       	brpl	.-8      	; 0x488 <morph_config_gpio_set_pin_value+0x7e>
     490:	32 2f       	mov	r19, r18
     492:	30 95       	com	r19
     494:	2a 81       	ldd	r18, Y+2	; 0x02
     496:	63 2f       	mov	r22, r19
     498:	62 23       	and	r22, r18
     49a:	29 81       	ldd	r18, Y+1	; 0x01
     49c:	22 2f       	mov	r18, r18
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	4a 85       	ldd	r20, Y+10	; 0x0a
     4a2:	44 2f       	mov	r20, r20
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <morph_config_gpio_set_pin_value+0xa2>
     4a8:	22 0f       	add	r18, r18
     4aa:	33 1f       	adc	r19, r19
     4ac:	4a 95       	dec	r20
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <morph_config_gpio_set_pin_value+0x9e>
     4b0:	26 2b       	or	r18, r22
     4b2:	fc 01       	movw	r30, r24
     4b4:	20 83       	st	Z, r18
     4b6:	01 c0       	rjmp	.+2      	; 0x4ba <morph_config_gpio_set_pin_value+0xb0>
     4b8:	00 00       	nop
     4ba:	2e 96       	adiw	r28, 0x0e	; 14
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	f8 94       	cli
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	cd bf       	out	0x3d, r28	; 61
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <morph_config_gpio_get_pin_value>:
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
     4d4:	2c 97       	sbiw	r28, 0x0c	; 12
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
     4e0:	8c 87       	std	Y+12, r24	; 0x0c
     4e2:	8c 85       	ldd	r24, Y+12	; 0x0c
     4e4:	18 16       	cp	r1, r24
     4e6:	1c f4       	brge	.+6      	; 0x4ee <morph_config_gpio_get_pin_value+0x22>
     4e8:	8c 85       	ldd	r24, Y+12	; 0x0c
     4ea:	8d 31       	cpi	r24, 0x1D	; 29
     4ec:	14 f0       	brlt	.+4      	; 0x4f2 <morph_config_gpio_get_pin_value+0x26>
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	2d c0       	rjmp	.+90     	; 0x54c <morph_config_gpio_get_pin_value+0x80>
     4f2:	8c 85       	ldd	r24, Y+12	; 0x0c
     4f4:	08 2e       	mov	r0, r24
     4f6:	00 0c       	add	r0, r0
     4f8:	99 0b       	sbc	r25, r25
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	88 0f       	add	r24, r24
     4fe:	99 1f       	adc	r25, r25
     500:	9c 01       	movw	r18, r24
     502:	22 0f       	add	r18, r18
     504:	33 1f       	adc	r19, r19
     506:	22 0f       	add	r18, r18
     508:	33 1f       	adc	r19, r19
     50a:	82 0f       	add	r24, r18
     50c:	93 1f       	adc	r25, r19
     50e:	80 50       	subi	r24, 0x00	; 0
     510:	9f 4f       	sbci	r25, 0xFF	; 255
     512:	2a e0       	ldi	r18, 0x0A	; 10
     514:	fc 01       	movw	r30, r24
     516:	de 01       	movw	r26, r28
     518:	12 96       	adiw	r26, 0x02	; 2
     51a:	01 90       	ld	r0, Z+
     51c:	0d 92       	st	X+, r0
     51e:	2a 95       	dec	r18
     520:	e1 f7       	brne	.-8      	; 0x51a <morph_config_gpio_get_pin_value+0x4e>
     522:	8d 81       	ldd	r24, Y+5	; 0x05
     524:	9e 81       	ldd	r25, Y+6	; 0x06
     526:	fc 01       	movw	r30, r24
     528:	80 81       	ld	r24, Z
     52a:	88 2f       	mov	r24, r24
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	29 85       	ldd	r18, Y+9	; 0x09
     530:	22 2f       	mov	r18, r18
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	02 c0       	rjmp	.+4      	; 0x53a <morph_config_gpio_get_pin_value+0x6e>
     536:	95 95       	asr	r25
     538:	87 95       	ror	r24
     53a:	2a 95       	dec	r18
     53c:	e2 f7       	brpl	.-8      	; 0x536 <morph_config_gpio_get_pin_value+0x6a>
     53e:	81 70       	andi	r24, 0x01	; 1
     540:	89 83       	std	Y+1, r24	; 0x01
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	99 81       	ldd	r25, Y+1	; 0x01
     546:	91 30       	cpi	r25, 0x01	; 1
     548:	09 f0       	breq	.+2      	; 0x54c <morph_config_gpio_get_pin_value+0x80>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	2c 96       	adiw	r28, 0x0c	; 12
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <morph_config_gpio_set_pin_direction>:
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	2e 97       	sbiw	r28, 0x0e	; 14
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd bf       	out	0x3d, r28	; 61
     572:	8d 87       	std	Y+13, r24	; 0x0d
     574:	6e 87       	std	Y+14, r22	; 0x0e
     576:	8d 85       	ldd	r24, Y+13	; 0x0d
     578:	18 16       	cp	r1, r24
     57a:	0c f0       	brlt	.+2      	; 0x57e <morph_config_gpio_set_pin_direction+0x20>
     57c:	47 c0       	rjmp	.+142    	; 0x60c <morph_config_gpio_set_pin_direction+0xae>
     57e:	8d 85       	ldd	r24, Y+13	; 0x0d
     580:	8d 31       	cpi	r24, 0x1D	; 29
     582:	0c f0       	brlt	.+2      	; 0x586 <morph_config_gpio_set_pin_direction+0x28>
     584:	43 c0       	rjmp	.+134    	; 0x60c <morph_config_gpio_set_pin_direction+0xae>
     586:	8d 85       	ldd	r24, Y+13	; 0x0d
     588:	08 2e       	mov	r0, r24
     58a:	00 0c       	add	r0, r0
     58c:	99 0b       	sbc	r25, r25
     58e:	01 97       	sbiw	r24, 0x01	; 1
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	9c 01       	movw	r18, r24
     596:	22 0f       	add	r18, r18
     598:	33 1f       	adc	r19, r19
     59a:	22 0f       	add	r18, r18
     59c:	33 1f       	adc	r19, r19
     59e:	82 0f       	add	r24, r18
     5a0:	93 1f       	adc	r25, r19
     5a2:	80 50       	subi	r24, 0x00	; 0
     5a4:	9f 4f       	sbci	r25, 0xFF	; 255
     5a6:	2a e0       	ldi	r18, 0x0A	; 10
     5a8:	fc 01       	movw	r30, r24
     5aa:	de 01       	movw	r26, r28
     5ac:	13 96       	adiw	r26, 0x03	; 3
     5ae:	01 90       	ld	r0, Z+
     5b0:	0d 92       	st	X+, r0
     5b2:	2a 95       	dec	r18
     5b4:	e1 f7       	brne	.-8      	; 0x5ae <morph_config_gpio_set_pin_direction+0x50>
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	9e 85       	ldd	r25, Y+14	; 0x0e
     5ba:	91 30       	cpi	r25, 0x01	; 1
     5bc:	09 f0       	breq	.+2      	; 0x5c0 <morph_config_gpio_set_pin_direction+0x62>
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	89 83       	std	Y+1, r24	; 0x01
     5c2:	88 85       	ldd	r24, Y+8	; 0x08
     5c4:	99 85       	ldd	r25, Y+9	; 0x09
     5c6:	fc 01       	movw	r30, r24
     5c8:	80 81       	ld	r24, Z
     5ca:	8a 83       	std	Y+2, r24	; 0x02
     5cc:	88 85       	ldd	r24, Y+8	; 0x08
     5ce:	99 85       	ldd	r25, Y+9	; 0x09
     5d0:	2a 85       	ldd	r18, Y+10	; 0x0a
     5d2:	42 2f       	mov	r20, r18
     5d4:	50 e0       	ldi	r21, 0x00	; 0
     5d6:	21 e0       	ldi	r18, 0x01	; 1
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <morph_config_gpio_set_pin_direction+0x82>
     5dc:	22 0f       	add	r18, r18
     5de:	33 1f       	adc	r19, r19
     5e0:	4a 95       	dec	r20
     5e2:	e2 f7       	brpl	.-8      	; 0x5dc <morph_config_gpio_set_pin_direction+0x7e>
     5e4:	32 2f       	mov	r19, r18
     5e6:	30 95       	com	r19
     5e8:	2a 81       	ldd	r18, Y+2	; 0x02
     5ea:	63 2f       	mov	r22, r19
     5ec:	62 23       	and	r22, r18
     5ee:	29 81       	ldd	r18, Y+1	; 0x01
     5f0:	22 2f       	mov	r18, r18
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	4a 85       	ldd	r20, Y+10	; 0x0a
     5f6:	44 2f       	mov	r20, r20
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <morph_config_gpio_set_pin_direction+0xa2>
     5fc:	22 0f       	add	r18, r18
     5fe:	33 1f       	adc	r19, r19
     600:	4a 95       	dec	r20
     602:	e2 f7       	brpl	.-8      	; 0x5fc <morph_config_gpio_set_pin_direction+0x9e>
     604:	26 2b       	or	r18, r22
     606:	fc 01       	movw	r30, r24
     608:	20 83       	st	Z, r18
     60a:	01 c0       	rjmp	.+2      	; 0x60e <morph_config_gpio_set_pin_direction+0xb0>
     60c:	00 00       	nop
     60e:	2e 96       	adiw	r28, 0x0e	; 14
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	08 95       	ret

00000620 <morph_config_gpio_get_pin_direction>:
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	cd b7       	in	r28, 0x3d	; 61
     626:	de b7       	in	r29, 0x3e	; 62
     628:	2c 97       	sbiw	r28, 0x0c	; 12
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	de bf       	out	0x3e, r29	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	cd bf       	out	0x3d, r28	; 61
     634:	8c 87       	std	Y+12, r24	; 0x0c
     636:	8c 85       	ldd	r24, Y+12	; 0x0c
     638:	18 16       	cp	r1, r24
     63a:	8c f5       	brge	.+98     	; 0x69e <morph_config_gpio_get_pin_direction+0x7e>
     63c:	8c 85       	ldd	r24, Y+12	; 0x0c
     63e:	8d 31       	cpi	r24, 0x1D	; 29
     640:	74 f5       	brge	.+92     	; 0x69e <morph_config_gpio_get_pin_direction+0x7e>
     642:	8c 85       	ldd	r24, Y+12	; 0x0c
     644:	08 2e       	mov	r0, r24
     646:	00 0c       	add	r0, r0
     648:	99 0b       	sbc	r25, r25
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	9c 01       	movw	r18, r24
     652:	22 0f       	add	r18, r18
     654:	33 1f       	adc	r19, r19
     656:	22 0f       	add	r18, r18
     658:	33 1f       	adc	r19, r19
     65a:	82 0f       	add	r24, r18
     65c:	93 1f       	adc	r25, r19
     65e:	80 50       	subi	r24, 0x00	; 0
     660:	9f 4f       	sbci	r25, 0xFF	; 255
     662:	2a e0       	ldi	r18, 0x0A	; 10
     664:	fc 01       	movw	r30, r24
     666:	de 01       	movw	r26, r28
     668:	12 96       	adiw	r26, 0x02	; 2
     66a:	01 90       	ld	r0, Z+
     66c:	0d 92       	st	X+, r0
     66e:	2a 95       	dec	r18
     670:	e1 f7       	brne	.-8      	; 0x66a <morph_config_gpio_get_pin_direction+0x4a>
     672:	8f 81       	ldd	r24, Y+7	; 0x07
     674:	98 85       	ldd	r25, Y+8	; 0x08
     676:	fc 01       	movw	r30, r24
     678:	80 81       	ld	r24, Z
     67a:	88 2f       	mov	r24, r24
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	29 85       	ldd	r18, Y+9	; 0x09
     680:	22 2f       	mov	r18, r18
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	02 c0       	rjmp	.+4      	; 0x68a <morph_config_gpio_get_pin_direction+0x6a>
     686:	95 95       	asr	r25
     688:	87 95       	ror	r24
     68a:	2a 95       	dec	r18
     68c:	e2 f7       	brpl	.-8      	; 0x686 <morph_config_gpio_get_pin_direction+0x66>
     68e:	81 70       	andi	r24, 0x01	; 1
     690:	89 83       	std	Y+1, r24	; 0x01
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	99 81       	ldd	r25, Y+1	; 0x01
     696:	91 30       	cpi	r25, 0x01	; 1
     698:	21 f0       	breq	.+8      	; 0x6a2 <morph_config_gpio_get_pin_direction+0x82>
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	02 c0       	rjmp	.+4      	; 0x6a2 <morph_config_gpio_get_pin_direction+0x82>
     69e:	00 00       	nop
     6a0:	00 00       	nop
     6a2:	2c 96       	adiw	r28, 0x0c	; 12
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	08 95       	ret

000006b4 <morph_config_gpio_set_pin_pull_state>:
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	cd b7       	in	r28, 0x3d	; 61
     6ba:	de b7       	in	r29, 0x3e	; 62
     6bc:	2f 97       	sbiw	r28, 0x0f	; 15
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61
     6c8:	8e 87       	std	Y+14, r24	; 0x0e
     6ca:	6f 87       	std	Y+15, r22	; 0x0f
     6cc:	8e 85       	ldd	r24, Y+14	; 0x0e
     6ce:	18 16       	cp	r1, r24
     6d0:	0c f0       	brlt	.+2      	; 0x6d4 <morph_config_gpio_set_pin_pull_state+0x20>
     6d2:	60 c0       	rjmp	.+192    	; 0x794 <morph_config_gpio_set_pin_pull_state+0xe0>
     6d4:	8e 85       	ldd	r24, Y+14	; 0x0e
     6d6:	8d 31       	cpi	r24, 0x1D	; 29
     6d8:	0c f0       	brlt	.+2      	; 0x6dc <morph_config_gpio_set_pin_pull_state+0x28>
     6da:	5c c0       	rjmp	.+184    	; 0x794 <morph_config_gpio_set_pin_pull_state+0xe0>
     6dc:	8e 85       	ldd	r24, Y+14	; 0x0e
     6de:	08 2e       	mov	r0, r24
     6e0:	00 0c       	add	r0, r0
     6e2:	99 0b       	sbc	r25, r25
     6e4:	01 97       	sbiw	r24, 0x01	; 1
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	9c 01       	movw	r18, r24
     6ec:	22 0f       	add	r18, r18
     6ee:	33 1f       	adc	r19, r19
     6f0:	22 0f       	add	r18, r18
     6f2:	33 1f       	adc	r19, r19
     6f4:	82 0f       	add	r24, r18
     6f6:	93 1f       	adc	r25, r19
     6f8:	80 50       	subi	r24, 0x00	; 0
     6fa:	9f 4f       	sbci	r25, 0xFF	; 255
     6fc:	2a e0       	ldi	r18, 0x0A	; 10
     6fe:	fc 01       	movw	r30, r24
     700:	de 01       	movw	r26, r28
     702:	14 96       	adiw	r26, 0x04	; 4
     704:	01 90       	ld	r0, Z+
     706:	0d 92       	st	X+, r0
     708:	2a 95       	dec	r18
     70a:	e1 f7       	brne	.-8      	; 0x704 <morph_config_gpio_set_pin_pull_state+0x50>
     70c:	89 85       	ldd	r24, Y+9	; 0x09
     70e:	9a 85       	ldd	r25, Y+10	; 0x0a
     710:	fc 01       	movw	r30, r24
     712:	80 81       	ld	r24, Z
     714:	88 2f       	mov	r24, r24
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	2b 85       	ldd	r18, Y+11	; 0x0b
     71a:	22 2f       	mov	r18, r18
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	02 c0       	rjmp	.+4      	; 0x724 <morph_config_gpio_set_pin_pull_state+0x70>
     720:	95 95       	asr	r25
     722:	87 95       	ror	r24
     724:	2a 95       	dec	r18
     726:	e2 f7       	brpl	.-8      	; 0x720 <morph_config_gpio_set_pin_pull_state+0x6c>
     728:	81 70       	andi	r24, 0x01	; 1
     72a:	89 83       	std	Y+1, r24	; 0x01
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	88 23       	and	r24, r24
     730:	91 f5       	brne	.+100    	; 0x796 <morph_config_gpio_set_pin_pull_state+0xe2>
     732:	8f 85       	ldd	r24, Y+15	; 0x0f
     734:	81 30       	cpi	r24, 0x01	; 1
     736:	19 f0       	breq	.+6      	; 0x73e <morph_config_gpio_set_pin_pull_state+0x8a>
     738:	8f 85       	ldd	r24, Y+15	; 0x0f
     73a:	88 23       	and	r24, r24
     73c:	61 f5       	brne	.+88     	; 0x796 <morph_config_gpio_set_pin_pull_state+0xe2>
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	9f 85       	ldd	r25, Y+15	; 0x0f
     742:	91 30       	cpi	r25, 0x01	; 1
     744:	09 f0       	breq	.+2      	; 0x748 <morph_config_gpio_set_pin_pull_state+0x94>
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	8a 83       	std	Y+2, r24	; 0x02
     74a:	8d 81       	ldd	r24, Y+5	; 0x05
     74c:	9e 81       	ldd	r25, Y+6	; 0x06
     74e:	fc 01       	movw	r30, r24
     750:	80 81       	ld	r24, Z
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	8d 81       	ldd	r24, Y+5	; 0x05
     756:	9e 81       	ldd	r25, Y+6	; 0x06
     758:	2b 85       	ldd	r18, Y+11	; 0x0b
     75a:	42 2f       	mov	r20, r18
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	21 e0       	ldi	r18, 0x01	; 1
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	02 c0       	rjmp	.+4      	; 0x768 <morph_config_gpio_set_pin_pull_state+0xb4>
     764:	22 0f       	add	r18, r18
     766:	33 1f       	adc	r19, r19
     768:	4a 95       	dec	r20
     76a:	e2 f7       	brpl	.-8      	; 0x764 <morph_config_gpio_set_pin_pull_state+0xb0>
     76c:	32 2f       	mov	r19, r18
     76e:	30 95       	com	r19
     770:	2b 81       	ldd	r18, Y+3	; 0x03
     772:	63 2f       	mov	r22, r19
     774:	62 23       	and	r22, r18
     776:	2a 81       	ldd	r18, Y+2	; 0x02
     778:	22 2f       	mov	r18, r18
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	4b 85       	ldd	r20, Y+11	; 0x0b
     77e:	44 2f       	mov	r20, r20
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	02 c0       	rjmp	.+4      	; 0x788 <morph_config_gpio_set_pin_pull_state+0xd4>
     784:	22 0f       	add	r18, r18
     786:	33 1f       	adc	r19, r19
     788:	4a 95       	dec	r20
     78a:	e2 f7       	brpl	.-8      	; 0x784 <morph_config_gpio_set_pin_pull_state+0xd0>
     78c:	26 2b       	or	r18, r22
     78e:	fc 01       	movw	r30, r24
     790:	20 83       	st	Z, r18
     792:	01 c0       	rjmp	.+2      	; 0x796 <morph_config_gpio_set_pin_pull_state+0xe2>
     794:	00 00       	nop
     796:	2f 96       	adiw	r28, 0x0f	; 15
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <morph_config_gpio_get_pin_pull_state>:
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	1f 92       	push	r1
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	89 83       	std	Y+1, r24	; 0x01
     7b4:	00 00       	nop
     7b6:	0f 90       	pop	r0
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <morph_config_uart_setup_channel>:
     7be:	ef 92       	push	r14
     7c0:	0f 93       	push	r16
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	28 97       	sbiw	r28, 0x08	; 8
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	cd bf       	out	0x3d, r28	; 61
     7d6:	89 83       	std	Y+1, r24	; 0x01
     7d8:	4a 83       	std	Y+2, r20	; 0x02
     7da:	5b 83       	std	Y+3, r21	; 0x03
     7dc:	6c 83       	std	Y+4, r22	; 0x04
     7de:	7d 83       	std	Y+5, r23	; 0x05
     7e0:	2e 83       	std	Y+6, r18	; 0x06
     7e2:	0f 83       	std	Y+7, r16	; 0x07
     7e4:	e8 86       	std	Y+8, r14	; 0x08
     7e6:	00 00       	nop
     7e8:	28 96       	adiw	r28, 0x08	; 8
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	0f 91       	pop	r16
     7fa:	ef 90       	pop	r14
     7fc:	08 95       	ret

000007fe <morph_config_uart_send_data>:
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	00 d0       	rcall	.+0      	; 0x804 <morph_config_uart_send_data+0x6>
     804:	1f 92       	push	r1
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	89 83       	std	Y+1, r24	; 0x01
     80c:	7b 83       	std	Y+3, r23	; 0x03
     80e:	6a 83       	std	Y+2, r22	; 0x02
     810:	00 00       	nop
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <morph_config_uart_read_data>:
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	1f 92       	push	r1
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	89 83       	std	Y+1, r24	; 0x01
     82a:	00 00       	nop
     82c:	0f 90       	pop	r0
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <morph_config_uart_send_byte>:
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	00 d0       	rcall	.+0      	; 0x83a <morph_config_uart_send_byte+0x6>
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	89 83       	std	Y+1, r24	; 0x01
     840:	6a 83       	std	Y+2, r22	; 0x02
     842:	00 00       	nop
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	08 95       	ret

0000084e <morph_config_uart_read_byte>:
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	1f 92       	push	r1
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	89 83       	std	Y+1, r24	; 0x01
     85a:	00 00       	nop
     85c:	0f 90       	pop	r0
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <morph_config_uart_write_data_buffer>:
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	00 d0       	rcall	.+0      	; 0x86a <morph_config_uart_write_data_buffer+0x6>
     86a:	00 d0       	rcall	.+0      	; 0x86c <morph_config_uart_write_data_buffer+0x8>
     86c:	1f 92       	push	r1
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
     872:	89 83       	std	Y+1, r24	; 0x01
     874:	7b 83       	std	Y+3, r23	; 0x03
     876:	6a 83       	std	Y+2, r22	; 0x02
     878:	5d 83       	std	Y+5, r21	; 0x05
     87a:	4c 83       	std	Y+4, r20	; 0x04
     87c:	00 00       	nop
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <morph_config_uart_write_byte_buffer>:
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	00 d0       	rcall	.+0      	; 0x894 <morph_config_uart_write_byte_buffer+0x6>
     894:	00 d0       	rcall	.+0      	; 0x896 <morph_config_uart_write_byte_buffer+0x8>
     896:	1f 92       	push	r1
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	89 83       	std	Y+1, r24	; 0x01
     89e:	7b 83       	std	Y+3, r23	; 0x03
     8a0:	6a 83       	std	Y+2, r22	; 0x02
     8a2:	5d 83       	std	Y+5, r21	; 0x05
     8a4:	4c 83       	std	Y+4, r20	; 0x04
     8a6:	00 00       	nop
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <morph_config_uart_read_data_buffer>:
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	29 97       	sbiw	r28, 0x09	; 9
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	89 83       	std	Y+1, r24	; 0x01
     8d2:	7b 83       	std	Y+3, r23	; 0x03
     8d4:	6a 83       	std	Y+2, r22	; 0x02
     8d6:	5d 83       	std	Y+5, r21	; 0x05
     8d8:	4c 83       	std	Y+4, r20	; 0x04
     8da:	0e 83       	std	Y+6, r16	; 0x06
     8dc:	1f 83       	std	Y+7, r17	; 0x07
     8de:	28 87       	std	Y+8, r18	; 0x08
     8e0:	39 87       	std	Y+9, r19	; 0x09
     8e2:	00 00       	nop
     8e4:	29 96       	adiw	r28, 0x09	; 9
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	f8 94       	cli
     8ea:	de bf       	out	0x3e, r29	; 62
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	cd bf       	out	0x3d, r28	; 61
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	08 95       	ret

000008fa <morph_config_uart_read_byte_buffer>:
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
     906:	29 97       	sbiw	r28, 0x09	; 9
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	cd bf       	out	0x3d, r28	; 61
     912:	89 83       	std	Y+1, r24	; 0x01
     914:	7b 83       	std	Y+3, r23	; 0x03
     916:	6a 83       	std	Y+2, r22	; 0x02
     918:	5d 83       	std	Y+5, r21	; 0x05
     91a:	4c 83       	std	Y+4, r20	; 0x04
     91c:	0e 83       	std	Y+6, r16	; 0x06
     91e:	1f 83       	std	Y+7, r17	; 0x07
     920:	28 87       	std	Y+8, r18	; 0x08
     922:	39 87       	std	Y+9, r19	; 0x09
     924:	00 00       	nop
     926:	29 96       	adiw	r28, 0x09	; 9
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	de bf       	out	0x3e, r29	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	cd bf       	out	0x3d, r28	; 61
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	08 95       	ret

0000093c <morph_config_uart_data_ready>:
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	1f 92       	push	r1
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
     946:	89 83       	std	Y+1, r24	; 0x01
     948:	00 00       	nop
     94a:	0f 90       	pop	r0
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <morph_config_uart_set_tx_pin>:
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	00 d0       	rcall	.+0      	; 0x958 <morph_config_uart_set_tx_pin+0x6>
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
     95c:	89 83       	std	Y+1, r24	; 0x01
     95e:	6a 83       	std	Y+2, r22	; 0x02
     960:	00 00       	nop
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	08 95       	ret

0000096c <morph_config_uart_set_rx_pin>:
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	00 d0       	rcall	.+0      	; 0x972 <morph_config_uart_set_rx_pin+0x6>
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	89 83       	std	Y+1, r24	; 0x01
     978:	6a 83       	std	Y+2, r22	; 0x02
     97a:	00 00       	nop
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	08 95       	ret

00000986 <timer_update_millis>:
     986:	af 92       	push	r10
     988:	bf 92       	push	r11
     98a:	cf 92       	push	r12
     98c:	df 92       	push	r13
     98e:	ef 92       	push	r14
     990:	ff 92       	push	r15
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	a0 90 a1 02 	lds	r10, 0x02A1	; 0x8002a1 <millis_ticks>
     9a2:	b0 90 a2 02 	lds	r11, 0x02A2	; 0x8002a2 <millis_ticks+0x1>
     9a6:	c0 90 a3 02 	lds	r12, 0x02A3	; 0x8002a3 <millis_ticks+0x2>
     9aa:	d0 90 a4 02 	lds	r13, 0x02A4	; 0x8002a4 <millis_ticks+0x3>
     9ae:	e0 90 a5 02 	lds	r14, 0x02A5	; 0x8002a5 <millis_ticks+0x4>
     9b2:	f0 90 a6 02 	lds	r15, 0x02A6	; 0x8002a6 <millis_ticks+0x5>
     9b6:	00 91 a7 02 	lds	r16, 0x02A7	; 0x8002a7 <millis_ticks+0x6>
     9ba:	10 91 a8 02 	lds	r17, 0x02A8	; 0x8002a8 <millis_ticks+0x7>
     9be:	2a 2d       	mov	r18, r10
     9c0:	3b 2d       	mov	r19, r11
     9c2:	4c 2d       	mov	r20, r12
     9c4:	5d 2d       	mov	r21, r13
     9c6:	6e 2d       	mov	r22, r14
     9c8:	7f 2d       	mov	r23, r15
     9ca:	80 2f       	mov	r24, r16
     9cc:	91 2f       	mov	r25, r17
     9ce:	a1 e0       	ldi	r26, 0x01	; 1
     9d0:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__adddi3_s8>
     9d4:	a2 2e       	mov	r10, r18
     9d6:	b3 2e       	mov	r11, r19
     9d8:	c4 2e       	mov	r12, r20
     9da:	d5 2e       	mov	r13, r21
     9dc:	e6 2e       	mov	r14, r22
     9de:	f7 2e       	mov	r15, r23
     9e0:	08 2f       	mov	r16, r24
     9e2:	19 2f       	mov	r17, r25
     9e4:	a0 92 a1 02 	sts	0x02A1, r10	; 0x8002a1 <millis_ticks>
     9e8:	b0 92 a2 02 	sts	0x02A2, r11	; 0x8002a2 <millis_ticks+0x1>
     9ec:	c0 92 a3 02 	sts	0x02A3, r12	; 0x8002a3 <millis_ticks+0x2>
     9f0:	d0 92 a4 02 	sts	0x02A4, r13	; 0x8002a4 <millis_ticks+0x3>
     9f4:	e0 92 a5 02 	sts	0x02A5, r14	; 0x8002a5 <millis_ticks+0x4>
     9f8:	f0 92 a6 02 	sts	0x02A6, r15	; 0x8002a6 <millis_ticks+0x5>
     9fc:	00 93 a7 02 	sts	0x02A7, r16	; 0x8002a7 <millis_ticks+0x6>
     a00:	10 93 a8 02 	sts	0x02A8, r17	; 0x8002a8 <millis_ticks+0x7>
     a04:	00 00       	nop
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	ff 90       	pop	r15
     a10:	ef 90       	pop	r14
     a12:	df 90       	pop	r13
     a14:	cf 90       	pop	r12
     a16:	bf 90       	pop	r11
     a18:	af 90       	pop	r10
     a1a:	08 95       	ret

00000a1c <morph_config_time_init>:
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	00 d0       	rcall	.+0      	; 0xa2a <morph_config_time_init+0xe>
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	6a 83       	std	Y+2, r22	; 0x02
     a32:	8a 81       	ldd	r24, Y+2	; 0x02
     a34:	28 2f       	mov	r18, r24
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	89 81       	ldd	r24, Y+1	; 0x01
     a3a:	88 2f       	mov	r24, r24
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	b9 01       	movw	r22, r18
     a40:	0e 94 52 09 	call	0x12a4	; 0x12a4 <morph_config_timer_acquire_timer>
     a44:	8a 81       	ldd	r24, Y+2	; 0x02
     a46:	68 2f       	mov	r22, r24
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	89 81       	ldd	r24, Y+1	; 0x01
     a4c:	88 2f       	mov	r24, r24
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0f 2e       	mov	r0, r31
     a52:	f8 ee       	ldi	r31, 0xE8	; 232
     a54:	ef 2e       	mov	r14, r31
     a56:	f0 2d       	mov	r31, r0
     a58:	0f 2e       	mov	r0, r31
     a5a:	f3 e0       	ldi	r31, 0x03	; 3
     a5c:	ff 2e       	mov	r15, r31
     a5e:	f0 2d       	mov	r31, r0
     a60:	00 e0       	ldi	r16, 0x00	; 0
     a62:	10 e0       	ldi	r17, 0x00	; 0
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	0e 94 97 09 	call	0x132e	; 0x132e <morph_config_timer_set_rate>
     a70:	8a 81       	ldd	r24, Y+2	; 0x02
     a72:	28 2f       	mov	r18, r24
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	89 81       	ldd	r24, Y+1	; 0x01
     a78:	88 2f       	mov	r24, r24
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	43 ec       	ldi	r20, 0xC3	; 195
     a7e:	54 e0       	ldi	r21, 0x04	; 4
     a80:	b9 01       	movw	r22, r18
     a82:	0e 94 df 09 	call	0x13be	; 0x13be <morph_config_timer_set_timer_callback>
     a86:	00 00       	nop
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	08 95       	ret

00000a9a <morph_config_time_init_rtc>:
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	00 00       	nop
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <morph_config_time_millis>:
     aaa:	af 92       	push	r10
     aac:	bf 92       	push	r11
     aae:	cf 92       	push	r12
     ab0:	df 92       	push	r13
     ab2:	ef 92       	push	r14
     ab4:	ff 92       	push	r15
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
     ac2:	20 91 a1 02 	lds	r18, 0x02A1	; 0x8002a1 <millis_ticks>
     ac6:	30 91 a2 02 	lds	r19, 0x02A2	; 0x8002a2 <millis_ticks+0x1>
     aca:	40 91 a3 02 	lds	r20, 0x02A3	; 0x8002a3 <millis_ticks+0x2>
     ace:	50 91 a4 02 	lds	r21, 0x02A4	; 0x8002a4 <millis_ticks+0x3>
     ad2:	60 91 a5 02 	lds	r22, 0x02A5	; 0x8002a5 <millis_ticks+0x4>
     ad6:	70 91 a6 02 	lds	r23, 0x02A6	; 0x8002a6 <millis_ticks+0x5>
     ada:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <millis_ticks+0x6>
     ade:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <millis_ticks+0x7>
     ae2:	a2 2e       	mov	r10, r18
     ae4:	b3 2e       	mov	r11, r19
     ae6:	c4 2e       	mov	r12, r20
     ae8:	d5 2e       	mov	r13, r21
     aea:	e6 2e       	mov	r14, r22
     aec:	f7 2e       	mov	r15, r23
     aee:	08 2f       	mov	r16, r24
     af0:	19 2f       	mov	r17, r25
     af2:	2a 2d       	mov	r18, r10
     af4:	3b 2d       	mov	r19, r11
     af6:	4c 2d       	mov	r20, r12
     af8:	5d 2d       	mov	r21, r13
     afa:	6e 2d       	mov	r22, r14
     afc:	7f 2d       	mov	r23, r15
     afe:	80 2f       	mov	r24, r16
     b00:	91 2f       	mov	r25, r17
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	ff 90       	pop	r15
     b0c:	ef 90       	pop	r14
     b0e:	df 90       	pop	r13
     b10:	cf 90       	pop	r12
     b12:	bf 90       	pop	r11
     b14:	af 90       	pop	r10
     b16:	08 95       	ret

00000b18 <__vector_14>:
     b18:	1f 92       	push	r1
     b1a:	0f 92       	push	r0
     b1c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b20:	0f 92       	push	r0
     b22:	11 24       	eor	r1, r1
     b24:	2f 93       	push	r18
     b26:	3f 93       	push	r19
     b28:	4f 93       	push	r20
     b2a:	5f 93       	push	r21
     b2c:	6f 93       	push	r22
     b2e:	7f 93       	push	r23
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	af 93       	push	r26
     b36:	bf 93       	push	r27
     b38:	ef 93       	push	r30
     b3a:	ff 93       	push	r31
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <timer_configs_8_bit+0xc>
     b48:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <timer_configs_8_bit+0xd>
     b4c:	fc 01       	movw	r30, r24
     b4e:	09 95       	icall
     b50:	00 00       	nop
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	ff 91       	pop	r31
     b58:	ef 91       	pop	r30
     b5a:	bf 91       	pop	r27
     b5c:	af 91       	pop	r26
     b5e:	9f 91       	pop	r25
     b60:	8f 91       	pop	r24
     b62:	7f 91       	pop	r23
     b64:	6f 91       	pop	r22
     b66:	5f 91       	pop	r21
     b68:	4f 91       	pop	r20
     b6a:	3f 91       	pop	r19
     b6c:	2f 91       	pop	r18
     b6e:	0f 90       	pop	r0
     b70:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b74:	0f 90       	pop	r0
     b76:	1f 90       	pop	r1
     b78:	18 95       	reti

00000b7a <__vector_11>:
     b7a:	1f 92       	push	r1
     b7c:	0f 92       	push	r0
     b7e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b82:	0f 92       	push	r0
     b84:	11 24       	eor	r1, r1
     b86:	2f 93       	push	r18
     b88:	3f 93       	push	r19
     b8a:	4f 93       	push	r20
     b8c:	5f 93       	push	r21
     b8e:	6f 93       	push	r22
     b90:	7f 93       	push	r23
     b92:	8f 93       	push	r24
     b94:	9f 93       	push	r25
     b96:	af 93       	push	r26
     b98:	bf 93       	push	r27
     b9a:	ef 93       	push	r30
     b9c:	ff 93       	push	r31
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <timer_configs_16_bit+0x12>
     baa:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <timer_configs_16_bit+0x13>
     bae:	fc 01       	movw	r30, r24
     bb0:	09 95       	icall
     bb2:	00 00       	nop
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	ff 91       	pop	r31
     bba:	ef 91       	pop	r30
     bbc:	bf 91       	pop	r27
     bbe:	af 91       	pop	r26
     bc0:	9f 91       	pop	r25
     bc2:	8f 91       	pop	r24
     bc4:	7f 91       	pop	r23
     bc6:	6f 91       	pop	r22
     bc8:	5f 91       	pop	r21
     bca:	4f 91       	pop	r20
     bcc:	3f 91       	pop	r19
     bce:	2f 91       	pop	r18
     bd0:	0f 90       	pop	r0
     bd2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bd6:	0f 90       	pop	r0
     bd8:	1f 90       	pop	r1
     bda:	18 95       	reti

00000bdc <__vector_7>:
     bdc:	1f 92       	push	r1
     bde:	0f 92       	push	r0
     be0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     be4:	0f 92       	push	r0
     be6:	11 24       	eor	r1, r1
     be8:	2f 93       	push	r18
     bea:	3f 93       	push	r19
     bec:	4f 93       	push	r20
     bee:	5f 93       	push	r21
     bf0:	6f 93       	push	r22
     bf2:	7f 93       	push	r23
     bf4:	8f 93       	push	r24
     bf6:	9f 93       	push	r25
     bf8:	af 93       	push	r26
     bfa:	bf 93       	push	r27
     bfc:	ef 93       	push	r30
     bfe:	ff 93       	push	r31
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <timer_configs_8_bit+0x1a>
     c0c:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <timer_configs_8_bit+0x1b>
     c10:	fc 01       	movw	r30, r24
     c12:	09 95       	icall
     c14:	00 00       	nop
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	bf 91       	pop	r27
     c20:	af 91       	pop	r26
     c22:	9f 91       	pop	r25
     c24:	8f 91       	pop	r24
     c26:	7f 91       	pop	r23
     c28:	6f 91       	pop	r22
     c2a:	5f 91       	pop	r21
     c2c:	4f 91       	pop	r20
     c2e:	3f 91       	pop	r19
     c30:	2f 91       	pop	r18
     c32:	0f 90       	pop	r0
     c34:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c38:	0f 90       	pop	r0
     c3a:	1f 90       	pop	r1
     c3c:	18 95       	reti

00000c3e <set_rate_8_bit>:
     c3e:	6f 92       	push	r6
     c40:	7f 92       	push	r7
     c42:	8f 92       	push	r8
     c44:	9f 92       	push	r9
     c46:	af 92       	push	r10
     c48:	bf 92       	push	r11
     c4a:	cf 92       	push	r12
     c4c:	df 92       	push	r13
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	c7 55       	subi	r28, 0x57	; 87
     c60:	d1 09       	sbc	r29, r1
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	fe 01       	movw	r30, r28
     c6e:	e1 5b       	subi	r30, 0xB1	; 177
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	80 83       	st	Z, r24
     c74:	ce 01       	movw	r24, r28
     c76:	80 5b       	subi	r24, 0xB0	; 176
     c78:	9f 4f       	sbci	r25, 0xFF	; 255
     c7a:	fc 01       	movw	r30, r24
     c7c:	00 83       	st	Z, r16
     c7e:	fc 01       	movw	r30, r24
     c80:	11 83       	std	Z+1, r17	; 0x01
     c82:	fc 01       	movw	r30, r24
     c84:	22 83       	std	Z+2, r18	; 0x02
     c86:	fc 01       	movw	r30, r24
     c88:	33 83       	std	Z+3, r19	; 0x03
     c8a:	fc 01       	movw	r30, r24
     c8c:	44 83       	std	Z+4, r20	; 0x04
     c8e:	fc 01       	movw	r30, r24
     c90:	55 83       	std	Z+5, r21	; 0x05
     c92:	fc 01       	movw	r30, r24
     c94:	66 83       	std	Z+6, r22	; 0x06
     c96:	fc 01       	movw	r30, r24
     c98:	77 83       	std	Z+7, r23	; 0x07
     c9a:	ce 01       	movw	r24, r28
     c9c:	81 5b       	subi	r24, 0xB1	; 177
     c9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ca0:	fc 01       	movw	r30, r24
     ca2:	80 81       	ld	r24, Z
     ca4:	82 30       	cpi	r24, 0x02	; 2
     ca6:	08 f0       	brcs	.+2      	; 0xcaa <set_rate_8_bit+0x6c>
     ca8:	e6 c2       	rjmp	.+1484   	; 0x1276 <set_rate_8_bit+0x638>
     caa:	ce 01       	movw	r24, r28
     cac:	81 5b       	subi	r24, 0xB1	; 177
     cae:	9f 4f       	sbci	r25, 0xFF	; 255
     cb0:	fc 01       	movw	r30, r24
     cb2:	80 81       	ld	r24, Z
     cb4:	88 2f       	mov	r24, r24
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	9c 01       	movw	r18, r24
     cba:	c9 01       	movw	r24, r18
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	9c 01       	movw	r18, r24
     cc2:	c9 01       	movw	r24, r18
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	82 1b       	sub	r24, r18
     cd2:	93 0b       	sbc	r25, r19
     cd4:	88 5e       	subi	r24, 0xE8	; 232
     cd6:	9d 4f       	sbci	r25, 0xFD	; 253
     cd8:	21 e0       	ldi	r18, 0x01	; 1
     cda:	fc 01       	movw	r30, r24
     cdc:	20 83       	st	Z, r18
     cde:	28 e2       	ldi	r18, 0x28	; 40
     ce0:	ce 01       	movw	r24, r28
     ce2:	43 96       	adiw	r24, 0x13	; 19
     ce4:	fc 01       	movw	r30, r24
     ce6:	32 2f       	mov	r19, r18
     ce8:	11 92       	st	Z+, r1
     cea:	3a 95       	dec	r19
     cec:	e9 f7       	brne	.-6      	; 0xce8 <set_rate_8_bit+0xaa>
     cee:	24 e1       	ldi	r18, 0x14	; 20
     cf0:	ce 01       	movw	r24, r28
     cf2:	cb 96       	adiw	r24, 0x3b	; 59
     cf4:	fc 01       	movw	r30, r24
     cf6:	32 2f       	mov	r19, r18
     cf8:	11 92       	st	Z+, r1
     cfa:	3a 95       	dec	r19
     cfc:	e9 f7       	brne	.-6      	; 0xcf8 <set_rate_8_bit+0xba>
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	9f ef       	ldi	r25, 0xFF	; 255
     d02:	af e7       	ldi	r26, 0x7F	; 127
     d04:	bf e7       	ldi	r27, 0x7F	; 127
     d06:	8b af       	std	Y+59, r24	; 0x3b
     d08:	9c af       	std	Y+60, r25	; 0x3c
     d0a:	ad af       	std	Y+61, r26	; 0x3d
     d0c:	be af       	std	Y+62, r27	; 0x3e
     d0e:	19 82       	std	Y+1, r1	; 0x01
     d10:	14 c1       	rjmp	.+552    	; 0xf3a <set_rate_8_bit+0x2fc>
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	88 2e       	mov	r8, r24
     d16:	91 2c       	mov	r9, r1
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	88 2f       	mov	r24, r24
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	88 5b       	subi	r24, 0xB8	; 184
     d24:	9d 4f       	sbci	r25, 0xFD	; 253
     d26:	fc 01       	movw	r30, r24
     d28:	80 81       	ld	r24, Z
     d2a:	91 81       	ldd	r25, Z+1	; 0x01
     d2c:	cc 01       	movw	r24, r24
     d2e:	a0 e0       	ldi	r26, 0x00	; 0
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	bc 01       	movw	r22, r24
     d34:	cd 01       	movw	r24, r26
     d36:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__floatunsisf>
     d3a:	6b 01       	movw	r12, r22
     d3c:	7c 01       	movw	r14, r24
     d3e:	fe 01       	movw	r30, r28
     d40:	e0 5b       	subi	r30, 0xB0	; 176
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	20 81       	ld	r18, Z
     d46:	31 81       	ldd	r19, Z+1	; 0x01
     d48:	42 81       	ldd	r20, Z+2	; 0x02
     d4a:	53 81       	ldd	r21, Z+3	; 0x03
     d4c:	64 81       	ldd	r22, Z+4	; 0x04
     d4e:	75 81       	ldd	r23, Z+5	; 0x05
     d50:	86 81       	ldd	r24, Z+6	; 0x06
     d52:	97 81       	ldd	r25, Z+7	; 0x07
     d54:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatundisf>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	9c 01       	movw	r18, r24
     d5e:	ad 01       	movw	r20, r26
     d60:	c7 01       	movw	r24, r14
     d62:	b6 01       	movw	r22, r12
     d64:	0e 94 a6 10 	call	0x214c	; 0x214c <__mulsf3>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	9c 01       	movw	r18, r24
     d6e:	ad 01       	movw	r20, r26
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	74 e2       	ldi	r23, 0x24	; 36
     d74:	84 e7       	ldi	r24, 0x74	; 116
     d76:	99 e4       	ldi	r25, 0x49	; 73
     d78:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__divsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e8       	ldi	r20, 0x80	; 128
     d86:	5f e3       	ldi	r21, 0x3F	; 63
     d88:	bc 01       	movw	r22, r24
     d8a:	cd 01       	movw	r24, r26
     d8c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__subsf3>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	bc 01       	movw	r22, r24
     d96:	cd 01       	movw	r24, r26
     d98:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__fixunssfdi>
     d9c:	a2 2e       	mov	r10, r18
     d9e:	b3 2e       	mov	r11, r19
     da0:	c4 2e       	mov	r12, r20
     da2:	d5 2e       	mov	r13, r21
     da4:	e6 2e       	mov	r14, r22
     da6:	f7 2e       	mov	r15, r23
     da8:	08 2f       	mov	r16, r24
     daa:	19 2f       	mov	r17, r25
     dac:	c4 01       	movw	r24, r8
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	9e 01       	movw	r18, r28
     dbc:	2f 5f       	subi	r18, 0xFF	; 255
     dbe:	3f 4f       	sbci	r19, 0xFF	; 255
     dc0:	82 0f       	add	r24, r18
     dc2:	93 1f       	adc	r25, r19
     dc4:	42 96       	adiw	r24, 0x12	; 18
     dc6:	fc 01       	movw	r30, r24
     dc8:	a0 82       	st	Z, r10
     dca:	fc 01       	movw	r30, r24
     dcc:	b1 82       	std	Z+1, r11	; 0x01
     dce:	fc 01       	movw	r30, r24
     dd0:	c2 82       	std	Z+2, r12	; 0x02
     dd2:	fc 01       	movw	r30, r24
     dd4:	d3 82       	std	Z+3, r13	; 0x03
     dd6:	fc 01       	movw	r30, r24
     dd8:	e4 82       	std	Z+4, r14	; 0x04
     dda:	fc 01       	movw	r30, r24
     ddc:	f5 82       	std	Z+5, r15	; 0x05
     dde:	fc 01       	movw	r30, r24
     de0:	06 83       	std	Z+6, r16	; 0x06
     de2:	fc 01       	movw	r30, r24
     de4:	17 83       	std	Z+7, r17	; 0x07
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	88 2f       	mov	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	88 5b       	subi	r24, 0xB8	; 184
     df2:	9d 4f       	sbci	r25, 0xFD	; 253
     df4:	fc 01       	movw	r30, r24
     df6:	80 81       	ld	r24, Z
     df8:	91 81       	ldd	r25, Z+1	; 0x01
     dfa:	cc 01       	movw	r24, r24
     dfc:	a0 e0       	ldi	r26, 0x00	; 0
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__floatunsisf>
     e08:	3b 01       	movw	r6, r22
     e0a:	4c 01       	movw	r8, r24
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	88 2f       	mov	r24, r24
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	9e 01       	movw	r18, r28
     e20:	2f 5f       	subi	r18, 0xFF	; 255
     e22:	3f 4f       	sbci	r19, 0xFF	; 255
     e24:	82 0f       	add	r24, r18
     e26:	93 1f       	adc	r25, r19
     e28:	42 96       	adiw	r24, 0x12	; 18
     e2a:	fc 01       	movw	r30, r24
     e2c:	a0 80       	ld	r10, Z
     e2e:	fc 01       	movw	r30, r24
     e30:	b1 80       	ldd	r11, Z+1	; 0x01
     e32:	fc 01       	movw	r30, r24
     e34:	c2 80       	ldd	r12, Z+2	; 0x02
     e36:	fc 01       	movw	r30, r24
     e38:	d3 80       	ldd	r13, Z+3	; 0x03
     e3a:	fc 01       	movw	r30, r24
     e3c:	e4 80       	ldd	r14, Z+4	; 0x04
     e3e:	fc 01       	movw	r30, r24
     e40:	f5 80       	ldd	r15, Z+5	; 0x05
     e42:	fc 01       	movw	r30, r24
     e44:	06 81       	ldd	r16, Z+6	; 0x06
     e46:	fc 01       	movw	r30, r24
     e48:	17 81       	ldd	r17, Z+7	; 0x07
     e4a:	2a 2d       	mov	r18, r10
     e4c:	3b 2d       	mov	r19, r11
     e4e:	4c 2d       	mov	r20, r12
     e50:	5d 2d       	mov	r21, r13
     e52:	6e 2d       	mov	r22, r14
     e54:	7f 2d       	mov	r23, r15
     e56:	80 2f       	mov	r24, r16
     e58:	91 2f       	mov	r25, r17
     e5a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatundisf>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e8       	ldi	r20, 0x80	; 128
     e68:	5f e3       	ldi	r21, 0x3F	; 63
     e6a:	bc 01       	movw	r22, r24
     e6c:	cd 01       	movw	r24, r26
     e6e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__addsf3>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	9c 01       	movw	r18, r24
     e78:	ad 01       	movw	r20, r26
     e7a:	c4 01       	movw	r24, r8
     e7c:	b3 01       	movw	r22, r6
     e7e:	0e 94 a6 10 	call	0x214c	; 0x214c <__mulsf3>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	9c 01       	movw	r18, r24
     e88:	ad 01       	movw	r20, r26
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	74 e2       	ldi	r23, 0x24	; 36
     e8e:	84 e7       	ldi	r24, 0x74	; 116
     e90:	99 e4       	ldi	r25, 0x49	; 73
     e92:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__divsf3>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	8d 87       	std	Y+13, r24	; 0x0d
     e9c:	9e 87       	std	Y+14, r25	; 0x0e
     e9e:	af 87       	std	Y+15, r26	; 0x0f
     ea0:	b8 8b       	std	Y+16, r27	; 0x10
     ea2:	fe 01       	movw	r30, r28
     ea4:	e0 5b       	subi	r30, 0xB0	; 176
     ea6:	ff 4f       	sbci	r31, 0xFF	; 255
     ea8:	20 81       	ld	r18, Z
     eaa:	31 81       	ldd	r19, Z+1	; 0x01
     eac:	42 81       	ldd	r20, Z+2	; 0x02
     eae:	53 81       	ldd	r21, Z+3	; 0x03
     eb0:	64 81       	ldd	r22, Z+4	; 0x04
     eb2:	75 81       	ldd	r23, Z+5	; 0x05
     eb4:	86 81       	ldd	r24, Z+6	; 0x06
     eb6:	97 81       	ldd	r25, Z+7	; 0x07
     eb8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatundisf>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	9c 01       	movw	r18, r24
     ec2:	ad 01       	movw	r20, r26
     ec4:	6d 85       	ldd	r22, Y+13	; 0x0d
     ec6:	7e 85       	ldd	r23, Y+14	; 0x0e
     ec8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eca:	98 89       	ldd	r25, Y+16	; 0x10
     ecc:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__subsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	8a 83       	std	Y+2, r24	; 0x02
     ed6:	9b 83       	std	Y+3, r25	; 0x03
     ed8:	ac 83       	std	Y+4, r26	; 0x04
     eda:	bd 83       	std	Y+5, r27	; 0x05
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	a9 01       	movw	r20, r18
     ee2:	6a 81       	ldd	r22, Y+2	; 0x02
     ee4:	7b 81       	ldd	r23, Y+3	; 0x03
     ee6:	8c 81       	ldd	r24, Y+4	; 0x04
     ee8:	9d 81       	ldd	r25, Y+5	; 0x05
     eea:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__cmpsf2>
     eee:	88 23       	and	r24, r24
     ef0:	4c f4       	brge	.+18     	; 0xf04 <set_rate_8_bit+0x2c6>
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	9b 81       	ldd	r25, Y+3	; 0x03
     ef6:	ac 81       	ldd	r26, Y+4	; 0x04
     ef8:	bd 81       	ldd	r27, Y+5	; 0x05
     efa:	b0 58       	subi	r27, 0x80	; 128
     efc:	8a 83       	std	Y+2, r24	; 0x02
     efe:	9b 83       	std	Y+3, r25	; 0x03
     f00:	ac 83       	std	Y+4, r26	; 0x04
     f02:	bd 83       	std	Y+5, r27	; 0x05
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	88 2f       	mov	r24, r24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	9e 01       	movw	r18, r28
     f14:	2f 5f       	subi	r18, 0xFF	; 255
     f16:	3f 4f       	sbci	r19, 0xFF	; 255
     f18:	82 0f       	add	r24, r18
     f1a:	93 1f       	adc	r25, r19
     f1c:	9c 01       	movw	r18, r24
     f1e:	26 5c       	subi	r18, 0xC6	; 198
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	9b 81       	ldd	r25, Y+3	; 0x03
     f26:	ac 81       	ldd	r26, Y+4	; 0x04
     f28:	bd 81       	ldd	r27, Y+5	; 0x05
     f2a:	f9 01       	movw	r30, r18
     f2c:	80 83       	st	Z, r24
     f2e:	91 83       	std	Z+1, r25	; 0x01
     f30:	a2 83       	std	Z+2, r26	; 0x02
     f32:	b3 83       	std	Z+3, r27	; 0x03
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	8f 5f       	subi	r24, 0xFF	; 255
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	85 30       	cpi	r24, 0x05	; 5
     f3e:	08 f4       	brcc	.+2      	; 0xf42 <set_rate_8_bit+0x304>
     f40:	e8 ce       	rjmp	.-560    	; 0xd12 <set_rate_8_bit+0xd4>
     f42:	84 e0       	ldi	r24, 0x04	; 4
     f44:	8e 83       	std	Y+6, r24	; 0x06
     f46:	8e 81       	ldd	r24, Y+6	; 0x06
     f48:	88 2f       	mov	r24, r24
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	9e 01       	movw	r18, r28
     f56:	2f 5f       	subi	r18, 0xFF	; 255
     f58:	3f 4f       	sbci	r19, 0xFF	; 255
     f5a:	82 0f       	add	r24, r18
     f5c:	93 1f       	adc	r25, r19
     f5e:	ca 96       	adiw	r24, 0x3a	; 58
     f60:	fc 01       	movw	r30, r24
     f62:	80 81       	ld	r24, Z
     f64:	91 81       	ldd	r25, Z+1	; 0x01
     f66:	a2 81       	ldd	r26, Z+2	; 0x02
     f68:	b3 81       	ldd	r27, Z+3	; 0x03
     f6a:	8f 83       	std	Y+7, r24	; 0x07
     f6c:	98 87       	std	Y+8, r25	; 0x08
     f6e:	a9 87       	std	Y+9, r26	; 0x09
     f70:	ba 87       	std	Y+10, r27	; 0x0a
     f72:	1b 86       	std	Y+11, r1	; 0x0b
     f74:	68 c0       	rjmp	.+208    	; 0x1046 <set_rate_8_bit+0x408>
     f76:	8b 85       	ldd	r24, Y+11	; 0x0b
     f78:	88 2f       	mov	r24, r24
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	9e 01       	movw	r18, r28
     f8a:	2f 5f       	subi	r18, 0xFF	; 255
     f8c:	3f 4f       	sbci	r19, 0xFF	; 255
     f8e:	82 0f       	add	r24, r18
     f90:	93 1f       	adc	r25, r19
     f92:	42 96       	adiw	r24, 0x12	; 18
     f94:	fc 01       	movw	r30, r24
     f96:	a0 80       	ld	r10, Z
     f98:	fc 01       	movw	r30, r24
     f9a:	b1 80       	ldd	r11, Z+1	; 0x01
     f9c:	fc 01       	movw	r30, r24
     f9e:	c2 80       	ldd	r12, Z+2	; 0x02
     fa0:	fc 01       	movw	r30, r24
     fa2:	d3 80       	ldd	r13, Z+3	; 0x03
     fa4:	fc 01       	movw	r30, r24
     fa6:	e4 80       	ldd	r14, Z+4	; 0x04
     fa8:	fc 01       	movw	r30, r24
     faa:	f5 80       	ldd	r15, Z+5	; 0x05
     fac:	fc 01       	movw	r30, r24
     fae:	06 81       	ldd	r16, Z+6	; 0x06
     fb0:	fc 01       	movw	r30, r24
     fb2:	17 81       	ldd	r17, Z+7	; 0x07
     fb4:	2a 2d       	mov	r18, r10
     fb6:	3b 2d       	mov	r19, r11
     fb8:	4c 2d       	mov	r20, r12
     fba:	5d 2d       	mov	r21, r13
     fbc:	6e 2d       	mov	r22, r14
     fbe:	7f 2d       	mov	r23, r15
     fc0:	80 2f       	mov	r24, r16
     fc2:	91 2f       	mov	r25, r17
     fc4:	2e 3f       	cpi	r18, 0xFE	; 254
     fc6:	31 05       	cpc	r19, r1
     fc8:	41 05       	cpc	r20, r1
     fca:	51 05       	cpc	r21, r1
     fcc:	61 05       	cpc	r22, r1
     fce:	71 05       	cpc	r23, r1
     fd0:	81 05       	cpc	r24, r1
     fd2:	91 05       	cpc	r25, r1
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <set_rate_8_bit+0x39a>
     fd6:	a0 f5       	brcc	.+104    	; 0x1040 <set_rate_8_bit+0x402>
     fd8:	8b 85       	ldd	r24, Y+11	; 0x0b
     fda:	88 2f       	mov	r24, r24
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	9e 01       	movw	r18, r28
     fe8:	2f 5f       	subi	r18, 0xFF	; 255
     fea:	3f 4f       	sbci	r19, 0xFF	; 255
     fec:	82 0f       	add	r24, r18
     fee:	93 1f       	adc	r25, r19
     ff0:	ca 96       	adiw	r24, 0x3a	; 58
     ff2:	fc 01       	movw	r30, r24
     ff4:	80 81       	ld	r24, Z
     ff6:	91 81       	ldd	r25, Z+1	; 0x01
     ff8:	a2 81       	ldd	r26, Z+2	; 0x02
     ffa:	b3 81       	ldd	r27, Z+3	; 0x03
     ffc:	2f 81       	ldd	r18, Y+7	; 0x07
     ffe:	38 85       	ldd	r19, Y+8	; 0x08
    1000:	49 85       	ldd	r20, Y+9	; 0x09
    1002:	5a 85       	ldd	r21, Y+10	; 0x0a
    1004:	bc 01       	movw	r22, r24
    1006:	cd 01       	movw	r24, r26
    1008:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__cmpsf2>
    100c:	18 16       	cp	r1, r24
    100e:	c4 f0       	brlt	.+48     	; 0x1040 <set_rate_8_bit+0x402>
    1010:	8b 85       	ldd	r24, Y+11	; 0x0b
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	9e 01       	movw	r18, r28
    1020:	2f 5f       	subi	r18, 0xFF	; 255
    1022:	3f 4f       	sbci	r19, 0xFF	; 255
    1024:	82 0f       	add	r24, r18
    1026:	93 1f       	adc	r25, r19
    1028:	ca 96       	adiw	r24, 0x3a	; 58
    102a:	fc 01       	movw	r30, r24
    102c:	80 81       	ld	r24, Z
    102e:	91 81       	ldd	r25, Z+1	; 0x01
    1030:	a2 81       	ldd	r26, Z+2	; 0x02
    1032:	b3 81       	ldd	r27, Z+3	; 0x03
    1034:	8f 83       	std	Y+7, r24	; 0x07
    1036:	98 87       	std	Y+8, r25	; 0x08
    1038:	a9 87       	std	Y+9, r26	; 0x09
    103a:	ba 87       	std	Y+10, r27	; 0x0a
    103c:	8b 85       	ldd	r24, Y+11	; 0x0b
    103e:	8e 83       	std	Y+6, r24	; 0x06
    1040:	8b 85       	ldd	r24, Y+11	; 0x0b
    1042:	8f 5f       	subi	r24, 0xFF	; 255
    1044:	8b 87       	std	Y+11, r24	; 0x0b
    1046:	8b 85       	ldd	r24, Y+11	; 0x0b
    1048:	85 30       	cpi	r24, 0x05	; 5
    104a:	08 f4       	brcc	.+2      	; 0x104e <set_rate_8_bit+0x410>
    104c:	94 cf       	rjmp	.-216    	; 0xf76 <set_rate_8_bit+0x338>
    104e:	ce 01       	movw	r24, r28
    1050:	81 5b       	subi	r24, 0xB1	; 177
    1052:	9f 4f       	sbci	r25, 0xFF	; 255
    1054:	fc 01       	movw	r30, r24
    1056:	80 81       	ld	r24, Z
    1058:	88 2f       	mov	r24, r24
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	9c 01       	movw	r18, r24
    105e:	c9 01       	movw	r24, r18
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	9c 01       	movw	r18, r24
    1066:	c9 01       	movw	r24, r18
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	82 1b       	sub	r24, r18
    1076:	93 0b       	sbc	r25, r19
    1078:	84 5e       	subi	r24, 0xE4	; 228
    107a:	9d 4f       	sbci	r25, 0xFD	; 253
    107c:	fc 01       	movw	r30, r24
    107e:	40 81       	ld	r20, Z
    1080:	51 81       	ldd	r21, Z+1	; 0x01
    1082:	ce 01       	movw	r24, r28
    1084:	81 5b       	subi	r24, 0xB1	; 177
    1086:	9f 4f       	sbci	r25, 0xFF	; 255
    1088:	fc 01       	movw	r30, r24
    108a:	80 81       	ld	r24, Z
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	9c 01       	movw	r18, r24
    1092:	c9 01       	movw	r24, r18
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	9c 01       	movw	r18, r24
    109a:	c9 01       	movw	r24, r18
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	82 1b       	sub	r24, r18
    10aa:	93 0b       	sbc	r25, r19
    10ac:	84 5e       	subi	r24, 0xE4	; 228
    10ae:	9d 4f       	sbci	r25, 0xFD	; 253
    10b0:	fc 01       	movw	r30, r24
    10b2:	80 81       	ld	r24, Z
    10b4:	91 81       	ldd	r25, Z+1	; 0x01
    10b6:	fc 01       	movw	r30, r24
    10b8:	80 81       	ld	r24, Z
    10ba:	87 7f       	andi	r24, 0xF7	; 247
    10bc:	fa 01       	movw	r30, r20
    10be:	80 83       	st	Z, r24
    10c0:	ce 01       	movw	r24, r28
    10c2:	81 5b       	subi	r24, 0xB1	; 177
    10c4:	9f 4f       	sbci	r25, 0xFF	; 255
    10c6:	fc 01       	movw	r30, r24
    10c8:	80 81       	ld	r24, Z
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	9c 01       	movw	r18, r24
    10d0:	c9 01       	movw	r24, r18
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	9c 01       	movw	r18, r24
    10d8:	c9 01       	movw	r24, r18
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	82 1b       	sub	r24, r18
    10e8:	93 0b       	sbc	r25, r19
    10ea:	86 5e       	subi	r24, 0xE6	; 230
    10ec:	9d 4f       	sbci	r25, 0xFD	; 253
    10ee:	fc 01       	movw	r30, r24
    10f0:	80 81       	ld	r24, Z
    10f2:	91 81       	ldd	r25, Z+1	; 0x01
    10f4:	fc 01       	movw	r30, r24
    10f6:	80 81       	ld	r24, Z
    10f8:	89 8b       	std	Y+17, r24	; 0x11
    10fa:	ce 01       	movw	r24, r28
    10fc:	81 5b       	subi	r24, 0xB1	; 177
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	fc 01       	movw	r30, r24
    1102:	80 81       	ld	r24, Z
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	9c 01       	movw	r18, r24
    110a:	c9 01       	movw	r24, r18
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	9c 01       	movw	r18, r24
    1112:	c9 01       	movw	r24, r18
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	82 1b       	sub	r24, r18
    1122:	93 0b       	sbc	r25, r19
    1124:	86 5e       	subi	r24, 0xE6	; 230
    1126:	9d 4f       	sbci	r25, 0xFD	; 253
    1128:	fc 01       	movw	r30, r24
    112a:	80 81       	ld	r24, Z
    112c:	91 81       	ldd	r25, Z+1	; 0x01
    112e:	29 89       	ldd	r18, Y+17	; 0x11
    1130:	22 60       	ori	r18, 0x02	; 2
    1132:	2e 7f       	andi	r18, 0xFE	; 254
    1134:	fc 01       	movw	r30, r24
    1136:	20 83       	st	Z, r18
    1138:	ce 01       	movw	r24, r28
    113a:	81 5b       	subi	r24, 0xB1	; 177
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	fc 01       	movw	r30, r24
    1140:	80 81       	ld	r24, Z
    1142:	88 2f       	mov	r24, r24
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	9c 01       	movw	r18, r24
    1148:	c9 01       	movw	r24, r18
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	9c 01       	movw	r18, r24
    1150:	c9 01       	movw	r24, r18
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	82 1b       	sub	r24, r18
    1160:	93 0b       	sbc	r25, r19
    1162:	80 5e       	subi	r24, 0xE0	; 224
    1164:	9d 4f       	sbci	r25, 0xFD	; 253
    1166:	fc 01       	movw	r30, r24
    1168:	a0 81       	ld	r26, Z
    116a:	b1 81       	ldd	r27, Z+1	; 0x01
    116c:	8e 81       	ldd	r24, Y+6	; 0x06
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	9e 01       	movw	r18, r28
    1180:	2f 5f       	subi	r18, 0xFF	; 255
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	82 0f       	add	r24, r18
    1186:	93 1f       	adc	r25, r19
    1188:	fc 01       	movw	r30, r24
    118a:	72 96       	adiw	r30, 0x12	; 18
    118c:	20 81       	ld	r18, Z
    118e:	31 81       	ldd	r19, Z+1	; 0x01
    1190:	42 81       	ldd	r20, Z+2	; 0x02
    1192:	53 81       	ldd	r21, Z+3	; 0x03
    1194:	64 81       	ldd	r22, Z+4	; 0x04
    1196:	75 81       	ldd	r23, Z+5	; 0x05
    1198:	86 81       	ldd	r24, Z+6	; 0x06
    119a:	97 81       	ldd	r25, Z+7	; 0x07
    119c:	82 2f       	mov	r24, r18
    119e:	8c 93       	st	X, r24
    11a0:	1c 86       	std	Y+12, r1	; 0x0c
    11a2:	8e 81       	ldd	r24, Y+6	; 0x06
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	88 5b       	subi	r24, 0xB8	; 184
    11ae:	9d 4f       	sbci	r25, 0xFD	; 253
    11b0:	fc 01       	movw	r30, r24
    11b2:	80 81       	ld	r24, Z
    11b4:	91 81       	ldd	r25, Z+1	; 0x01
    11b6:	80 34       	cpi	r24, 0x40	; 64
    11b8:	91 05       	cpc	r25, r1
    11ba:	b9 f0       	breq	.+46     	; 0x11ea <set_rate_8_bit+0x5ac>
    11bc:	81 34       	cpi	r24, 0x41	; 65
    11be:	91 05       	cpc	r25, r1
    11c0:	30 f4       	brcc	.+12     	; 0x11ce <set_rate_8_bit+0x590>
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	91 05       	cpc	r25, r1
    11c6:	59 f0       	breq	.+22     	; 0x11de <set_rate_8_bit+0x5a0>
    11c8:	08 97       	sbiw	r24, 0x08	; 8
    11ca:	61 f0       	breq	.+24     	; 0x11e4 <set_rate_8_bit+0x5a6>
    11cc:	17 c0       	rjmp	.+46     	; 0x11fc <set_rate_8_bit+0x5be>
    11ce:	81 15       	cp	r24, r1
    11d0:	f1 e0       	ldi	r31, 0x01	; 1
    11d2:	9f 07       	cpc	r25, r31
    11d4:	69 f0       	breq	.+26     	; 0x11f0 <set_rate_8_bit+0x5b2>
    11d6:	81 15       	cp	r24, r1
    11d8:	94 40       	sbci	r25, 0x04	; 4
    11da:	69 f0       	breq	.+26     	; 0x11f6 <set_rate_8_bit+0x5b8>
    11dc:	0f c0       	rjmp	.+30     	; 0x11fc <set_rate_8_bit+0x5be>
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	8c 87       	std	Y+12, r24	; 0x0c
    11e2:	0c c0       	rjmp	.+24     	; 0x11fc <set_rate_8_bit+0x5be>
    11e4:	82 e0       	ldi	r24, 0x02	; 2
    11e6:	8c 87       	std	Y+12, r24	; 0x0c
    11e8:	09 c0       	rjmp	.+18     	; 0x11fc <set_rate_8_bit+0x5be>
    11ea:	83 e0       	ldi	r24, 0x03	; 3
    11ec:	8c 87       	std	Y+12, r24	; 0x0c
    11ee:	06 c0       	rjmp	.+12     	; 0x11fc <set_rate_8_bit+0x5be>
    11f0:	84 e0       	ldi	r24, 0x04	; 4
    11f2:	8c 87       	std	Y+12, r24	; 0x0c
    11f4:	03 c0       	rjmp	.+6      	; 0x11fc <set_rate_8_bit+0x5be>
    11f6:	85 e0       	ldi	r24, 0x05	; 5
    11f8:	8c 87       	std	Y+12, r24	; 0x0c
    11fa:	00 00       	nop
    11fc:	ce 01       	movw	r24, r28
    11fe:	81 5b       	subi	r24, 0xB1	; 177
    1200:	9f 4f       	sbci	r25, 0xFF	; 255
    1202:	fc 01       	movw	r30, r24
    1204:	80 81       	ld	r24, Z
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	9c 01       	movw	r18, r24
    120c:	c9 01       	movw	r24, r18
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	9c 01       	movw	r18, r24
    1214:	c9 01       	movw	r24, r18
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	82 1b       	sub	r24, r18
    1224:	93 0b       	sbc	r25, r19
    1226:	84 5e       	subi	r24, 0xE4	; 228
    1228:	9d 4f       	sbci	r25, 0xFD	; 253
    122a:	fc 01       	movw	r30, r24
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	8a 8b       	std	Y+18, r24	; 0x12
    1232:	ce 01       	movw	r24, r28
    1234:	81 5b       	subi	r24, 0xB1	; 177
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	fc 01       	movw	r30, r24
    123a:	80 81       	ld	r24, Z
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	9c 01       	movw	r18, r24
    1242:	c9 01       	movw	r24, r18
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	9c 01       	movw	r18, r24
    124a:	c9 01       	movw	r24, r18
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	82 1b       	sub	r24, r18
    125a:	93 0b       	sbc	r25, r19
    125c:	84 5e       	subi	r24, 0xE4	; 228
    125e:	9d 4f       	sbci	r25, 0xFD	; 253
    1260:	fc 01       	movw	r30, r24
    1262:	80 81       	ld	r24, Z
    1264:	91 81       	ldd	r25, Z+1	; 0x01
    1266:	2a 89       	ldd	r18, Y+18	; 0x12
    1268:	32 2f       	mov	r19, r18
    126a:	38 7f       	andi	r19, 0xF8	; 248
    126c:	2c 85       	ldd	r18, Y+12	; 0x0c
    126e:	23 2b       	or	r18, r19
    1270:	fc 01       	movw	r30, r24
    1272:	20 83       	st	Z, r18
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <set_rate_8_bit+0x63a>
    1276:	00 00       	nop
    1278:	c9 5a       	subi	r28, 0xA9	; 169
    127a:	df 4f       	sbci	r29, 0xFF	; 255
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	ff 90       	pop	r15
    1290:	ef 90       	pop	r14
    1292:	df 90       	pop	r13
    1294:	cf 90       	pop	r12
    1296:	bf 90       	pop	r11
    1298:	af 90       	pop	r10
    129a:	9f 90       	pop	r9
    129c:	8f 90       	pop	r8
    129e:	7f 90       	pop	r7
    12a0:	6f 90       	pop	r6
    12a2:	08 95       	ret

000012a4 <morph_config_timer_acquire_timer>:
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <morph_config_timer_acquire_timer+0x6>
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	6a 83       	std	Y+2, r22	; 0x02
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	89 30       	cpi	r24, 0x09	; 9
    12b6:	b8 f4       	brcc	.+46     	; 0x12e6 <morph_config_timer_acquire_timer+0x42>
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	9c 01       	movw	r18, r24
    12c0:	c9 01       	movw	r24, r18
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	9c 01       	movw	r18, r24
    12c8:	c9 01       	movw	r24, r18
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	82 1b       	sub	r24, r18
    12d8:	93 0b       	sbc	r25, r19
    12da:	88 5e       	subi	r24, 0xE8	; 232
    12dc:	9d 4f       	sbci	r25, 0xFD	; 253
    12de:	21 e0       	ldi	r18, 0x01	; 1
    12e0:	fc 01       	movw	r30, r24
    12e2:	20 83       	st	Z, r18
    12e4:	11 c0       	rjmp	.+34     	; 0x1308 <morph_config_timer_acquire_timer+0x64>
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	81 31       	cpi	r24, 0x11	; 17
    12ea:	70 f4       	brcc	.+28     	; 0x1308 <morph_config_timer_acquire_timer+0x64>
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	44 e1       	ldi	r20, 0x14	; 20
    12f4:	42 9f       	mul	r20, r18
    12f6:	c0 01       	movw	r24, r0
    12f8:	43 9f       	mul	r20, r19
    12fa:	90 0d       	add	r25, r0
    12fc:	11 24       	eor	r1, r1
    12fe:	8c 5c       	subi	r24, 0xCC	; 204
    1300:	9d 4f       	sbci	r25, 0xFD	; 253
    1302:	21 e0       	ldi	r18, 0x01	; 1
    1304:	fc 01       	movw	r30, r24
    1306:	20 83       	st	Z, r18
    1308:	00 00       	nop
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	08 95       	ret

00001314 <morph_config_timer_release_timer>:
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	00 d0       	rcall	.+0      	; 0x131a <morph_config_timer_release_timer+0x6>
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	6a 83       	std	Y+2, r22	; 0x02
    1322:	00 00       	nop
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	08 95       	ret

0000132e <morph_config_timer_set_rate>:
    132e:	8f 92       	push	r8
    1330:	9f 92       	push	r9
    1332:	af 92       	push	r10
    1334:	bf 92       	push	r11
    1336:	cf 92       	push	r12
    1338:	df 92       	push	r13
    133a:	ef 92       	push	r14
    133c:	ff 92       	push	r15
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	2a 97       	sbiw	r28, 0x0a	; 10
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	6a 83       	std	Y+2, r22	; 0x02
    135a:	eb 82       	std	Y+3, r14	; 0x03
    135c:	fc 82       	std	Y+4, r15	; 0x04
    135e:	0d 83       	std	Y+5, r16	; 0x05
    1360:	1e 83       	std	Y+6, r17	; 0x06
    1362:	2f 83       	std	Y+7, r18	; 0x07
    1364:	38 87       	std	Y+8, r19	; 0x08
    1366:	49 87       	std	Y+9, r20	; 0x09
    1368:	5a 87       	std	Y+10, r21	; 0x0a
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	89 30       	cpi	r24, 0x09	; 9
    136e:	98 f4       	brcc	.+38     	; 0x1396 <morph_config_timer_set_rate+0x68>
    1370:	8b 80       	ldd	r8, Y+3	; 0x03
    1372:	9c 80       	ldd	r9, Y+4	; 0x04
    1374:	ad 80       	ldd	r10, Y+5	; 0x05
    1376:	be 80       	ldd	r11, Y+6	; 0x06
    1378:	cf 80       	ldd	r12, Y+7	; 0x07
    137a:	d8 84       	ldd	r13, Y+8	; 0x08
    137c:	e9 84       	ldd	r14, Y+9	; 0x09
    137e:	fa 84       	ldd	r15, Y+10	; 0x0a
    1380:	08 2d       	mov	r16, r8
    1382:	19 2d       	mov	r17, r9
    1384:	2a 2d       	mov	r18, r10
    1386:	3b 2d       	mov	r19, r11
    1388:	4c 2d       	mov	r20, r12
    138a:	5d 2d       	mov	r21, r13
    138c:	6e 2d       	mov	r22, r14
    138e:	7f 2d       	mov	r23, r15
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	0e 94 1f 06 	call	0xc3e	; 0xc3e <set_rate_8_bit>
    1396:	00 00       	nop
    1398:	2a 96       	adiw	r28, 0x0a	; 10
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	1f 91       	pop	r17
    13aa:	0f 91       	pop	r16
    13ac:	ff 90       	pop	r15
    13ae:	ef 90       	pop	r14
    13b0:	df 90       	pop	r13
    13b2:	cf 90       	pop	r12
    13b4:	bf 90       	pop	r11
    13b6:	af 90       	pop	r10
    13b8:	9f 90       	pop	r9
    13ba:	8f 90       	pop	r8
    13bc:	08 95       	ret

000013be <morph_config_timer_set_timer_callback>:
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <morph_config_timer_set_timer_callback+0x6>
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <morph_config_timer_set_timer_callback+0x8>
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	6a 83       	std	Y+2, r22	; 0x02
    13ce:	5c 83       	std	Y+4, r21	; 0x04
    13d0:	4b 83       	std	Y+3, r20	; 0x03
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	89 30       	cpi	r24, 0x09	; 9
    13d6:	08 f0       	brcs	.+2      	; 0x13da <morph_config_timer_set_timer_callback+0x1c>
    13d8:	4b c0       	rjmp	.+150    	; 0x1470 <morph_config_timer_set_timer_callback+0xb2>
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	9c 01       	movw	r18, r24
    13e2:	c9 01       	movw	r24, r18
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	9c 01       	movw	r18, r24
    13ea:	c9 01       	movw	r24, r18
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	82 1b       	sub	r24, r18
    13fa:	93 0b       	sbc	r25, r19
    13fc:	8c 5d       	subi	r24, 0xDC	; 220
    13fe:	9d 4f       	sbci	r25, 0xFD	; 253
    1400:	2b 81       	ldd	r18, Y+3	; 0x03
    1402:	3c 81       	ldd	r19, Y+4	; 0x04
    1404:	fc 01       	movw	r30, r24
    1406:	31 83       	std	Z+1, r19	; 0x01
    1408:	20 83       	st	Z, r18
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	9c 01       	movw	r18, r24
    1412:	c9 01       	movw	r24, r18
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	9c 01       	movw	r18, r24
    141a:	c9 01       	movw	r24, r18
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	82 1b       	sub	r24, r18
    142a:	93 0b       	sbc	r25, r19
    142c:	82 5e       	subi	r24, 0xE2	; 226
    142e:	9d 4f       	sbci	r25, 0xFD	; 253
    1430:	fc 01       	movw	r30, r24
    1432:	40 81       	ld	r20, Z
    1434:	51 81       	ldd	r21, Z+1	; 0x01
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	88 2f       	mov	r24, r24
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	9c 01       	movw	r18, r24
    143e:	c9 01       	movw	r24, r18
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	9c 01       	movw	r18, r24
    1446:	c9 01       	movw	r24, r18
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	82 1b       	sub	r24, r18
    1456:	93 0b       	sbc	r25, r19
    1458:	82 5e       	subi	r24, 0xE2	; 226
    145a:	9d 4f       	sbci	r25, 0xFD	; 253
    145c:	fc 01       	movw	r30, r24
    145e:	80 81       	ld	r24, Z
    1460:	91 81       	ldd	r25, Z+1	; 0x01
    1462:	fc 01       	movw	r30, r24
    1464:	80 81       	ld	r24, Z
    1466:	82 60       	ori	r24, 0x02	; 2
    1468:	fa 01       	movw	r30, r20
    146a:	80 83       	st	Z, r24
    146c:	78 94       	sei
    146e:	13 c0       	rjmp	.+38     	; 0x1496 <morph_config_timer_set_timer_callback+0xd8>
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	81 31       	cpi	r24, 0x11	; 17
    1474:	80 f4       	brcc	.+32     	; 0x1496 <morph_config_timer_set_timer_callback+0xd8>
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	44 e1       	ldi	r20, 0x14	; 20
    147e:	42 9f       	mul	r20, r18
    1480:	c0 01       	movw	r24, r0
    1482:	43 9f       	mul	r20, r19
    1484:	90 0d       	add	r25, r0
    1486:	11 24       	eor	r1, r1
    1488:	8a 5b       	subi	r24, 0xBA	; 186
    148a:	9d 4f       	sbci	r25, 0xFD	; 253
    148c:	2b 81       	ldd	r18, Y+3	; 0x03
    148e:	3c 81       	ldd	r19, Y+4	; 0x04
    1490:	fc 01       	movw	r30, r24
    1492:	31 83       	std	Z+1, r19	; 0x01
    1494:	20 83       	st	Z, r18
    1496:	00 00       	nop
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <set_pwm_raw_8_bit>:
// ---- TIMER END ----

// ---- PWM BEGIN ----

void set_pwm_raw_8_bit(uint8_t timer_num, uint8_t timer_channel, uint8_t count_val)
{
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <set_pwm_raw_8_bit+0x6>
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <set_pwm_raw_8_bit+0x8>
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	8a 83       	std	Y+2, r24	; 0x02
    14b4:	6b 83       	std	Y+3, r22	; 0x03
    14b6:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t type_index = 0;
    14b8:	19 82       	std	Y+1, r1	; 0x01
	
	//These are both 8 bit timers.
	if(timer_num == 0)
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	88 23       	and	r24, r24
    14be:	11 f4       	brne	.+4      	; 0x14c4 <set_pwm_raw_8_bit+0x1e>
	{
		type_index = 0;
    14c0:	19 82       	std	Y+1, r1	; 0x01
    14c2:	05 c0       	rjmp	.+10     	; 0x14ce <set_pwm_raw_8_bit+0x28>
	}
	else if(timer_num == 2)
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	82 30       	cpi	r24, 0x02	; 2
    14c8:	e1 f5       	brne	.+120    	; 0x1542 <set_pwm_raw_8_bit+0x9c>
	{
		type_index = 1;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return;
	}
	
	if(timer_channel == 0)
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	88 23       	and	r24, r24
    14d2:	d1 f4       	brne	.+52     	; 0x1508 <set_pwm_raw_8_bit+0x62>
		*(timer_configs_8_bit[type_index].output_compare_a) = count_val;
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	88 2f       	mov	r24, r24
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	9c 01       	movw	r18, r24
    14dc:	c9 01       	movw	r24, r18
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	9c 01       	movw	r18, r24
    14e4:	c9 01       	movw	r24, r18
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	82 1b       	sub	r24, r18
    14f4:	93 0b       	sbc	r25, r19
    14f6:	80 5e       	subi	r24, 0xE0	; 224
    14f8:	9d 4f       	sbci	r25, 0xFD	; 253
    14fa:	fc 01       	movw	r30, r24
    14fc:	80 81       	ld	r24, Z
    14fe:	91 81       	ldd	r25, Z+1	; 0x01
    1500:	2c 81       	ldd	r18, Y+4	; 0x04
    1502:	fc 01       	movw	r30, r24
    1504:	20 83       	st	Z, r18
    1506:	1e c0       	rjmp	.+60     	; 0x1544 <set_pwm_raw_8_bit+0x9e>
	else if(timer_channel == 1)
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	81 30       	cpi	r24, 0x01	; 1
    150c:	d9 f4       	brne	.+54     	; 0x1544 <set_pwm_raw_8_bit+0x9e>
		*(timer_configs_8_bit[type_index].output_compare_b) = count_val;	
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	9c 01       	movw	r18, r24
    1516:	c9 01       	movw	r24, r18
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	9c 01       	movw	r18, r24
    151e:	c9 01       	movw	r24, r18
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	82 1b       	sub	r24, r18
    152e:	93 0b       	sbc	r25, r19
    1530:	8e 5d       	subi	r24, 0xDE	; 222
    1532:	9d 4f       	sbci	r25, 0xFD	; 253
    1534:	fc 01       	movw	r30, r24
    1536:	80 81       	ld	r24, Z
    1538:	91 81       	ldd	r25, Z+1	; 0x01
    153a:	2c 81       	ldd	r18, Y+4	; 0x04
    153c:	fc 01       	movw	r30, r24
    153e:	20 83       	st	Z, r18
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <set_pwm_raw_8_bit+0x9e>
	{
		type_index = 1;
	}
	else
	{
		return;
    1542:	00 00       	nop
	
	if(timer_channel == 0)
		*(timer_configs_8_bit[type_index].output_compare_a) = count_val;
	else if(timer_channel == 1)
		*(timer_configs_8_bit[type_index].output_compare_b) = count_val;	
}
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	08 95       	ret

00001552 <morph_config_pwm_start_pwm>:

void morph_config_pwm_start_pwm(MorphPinNumber pn)
{
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	2a 97       	sbiw	r28, 0x0a	; 10
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	8a 87       	std	Y+10, r24	; 0x0a
	// First, we've got to figure out if this pin is supported
	if(pn > NUM_PINS)
    1568:	8a 85       	ldd	r24, Y+10	; 0x0a
    156a:	8d 31       	cpi	r24, 0x1D	; 29
    156c:	0c f0       	brlt	.+2      	; 0x1570 <morph_config_pwm_start_pwm+0x1e>
    156e:	fa c1       	rjmp	.+1012   	; 0x1964 <morph_config_pwm_start_pwm+0x412>
		return;
		
	int8_t timer_num     = pin_defs[pn - 1].timer_output;
    1570:	8a 85       	ldd	r24, Y+10	; 0x0a
    1572:	08 2e       	mov	r0, r24
    1574:	00 0c       	add	r0, r0
    1576:	99 0b       	sbc	r25, r25
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	9c 01       	movw	r18, r24
    1580:	22 0f       	add	r18, r18
    1582:	33 1f       	adc	r19, r19
    1584:	22 0f       	add	r18, r18
    1586:	33 1f       	adc	r19, r19
    1588:	82 0f       	add	r24, r18
    158a:	93 1f       	adc	r25, r19
    158c:	88 5f       	subi	r24, 0xF8	; 248
    158e:	9e 4f       	sbci	r25, 0xFE	; 254
    1590:	fc 01       	movw	r30, r24
    1592:	80 81       	ld	r24, Z
    1594:	8c 83       	std	Y+4, r24	; 0x04
	int8_t timer_channel = pin_defs[pn - 1].timer_output_channel;
    1596:	8a 85       	ldd	r24, Y+10	; 0x0a
    1598:	08 2e       	mov	r0, r24
    159a:	00 0c       	add	r0, r0
    159c:	99 0b       	sbc	r25, r25
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	9c 01       	movw	r18, r24
    15a6:	22 0f       	add	r18, r18
    15a8:	33 1f       	adc	r19, r19
    15aa:	22 0f       	add	r18, r18
    15ac:	33 1f       	adc	r19, r19
    15ae:	82 0f       	add	r24, r18
    15b0:	93 1f       	adc	r25, r19
    15b2:	87 5f       	subi	r24, 0xF7	; 247
    15b4:	9e 4f       	sbci	r25, 0xFE	; 254
    15b6:	fc 01       	movw	r30, r24
    15b8:	80 81       	ld	r24, Z
    15ba:	8d 83       	std	Y+5, r24	; 0x05
	
	if(timer_num != -1 && timer_channel != -1)
    15bc:	8c 81       	ldd	r24, Y+4	; 0x04
    15be:	8f 3f       	cpi	r24, 0xFF	; 255
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <morph_config_pwm_start_pwm+0x72>
    15c2:	d3 c1       	rjmp	.+934    	; 0x196a <morph_config_pwm_start_pwm+0x418>
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	8f 3f       	cpi	r24, 0xFF	; 255
    15c8:	09 f4       	brne	.+2      	; 0x15cc <morph_config_pwm_start_pwm+0x7a>
    15ca:	cf c1       	rjmp	.+926    	; 0x196a <morph_config_pwm_start_pwm+0x418>
	{
		// This is the right pin! Yay!
		
		uint8_t resolution = 0;
    15cc:	19 82       	std	Y+1, r1	; 0x01
		bool is_taken = false;
    15ce:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t type_index = 0;
    15d0:	1b 82       	std	Y+3, r1	; 0x03
		
		if(timer_num == 0 || timer_num == 2)
    15d2:	8c 81       	ldd	r24, Y+4	; 0x04
    15d4:	88 23       	and	r24, r24
    15d6:	19 f0       	breq	.+6      	; 0x15de <morph_config_pwm_start_pwm+0x8c>
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	82 30       	cpi	r24, 0x02	; 2
    15dc:	19 f5       	brne	.+70     	; 0x1624 <morph_config_pwm_start_pwm+0xd2>
		{
			//These are both 8 bit timers.
			resolution = 8;
    15de:	88 e0       	ldi	r24, 0x08	; 8
    15e0:	89 83       	std	Y+1, r24	; 0x01
			
			if(timer_num == 0)
    15e2:	8c 81       	ldd	r24, Y+4	; 0x04
    15e4:	88 23       	and	r24, r24
    15e6:	11 f4       	brne	.+4      	; 0x15ec <morph_config_pwm_start_pwm+0x9a>
			{
				type_index = 0;
    15e8:	1b 82       	std	Y+3, r1	; 0x03
    15ea:	05 c0       	rjmp	.+10     	; 0x15f6 <morph_config_pwm_start_pwm+0xa4>
			}
			else if(timer_num == 2)
    15ec:	8c 81       	ldd	r24, Y+4	; 0x04
    15ee:	82 30       	cpi	r24, 0x02	; 2
    15f0:	11 f4       	brne	.+4      	; 0x15f6 <morph_config_pwm_start_pwm+0xa4>
			{
				type_index = 1;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	8b 83       	std	Y+3, r24	; 0x03
			}

			is_taken = timer_configs_8_bit[type_index].is_in_use;
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	88 2f       	mov	r24, r24
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	9c 01       	movw	r18, r24
    15fe:	c9 01       	movw	r24, r18
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	9c 01       	movw	r18, r24
    1606:	c9 01       	movw	r24, r18
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	82 1b       	sub	r24, r18
    1616:	93 0b       	sbc	r25, r19
    1618:	88 5e       	subi	r24, 0xE8	; 232
    161a:	9d 4f       	sbci	r25, 0xFD	; 253
    161c:	fc 01       	movw	r30, r24
    161e:	80 81       	ld	r24, Z
    1620:	8a 83       	std	Y+2, r24	; 0x02
    1622:	15 c0       	rjmp	.+42     	; 0x164e <morph_config_pwm_start_pwm+0xfc>
	
		}
		else if(timer_num == 1)
    1624:	8c 81       	ldd	r24, Y+4	; 0x04
    1626:	81 30       	cpi	r24, 0x01	; 1
    1628:	09 f0       	breq	.+2      	; 0x162c <morph_config_pwm_start_pwm+0xda>
    162a:	9e c1       	rjmp	.+828    	; 0x1968 <morph_config_pwm_start_pwm+0x416>
		{
			// This is a 16 bit timer.
			resolution = 16;
    162c:	80 e1       	ldi	r24, 0x10	; 16
    162e:	89 83       	std	Y+1, r24	; 0x01
			
			type_index = 0;
    1630:	1b 82       	std	Y+3, r1	; 0x03

			is_taken = timer_configs_16_bit[type_index].is_in_use;
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	44 e1       	ldi	r20, 0x14	; 20
    163a:	42 9f       	mul	r20, r18
    163c:	c0 01       	movw	r24, r0
    163e:	43 9f       	mul	r20, r19
    1640:	90 0d       	add	r25, r0
    1642:	11 24       	eor	r1, r1
    1644:	8c 5c       	subi	r24, 0xCC	; 204
    1646:	9d 4f       	sbci	r25, 0xFD	; 253
    1648:	fc 01       	movw	r30, r24
    164a:	80 81       	ld	r24, Z
    164c:	8a 83       	std	Y+2, r24	; 0x02
		else
		{
			return; // go away.
		}
		
		if(!is_taken)
    164e:	9a 81       	ldd	r25, Y+2	; 0x02
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	89 27       	eor	r24, r25
    1654:	88 23       	and	r24, r24
    1656:	09 f4       	brne	.+2      	; 0x165a <morph_config_pwm_start_pwm+0x108>
    1658:	88 c1       	rjmp	.+784    	; 0x196a <morph_config_pwm_start_pwm+0x418>
		{
			// Go through the proper channel to acquire the timer.
			morph_config_timer_acquire_timer(timer_num, resolution);
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	69 81       	ldd	r22, Y+1	; 0x01
    165e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <morph_config_timer_acquire_timer>
		
			if(resolution == 8)
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	88 30       	cpi	r24, 0x08	; 8
    1666:	09 f0       	breq	.+2      	; 0x166a <morph_config_pwm_start_pwm+0x118>
    1668:	6b c1       	rjmp	.+726    	; 0x1940 <morph_config_pwm_start_pwm+0x3ee>
			{
				if(!timer_configs_8_bit[type_index].is_in_use_by_morph_pwm)
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	88 2f       	mov	r24, r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	9c 01       	movw	r18, r24
    1672:	c9 01       	movw	r24, r18
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	9c 01       	movw	r18, r24
    167a:	c9 01       	movw	r24, r18
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	82 1b       	sub	r24, r18
    168a:	93 0b       	sbc	r25, r19
    168c:	87 5e       	subi	r24, 0xE7	; 231
    168e:	9d 4f       	sbci	r25, 0xFD	; 253
    1690:	fc 01       	movw	r30, r24
    1692:	90 81       	ld	r25, Z
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	89 27       	eor	r24, r25
    1698:	88 23       	and	r24, r24
    169a:	09 f4       	brne	.+2      	; 0x169e <morph_config_pwm_start_pwm+0x14c>
    169c:	dd c0       	rjmp	.+442    	; 0x1858 <morph_config_pwm_start_pwm+0x306>
				{
					// This timer isn't being used for PWM yet. 
					// Set this to true and continue.
					timer_configs_8_bit[type_index].is_in_use_by_morph_pwm = true;
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	9c 01       	movw	r18, r24
    16a6:	c9 01       	movw	r24, r18
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	9c 01       	movw	r18, r24
    16ae:	c9 01       	movw	r24, r18
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	82 1b       	sub	r24, r18
    16be:	93 0b       	sbc	r25, r19
    16c0:	87 5e       	subi	r24, 0xE7	; 231
    16c2:	9d 4f       	sbci	r25, 0xFD	; 253
    16c4:	21 e0       	ldi	r18, 0x01	; 1
    16c6:	fc 01       	movw	r30, r24
    16c8:	20 83       	st	Z, r18
				
					// Will be using Phase Correct PWM Mode
					// WGM01:0 = 1

					// Clear WGM02
					*(timer_configs_8_bit[type_index].control_reg_b) &= ~(0x1 << WGM02);
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	88 2f       	mov	r24, r24
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	9c 01       	movw	r18, r24
    16d2:	c9 01       	movw	r24, r18
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	9c 01       	movw	r18, r24
    16da:	c9 01       	movw	r24, r18
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	82 1b       	sub	r24, r18
    16ea:	93 0b       	sbc	r25, r19
    16ec:	84 5e       	subi	r24, 0xE4	; 228
    16ee:	9d 4f       	sbci	r25, 0xFD	; 253
    16f0:	fc 01       	movw	r30, r24
    16f2:	40 81       	ld	r20, Z
    16f4:	51 81       	ldd	r21, Z+1	; 0x01
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	9c 01       	movw	r18, r24
    16fe:	c9 01       	movw	r24, r18
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	9c 01       	movw	r18, r24
    1706:	c9 01       	movw	r24, r18
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	82 1b       	sub	r24, r18
    1716:	93 0b       	sbc	r25, r19
    1718:	84 5e       	subi	r24, 0xE4	; 228
    171a:	9d 4f       	sbci	r25, 0xFD	; 253
    171c:	fc 01       	movw	r30, r24
    171e:	80 81       	ld	r24, Z
    1720:	91 81       	ldd	r25, Z+1	; 0x01
    1722:	fc 01       	movw	r30, r24
    1724:	80 81       	ld	r24, Z
    1726:	87 7f       	andi	r24, 0xF7	; 247
    1728:	fa 01       	movw	r30, r20
    172a:	80 83       	st	Z, r24

					uint8_t reg_a = *(timer_configs_8_bit[type_index].control_reg_a);
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	88 2f       	mov	r24, r24
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	9c 01       	movw	r18, r24
    1734:	c9 01       	movw	r24, r18
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	9c 01       	movw	r18, r24
    173c:	c9 01       	movw	r24, r18
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	82 1b       	sub	r24, r18
    174c:	93 0b       	sbc	r25, r19
    174e:	86 5e       	subi	r24, 0xE6	; 230
    1750:	9d 4f       	sbci	r25, 0xFD	; 253
    1752:	fc 01       	movw	r30, r24
    1754:	80 81       	ld	r24, Z
    1756:	91 81       	ldd	r25, Z+1	; 0x01
    1758:	fc 01       	movw	r30, r24
    175a:	80 81       	ld	r24, Z
    175c:	8e 83       	std	Y+6, r24	; 0x06

					// clear WGM 01 and set WGM 00
					*(timer_configs_8_bit[type_index].control_reg_a) = (reg_a | (0x1 << WGM00)) & ~(0x1 << WGM01);								
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9c 01       	movw	r18, r24
    1766:	c9 01       	movw	r24, r18
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	9c 01       	movw	r18, r24
    176e:	c9 01       	movw	r24, r18
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	82 1b       	sub	r24, r18
    177e:	93 0b       	sbc	r25, r19
    1780:	86 5e       	subi	r24, 0xE6	; 230
    1782:	9d 4f       	sbci	r25, 0xFD	; 253
    1784:	fc 01       	movw	r30, r24
    1786:	80 81       	ld	r24, Z
    1788:	91 81       	ldd	r25, Z+1	; 0x01
    178a:	2e 81       	ldd	r18, Y+6	; 0x06
    178c:	21 60       	ori	r18, 0x01	; 1
    178e:	2d 7f       	andi	r18, 0xFD	; 253
    1790:	fc 01       	movw	r30, r24
    1792:	20 83       	st	Z, r18

					uint8_t reg_b = timer_configs_8_bit[type_index].control_reg_b;
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	9c 01       	movw	r18, r24
    179c:	c9 01       	movw	r24, r18
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	9c 01       	movw	r18, r24
    17a4:	c9 01       	movw	r24, r18
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	82 1b       	sub	r24, r18
    17b4:	93 0b       	sbc	r25, r19
    17b6:	84 5e       	subi	r24, 0xE4	; 228
    17b8:	9d 4f       	sbci	r25, 0xFD	; 253
    17ba:	fc 01       	movw	r30, r24
    17bc:	80 81       	ld	r24, Z
    17be:	91 81       	ldd	r25, Z+1	; 0x01
    17c0:	8f 83       	std	Y+7, r24	; 0x07
		
					// These two lines makes sure the starting output will be 0V.						
					*(timer_configs_8_bit[type_index].output_compare_a) = 0x00;
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	88 2f       	mov	r24, r24
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	9c 01       	movw	r18, r24
    17ca:	c9 01       	movw	r24, r18
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	9c 01       	movw	r18, r24
    17d2:	c9 01       	movw	r24, r18
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	82 1b       	sub	r24, r18
    17e2:	93 0b       	sbc	r25, r19
    17e4:	80 5e       	subi	r24, 0xE0	; 224
    17e6:	9d 4f       	sbci	r25, 0xFD	; 253
    17e8:	fc 01       	movw	r30, r24
    17ea:	80 81       	ld	r24, Z
    17ec:	91 81       	ldd	r25, Z+1	; 0x01
    17ee:	fc 01       	movw	r30, r24
    17f0:	10 82       	st	Z, r1
					*(timer_configs_8_bit[type_index].output_compare_b) = 0x00;								
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	88 2f       	mov	r24, r24
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	9c 01       	movw	r18, r24
    17fa:	c9 01       	movw	r24, r18
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	9c 01       	movw	r18, r24
    1802:	c9 01       	movw	r24, r18
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	82 1b       	sub	r24, r18
    1812:	93 0b       	sbc	r25, r19
    1814:	8e 5d       	subi	r24, 0xDE	; 222
    1816:	9d 4f       	sbci	r25, 0xFD	; 253
    1818:	fc 01       	movw	r30, r24
    181a:	80 81       	ld	r24, Z
    181c:	91 81       	ldd	r25, Z+1	; 0x01
    181e:	fc 01       	movw	r30, r24
    1820:	10 82       	st	Z, r1
								
					// Start the timer with no prescaling.
					*(timer_configs_8_bit[type_index].control_reg_b) = (reg_b & (0xFF << 3)) | 0b001;
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	88 2f       	mov	r24, r24
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9c 01       	movw	r18, r24
    182a:	c9 01       	movw	r24, r18
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	9c 01       	movw	r18, r24
    1832:	c9 01       	movw	r24, r18
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	82 1b       	sub	r24, r18
    1842:	93 0b       	sbc	r25, r19
    1844:	84 5e       	subi	r24, 0xE4	; 228
    1846:	9d 4f       	sbci	r25, 0xFD	; 253
    1848:	fc 01       	movw	r30, r24
    184a:	80 81       	ld	r24, Z
    184c:	91 81       	ldd	r25, Z+1	; 0x01
    184e:	2f 81       	ldd	r18, Y+7	; 0x07
    1850:	28 7f       	andi	r18, 0xF8	; 248
    1852:	21 60       	ori	r18, 0x01	; 1
    1854:	fc 01       	movw	r30, r24
    1856:	20 83       	st	Z, r18
							
				}
		
				if(timer_channel == 0)
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	88 23       	and	r24, r24
    185c:	a9 f5       	brne	.+106    	; 0x18c8 <morph_config_pwm_start_pwm+0x376>
				{
					uint8_t reg_a = *(timer_configs_8_bit[type_index].control_reg_a);
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	88 2f       	mov	r24, r24
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9c 01       	movw	r18, r24
    1866:	c9 01       	movw	r24, r18
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	9c 01       	movw	r18, r24
    186e:	c9 01       	movw	r24, r18
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	82 1b       	sub	r24, r18
    187e:	93 0b       	sbc	r25, r19
    1880:	86 5e       	subi	r24, 0xE6	; 230
    1882:	9d 4f       	sbci	r25, 0xFD	; 253
    1884:	fc 01       	movw	r30, r24
    1886:	80 81       	ld	r24, Z
    1888:	91 81       	ldd	r25, Z+1	; 0x01
    188a:	fc 01       	movw	r30, r24
    188c:	80 81       	ld	r24, Z
    188e:	88 87       	std	Y+8, r24	; 0x08

					// Verify PWM output is enabled for this channel
					// This sets non-inverting mode on COMnA
					*(timer_configs_8_bit[type_index].control_reg_a) = (reg_a & (0xFF >> (8 - COM0A0))) | 0b10 << COM0A0;
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	88 2f       	mov	r24, r24
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	9c 01       	movw	r18, r24
    1898:	c9 01       	movw	r24, r18
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	9c 01       	movw	r18, r24
    18a0:	c9 01       	movw	r24, r18
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	88 0f       	add	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	82 1b       	sub	r24, r18
    18b0:	93 0b       	sbc	r25, r19
    18b2:	86 5e       	subi	r24, 0xE6	; 230
    18b4:	9d 4f       	sbci	r25, 0xFD	; 253
    18b6:	fc 01       	movw	r30, r24
    18b8:	80 81       	ld	r24, Z
    18ba:	91 81       	ldd	r25, Z+1	; 0x01
    18bc:	28 85       	ldd	r18, Y+8	; 0x08
    18be:	2f 73       	andi	r18, 0x3F	; 63
    18c0:	20 68       	ori	r18, 0x80	; 128
    18c2:	fc 01       	movw	r30, r24
    18c4:	20 83       	st	Z, r18
    18c6:	37 c0       	rjmp	.+110    	; 0x1936 <morph_config_pwm_start_pwm+0x3e4>
				}
				else if(timer_channel == 1)
    18c8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	a1 f5       	brne	.+104    	; 0x1936 <morph_config_pwm_start_pwm+0x3e4>
				{
					uint8_t reg_a = *(timer_configs_8_bit[type_index].control_reg_a);
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	88 2f       	mov	r24, r24
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	9c 01       	movw	r18, r24
    18d6:	c9 01       	movw	r24, r18
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	9c 01       	movw	r18, r24
    18de:	c9 01       	movw	r24, r18
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	82 1b       	sub	r24, r18
    18ee:	93 0b       	sbc	r25, r19
    18f0:	86 5e       	subi	r24, 0xE6	; 230
    18f2:	9d 4f       	sbci	r25, 0xFD	; 253
    18f4:	fc 01       	movw	r30, r24
    18f6:	80 81       	ld	r24, Z
    18f8:	91 81       	ldd	r25, Z+1	; 0x01
    18fa:	fc 01       	movw	r30, r24
    18fc:	80 81       	ld	r24, Z
    18fe:	89 87       	std	Y+9, r24	; 0x09
					// Verify PWM output is enable for this channel
					// This sets non-inverting mode on COMnB
					*(timer_configs_8_bit[type_index].control_reg_a) = (reg_a & (0xFF >> (8 - COM0B0))) | 0b10 << COM0B0;
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	88 2f       	mov	r24, r24
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	9c 01       	movw	r18, r24
    1908:	c9 01       	movw	r24, r18
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	9c 01       	movw	r18, r24
    1910:	c9 01       	movw	r24, r18
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	82 1b       	sub	r24, r18
    1920:	93 0b       	sbc	r25, r19
    1922:	86 5e       	subi	r24, 0xE6	; 230
    1924:	9d 4f       	sbci	r25, 0xFD	; 253
    1926:	fc 01       	movw	r30, r24
    1928:	80 81       	ld	r24, Z
    192a:	91 81       	ldd	r25, Z+1	; 0x01
    192c:	29 85       	ldd	r18, Y+9	; 0x09
    192e:	2f 70       	andi	r18, 0x0F	; 15
    1930:	20 62       	ori	r18, 0x20	; 32
    1932:	fc 01       	movw	r30, r24
    1934:	20 83       	st	Z, r18
				}
		
				morph_config_gpio_set_pin_direction(pn, Output);
    1936:	61 e0       	ldi	r22, 0x01	; 1
    1938:	8a 85       	ldd	r24, Y+10	; 0x0a
    193a:	0e 94 af 02 	call	0x55e	; 0x55e <morph_config_gpio_set_pin_direction>
    193e:	15 c0       	rjmp	.+42     	; 0x196a <morph_config_pwm_start_pwm+0x418>
		
			}
			else if(resolution == 16)
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	80 31       	cpi	r24, 0x10	; 16
    1944:	91 f4       	brne	.+36     	; 0x196a <morph_config_pwm_start_pwm+0x418>
			{
				timer_configs_16_bit[type_index].is_in_use_by_morph_pwm = true;				
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	44 e1       	ldi	r20, 0x14	; 20
    194e:	42 9f       	mul	r20, r18
    1950:	c0 01       	movw	r24, r0
    1952:	43 9f       	mul	r20, r19
    1954:	90 0d       	add	r25, r0
    1956:	11 24       	eor	r1, r1
    1958:	8b 5c       	subi	r24, 0xCB	; 203
    195a:	9d 4f       	sbci	r25, 0xFD	; 253
    195c:	21 e0       	ldi	r18, 0x01	; 1
    195e:	fc 01       	movw	r30, r24
    1960:	20 83       	st	Z, r18
    1962:	03 c0       	rjmp	.+6      	; 0x196a <morph_config_pwm_start_pwm+0x418>

void morph_config_pwm_start_pwm(MorphPinNumber pn)
{
	// First, we've got to figure out if this pin is supported
	if(pn > NUM_PINS)
		return;
    1964:	00 00       	nop
    1966:	01 c0       	rjmp	.+2      	; 0x196a <morph_config_pwm_start_pwm+0x418>
			is_taken = timer_configs_16_bit[type_index].is_in_use;
	
		}
		else
		{
			return; // go away.
    1968:	00 00       	nop
		
		}
		
	}
	
}
    196a:	2a 96       	adiw	r28, 0x0a	; 10
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	08 95       	ret

0000197c <morph_config_pwm_stop_pwm>:

void morph_config_pwm_stop_pwm(MorphPinNumber pn)
{
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	1f 92       	push	r1
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	89 83       	std	Y+1, r24	; 0x01
	
	

	
}
    1988:	00 00       	nop
    198a:	0f 90       	pop	r0
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	08 95       	ret

00001992 <morph_config_pwm_set_pwm_duty_float>:

void morph_config_pwm_set_pwm_duty_float(MorphPinNumber pn, float duty)
{
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	28 97       	sbiw	r28, 0x08	; 8
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	8c 83       	std	Y+4, r24	; 0x04
    19a8:	4d 83       	std	Y+5, r20	; 0x05
    19aa:	5e 83       	std	Y+6, r21	; 0x06
    19ac:	6f 83       	std	Y+7, r22	; 0x07
    19ae:	78 87       	std	Y+8, r23	; 0x08
	int8_t timer_num     = pin_defs[pn - 1].timer_output;
    19b0:	8c 81       	ldd	r24, Y+4	; 0x04
    19b2:	08 2e       	mov	r0, r24
    19b4:	00 0c       	add	r0, r0
    19b6:	99 0b       	sbc	r25, r25
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	9c 01       	movw	r18, r24
    19c0:	22 0f       	add	r18, r18
    19c2:	33 1f       	adc	r19, r19
    19c4:	22 0f       	add	r18, r18
    19c6:	33 1f       	adc	r19, r19
    19c8:	82 0f       	add	r24, r18
    19ca:	93 1f       	adc	r25, r19
    19cc:	88 5f       	subi	r24, 0xF8	; 248
    19ce:	9e 4f       	sbci	r25, 0xFE	; 254
    19d0:	fc 01       	movw	r30, r24
    19d2:	80 81       	ld	r24, Z
    19d4:	89 83       	std	Y+1, r24	; 0x01
	int8_t timer_channel = pin_defs[pn - 1].timer_output_channel;
    19d6:	8c 81       	ldd	r24, Y+4	; 0x04
    19d8:	08 2e       	mov	r0, r24
    19da:	00 0c       	add	r0, r0
    19dc:	99 0b       	sbc	r25, r25
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	9c 01       	movw	r18, r24
    19e6:	22 0f       	add	r18, r18
    19e8:	33 1f       	adc	r19, r19
    19ea:	22 0f       	add	r18, r18
    19ec:	33 1f       	adc	r19, r19
    19ee:	82 0f       	add	r24, r18
    19f0:	93 1f       	adc	r25, r19
    19f2:	87 5f       	subi	r24, 0xF7	; 247
    19f4:	9e 4f       	sbci	r25, 0xFE	; 254
    19f6:	fc 01       	movw	r30, r24
    19f8:	80 81       	ld	r24, Z
    19fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t type_index = 0;
    19fc:	1b 82       	std	Y+3, r1	; 0x03
		
	// This locks the duty between 0.0 and 1.0;
	duty = fmax(fmin(1.0f, duty), 0.0f);
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	9e 81       	ldd	r25, Y+6	; 0x06
    1a02:	af 81       	ldd	r26, Y+7	; 0x07
    1a04:	b8 85       	ldd	r27, Y+8	; 0x08
    1a06:	9c 01       	movw	r18, r24
    1a08:	ad 01       	movw	r20, r26
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	80 e8       	ldi	r24, 0x80	; 128
    1a10:	9f e3       	ldi	r25, 0x3F	; 63
    1a12:	0e 94 02 10 	call	0x2004	; 0x2004 <fmin>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	a9 01       	movw	r20, r18
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <fmax>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	8d 83       	std	Y+5, r24	; 0x05
    1a2e:	9e 83       	std	Y+6, r25	; 0x06
    1a30:	af 83       	std	Y+7, r26	; 0x07
    1a32:	b8 87       	std	Y+8, r27	; 0x08
		
	if(timer_num == 0 || timer_num == 2)
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	88 23       	and	r24, r24
    1a38:	19 f0       	breq	.+6      	; 0x1a40 <morph_config_pwm_set_pwm_duty_float+0xae>
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	82 30       	cpi	r24, 0x02	; 2
    1a3e:	d1 f4       	brne	.+52     	; 0x1a74 <morph_config_pwm_set_pwm_duty_float+0xe2>
	{
		//These are both 8 bit timers.
		set_pwm_raw_8_bit(timer_num, timer_channel, duty * 0xFF);
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	4f e7       	ldi	r20, 0x7F	; 127
    1a46:	53 e4       	ldi	r21, 0x43	; 67
    1a48:	6d 81       	ldd	r22, Y+5	; 0x05
    1a4a:	7e 81       	ldd	r23, Y+6	; 0x06
    1a4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a4e:	98 85       	ldd	r25, Y+8	; 0x08
    1a50:	0e 94 a6 10 	call	0x214c	; 0x214c <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	bc 01       	movw	r22, r24
    1a5a:	cd 01       	movw	r24, r26
    1a5c:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__fixunssfsi>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	28 2f       	mov	r18, r24
    1a66:	9a 81       	ldd	r25, Y+2	; 0x02
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	42 2f       	mov	r20, r18
    1a6c:	69 2f       	mov	r22, r25
    1a6e:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <set_pwm_raw_8_bit>
	{
		// This is a 16 bit timer.
		type_index = 0;
			
	}
}
    1a72:	04 c0       	rjmp	.+8      	; 0x1a7c <morph_config_pwm_set_pwm_duty_float+0xea>
	{
		//These are both 8 bit timers.
		set_pwm_raw_8_bit(timer_num, timer_channel, duty * 0xFF);
			
	}
	else if(timer_num == 1)
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	81 30       	cpi	r24, 0x01	; 1
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <morph_config_pwm_set_pwm_duty_float+0xea>
	{
		// This is a 16 bit timer.
		type_index = 0;
    1a7a:	1b 82       	std	Y+3, r1	; 0x03
			
	}
}
    1a7c:	00 00       	nop
    1a7e:	28 96       	adiw	r28, 0x08	; 8
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	08 95       	ret

00001a90 <morph_config_pwm_set_pwm_duty_64bit>:

void morph_config_pwm_set_pwm_duty_64bit(MorphPinNumber pn, uint64_t duty)
{
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	29 97       	sbiw	r28, 0x09	; 9
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	0a 83       	std	Y+2, r16	; 0x02
    1aac:	1b 83       	std	Y+3, r17	; 0x03
    1aae:	2c 83       	std	Y+4, r18	; 0x04
    1ab0:	3d 83       	std	Y+5, r19	; 0x05
    1ab2:	4e 83       	std	Y+6, r20	; 0x06
    1ab4:	5f 83       	std	Y+7, r21	; 0x07
    1ab6:	68 87       	std	Y+8, r22	; 0x08
    1ab8:	79 87       	std	Y+9, r23	; 0x09
	
}
    1aba:	00 00       	nop
    1abc:	29 96       	adiw	r28, 0x09	; 9
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	08 95       	ret

00001ad2 <morph_config_pwm_set_pwm_duty_32bit>:

void morph_config_pwm_set_pwm_duty_32bit(MorphPinNumber pn, uint32_t duty)
{
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <morph_config_pwm_set_pwm_duty_32bit+0x6>
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <morph_config_pwm_set_pwm_duty_32bit+0x8>
    1ada:	1f 92       	push	r1
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	4a 83       	std	Y+2, r20	; 0x02
    1ae4:	5b 83       	std	Y+3, r21	; 0x03
    1ae6:	6c 83       	std	Y+4, r22	; 0x04
    1ae8:	7d 83       	std	Y+5, r23	; 0x05
	
}
    1aea:	00 00       	nop
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	08 95       	ret

00001afc <morph_config_pwm_set_pwm_duty_16bit>:

void morph_config_pwm_set_pwm_duty_16bit(MorphPinNumber pn, uint16_t duty)
{
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	00 d0       	rcall	.+0      	; 0x1b02 <morph_config_pwm_set_pwm_duty_16bit+0x6>
    1b02:	1f 92       	push	r1
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	7b 83       	std	Y+3, r23	; 0x03
    1b0c:	6a 83       	std	Y+2, r22	; 0x02
	
}
    1b0e:	00 00       	nop
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	08 95       	ret

00001b1c <morph_config_pwm_set_pwm_duty_8bit>:

void morph_config_pwm_set_pwm_duty_8bit (MorphPinNumber pn, uint8_t duty)
{
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <morph_config_pwm_set_pwm_duty_8bit+0x6>
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	6a 83       	std	Y+2, r22	; 0x02
	
}
    1b2a:	00 00       	nop
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	08 95       	ret

00001b36 <morph_config_adc_get_adc_value>:
// ---- PWM END ----

// ---- ADC BEGIN ----

MorphADCValue morph_config_adc_get_adc_value(MorphADCChannel c, MorphADCResolution res)
{
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <morph_config_adc_get_adc_value+0x6>
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	6a 83       	std	Y+2, r22	; 0x02
}
    1b44:	00 00       	nop
    1b46:	bc 01       	movw	r22, r24
    1b48:	cd 01       	movw	r24, r26
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	08 95       	ret

00001b54 <morph_config_adc_get_adc_pin>:

MorphADCValue morph_config_adc_get_adc_pin(MorphPinNumber c, MorphADCResolution res)
{
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	00 d0       	rcall	.+0      	; 0x1b5a <morph_config_adc_get_adc_pin+0x6>
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	89 83       	std	Y+1, r24	; 0x01
    1b60:	6a 83       	std	Y+2, r22	; 0x02
}
    1b62:	00 00       	nop
    1b64:	bc 01       	movw	r22, r24
    1b66:	cd 01       	movw	r24, r26
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	08 95       	ret

00001b72 <morph_config_adc_init_adc>:

void morph_config_adc_init_adc(MorphPinNumber p)
{
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	1f 92       	push	r1
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	89 83       	std	Y+1, r24	; 0x01
}
    1b7e:	00 00       	nop
    1b80:	0f 90       	pop	r0
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	08 95       	ret

00001b88 <morph_config_adc_read>:

MorphADCValue morph_config_adc_read(MorphPinNumber p)
{
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	1f 92       	push	r1
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	89 83       	std	Y+1, r24	; 0x01
}
    1b94:	00 00       	nop
    1b96:	bc 01       	movw	r22, r24
    1b98:	cd 01       	movw	r24, r26
    1b9a:	0f 90       	pop	r0
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	08 95       	ret

00001ba2 <morph_config_adc_set_resolution>:

int8_t morph_config_adc_set_resolution(MorphPinNumber p, MorphADCResolution res)
{
    1ba2:	cf 93       	push	r28
    1ba4:	df 93       	push	r29
    1ba6:	00 d0       	rcall	.+0      	; 0x1ba8 <morph_config_adc_set_resolution+0x6>
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	89 83       	std	Y+1, r24	; 0x01
    1bae:	6a 83       	std	Y+2, r22	; 0x02
}
    1bb0:	00 00       	nop
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	08 95       	ret

00001bbc <morph_config_adc_set_reference>:

void morph_config_adc_set_reference(MorphPinNumber p, enum MorphADCReference ref, uint8_t ref_num)
{
    1bbc:	cf 93       	push	r28
    1bbe:	df 93       	push	r29
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <morph_config_adc_set_reference+0x6>
    1bc2:	1f 92       	push	r1
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	89 83       	std	Y+1, r24	; 0x01
    1bca:	6a 83       	std	Y+2, r22	; 0x02
    1bcc:	4b 83       	std	Y+3, r20	; 0x03
}
    1bce:	00 00       	nop
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	08 95       	ret

00001bdc <morph_config_adc_set_prescaler>:

void morph_config_adc_set_prescaler(MorphPinNumber p, uint16_t prescaler)
{
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <morph_config_adc_set_prescaler+0x6>
    1be2:	1f 92       	push	r1
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	7b 83       	std	Y+3, r23	; 0x03
    1bec:	6a 83       	std	Y+2, r22	; 0x02
}
    1bee:	00 00       	nop
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	08 95       	ret

00001bfc <morph_config_adc_get_maximum_value>:

MorphADCValue morph_config_adc_get_maximum_value(MorphPinNumber p)
{
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	1f 92       	push	r1
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	89 83       	std	Y+1, r24	; 0x01
}
    1c08:	00 00       	nop
    1c0a:	bc 01       	movw	r22, r24
    1c0c:	cd 01       	movw	r24, r26
    1c0e:	0f 90       	pop	r0
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	08 95       	ret

00001c16 <morph_config_init>:

// ---- ADC END ----

void morph_config_init()
{
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
}
    1c1e:	00 00       	nop
    1c20:	df 91       	pop	r29
    1c22:	cf 91       	pop	r28
    1c24:	08 95       	ret

00001c26 <__subsf3>:
    1c26:	50 58       	subi	r21, 0x80	; 128

00001c28 <__addsf3>:
    1c28:	bb 27       	eor	r27, r27
    1c2a:	aa 27       	eor	r26, r26
    1c2c:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__addsf3x>
    1c30:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__fp_round>
    1c34:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__fp_pscA>
    1c38:	38 f0       	brcs	.+14     	; 0x1c48 <__addsf3+0x20>
    1c3a:	0e 94 65 10 	call	0x20ca	; 0x20ca <__fp_pscB>
    1c3e:	20 f0       	brcs	.+8      	; 0x1c48 <__addsf3+0x20>
    1c40:	39 f4       	brne	.+14     	; 0x1c50 <__addsf3+0x28>
    1c42:	9f 3f       	cpi	r25, 0xFF	; 255
    1c44:	19 f4       	brne	.+6      	; 0x1c4c <__addsf3+0x24>
    1c46:	26 f4       	brtc	.+8      	; 0x1c50 <__addsf3+0x28>
    1c48:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <__fp_nan>
    1c4c:	0e f4       	brtc	.+2      	; 0x1c50 <__addsf3+0x28>
    1c4e:	e0 95       	com	r30
    1c50:	e7 fb       	bst	r30, 7
    1c52:	0c 94 45 10 	jmp	0x208a	; 0x208a <__fp_inf>

00001c56 <__addsf3x>:
    1c56:	e9 2f       	mov	r30, r25
    1c58:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__fp_split3>
    1c5c:	58 f3       	brcs	.-42     	; 0x1c34 <__addsf3+0xc>
    1c5e:	ba 17       	cp	r27, r26
    1c60:	62 07       	cpc	r22, r18
    1c62:	73 07       	cpc	r23, r19
    1c64:	84 07       	cpc	r24, r20
    1c66:	95 07       	cpc	r25, r21
    1c68:	20 f0       	brcs	.+8      	; 0x1c72 <__addsf3x+0x1c>
    1c6a:	79 f4       	brne	.+30     	; 0x1c8a <__addsf3x+0x34>
    1c6c:	a6 f5       	brtc	.+104    	; 0x1cd6 <__addsf3x+0x80>
    1c6e:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__fp_zero>
    1c72:	0e f4       	brtc	.+2      	; 0x1c76 <__addsf3x+0x20>
    1c74:	e0 95       	com	r30
    1c76:	0b 2e       	mov	r0, r27
    1c78:	ba 2f       	mov	r27, r26
    1c7a:	a0 2d       	mov	r26, r0
    1c7c:	0b 01       	movw	r0, r22
    1c7e:	b9 01       	movw	r22, r18
    1c80:	90 01       	movw	r18, r0
    1c82:	0c 01       	movw	r0, r24
    1c84:	ca 01       	movw	r24, r20
    1c86:	a0 01       	movw	r20, r0
    1c88:	11 24       	eor	r1, r1
    1c8a:	ff 27       	eor	r31, r31
    1c8c:	59 1b       	sub	r21, r25
    1c8e:	99 f0       	breq	.+38     	; 0x1cb6 <__addsf3x+0x60>
    1c90:	59 3f       	cpi	r21, 0xF9	; 249
    1c92:	50 f4       	brcc	.+20     	; 0x1ca8 <__addsf3x+0x52>
    1c94:	50 3e       	cpi	r21, 0xE0	; 224
    1c96:	68 f1       	brcs	.+90     	; 0x1cf2 <__addsf3x+0x9c>
    1c98:	1a 16       	cp	r1, r26
    1c9a:	f0 40       	sbci	r31, 0x00	; 0
    1c9c:	a2 2f       	mov	r26, r18
    1c9e:	23 2f       	mov	r18, r19
    1ca0:	34 2f       	mov	r19, r20
    1ca2:	44 27       	eor	r20, r20
    1ca4:	58 5f       	subi	r21, 0xF8	; 248
    1ca6:	f3 cf       	rjmp	.-26     	; 0x1c8e <__addsf3x+0x38>
    1ca8:	46 95       	lsr	r20
    1caa:	37 95       	ror	r19
    1cac:	27 95       	ror	r18
    1cae:	a7 95       	ror	r26
    1cb0:	f0 40       	sbci	r31, 0x00	; 0
    1cb2:	53 95       	inc	r21
    1cb4:	c9 f7       	brne	.-14     	; 0x1ca8 <__addsf3x+0x52>
    1cb6:	7e f4       	brtc	.+30     	; 0x1cd6 <__addsf3x+0x80>
    1cb8:	1f 16       	cp	r1, r31
    1cba:	ba 0b       	sbc	r27, r26
    1cbc:	62 0b       	sbc	r22, r18
    1cbe:	73 0b       	sbc	r23, r19
    1cc0:	84 0b       	sbc	r24, r20
    1cc2:	ba f0       	brmi	.+46     	; 0x1cf2 <__addsf3x+0x9c>
    1cc4:	91 50       	subi	r25, 0x01	; 1
    1cc6:	a1 f0       	breq	.+40     	; 0x1cf0 <__addsf3x+0x9a>
    1cc8:	ff 0f       	add	r31, r31
    1cca:	bb 1f       	adc	r27, r27
    1ccc:	66 1f       	adc	r22, r22
    1cce:	77 1f       	adc	r23, r23
    1cd0:	88 1f       	adc	r24, r24
    1cd2:	c2 f7       	brpl	.-16     	; 0x1cc4 <__addsf3x+0x6e>
    1cd4:	0e c0       	rjmp	.+28     	; 0x1cf2 <__addsf3x+0x9c>
    1cd6:	ba 0f       	add	r27, r26
    1cd8:	62 1f       	adc	r22, r18
    1cda:	73 1f       	adc	r23, r19
    1cdc:	84 1f       	adc	r24, r20
    1cde:	48 f4       	brcc	.+18     	; 0x1cf2 <__addsf3x+0x9c>
    1ce0:	87 95       	ror	r24
    1ce2:	77 95       	ror	r23
    1ce4:	67 95       	ror	r22
    1ce6:	b7 95       	ror	r27
    1ce8:	f7 95       	ror	r31
    1cea:	9e 3f       	cpi	r25, 0xFE	; 254
    1cec:	08 f0       	brcs	.+2      	; 0x1cf0 <__addsf3x+0x9a>
    1cee:	b0 cf       	rjmp	.-160    	; 0x1c50 <__addsf3+0x28>
    1cf0:	93 95       	inc	r25
    1cf2:	88 0f       	add	r24, r24
    1cf4:	08 f0       	brcs	.+2      	; 0x1cf8 <__addsf3x+0xa2>
    1cf6:	99 27       	eor	r25, r25
    1cf8:	ee 0f       	add	r30, r30
    1cfa:	97 95       	ror	r25
    1cfc:	87 95       	ror	r24
    1cfe:	08 95       	ret

00001d00 <__cmpsf2>:
    1d00:	0e 94 21 10 	call	0x2042	; 0x2042 <__fp_cmp>
    1d04:	08 f4       	brcc	.+2      	; 0x1d08 <__cmpsf2+0x8>
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	08 95       	ret

00001d0a <__divsf3>:
    1d0a:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__divsf3x>
    1d0e:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__fp_round>
    1d12:	0e 94 65 10 	call	0x20ca	; 0x20ca <__fp_pscB>
    1d16:	58 f0       	brcs	.+22     	; 0x1d2e <__divsf3+0x24>
    1d18:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__fp_pscA>
    1d1c:	40 f0       	brcs	.+16     	; 0x1d2e <__divsf3+0x24>
    1d1e:	29 f4       	brne	.+10     	; 0x1d2a <__divsf3+0x20>
    1d20:	5f 3f       	cpi	r21, 0xFF	; 255
    1d22:	29 f0       	breq	.+10     	; 0x1d2e <__divsf3+0x24>
    1d24:	0c 94 45 10 	jmp	0x208a	; 0x208a <__fp_inf>
    1d28:	51 11       	cpse	r21, r1
    1d2a:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__fp_szero>
    1d2e:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <__fp_nan>

00001d32 <__divsf3x>:
    1d32:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__fp_split3>
    1d36:	68 f3       	brcs	.-38     	; 0x1d12 <__divsf3+0x8>

00001d38 <__divsf3_pse>:
    1d38:	99 23       	and	r25, r25
    1d3a:	b1 f3       	breq	.-20     	; 0x1d28 <__divsf3+0x1e>
    1d3c:	55 23       	and	r21, r21
    1d3e:	91 f3       	breq	.-28     	; 0x1d24 <__divsf3+0x1a>
    1d40:	95 1b       	sub	r25, r21
    1d42:	55 0b       	sbc	r21, r21
    1d44:	bb 27       	eor	r27, r27
    1d46:	aa 27       	eor	r26, r26
    1d48:	62 17       	cp	r22, r18
    1d4a:	73 07       	cpc	r23, r19
    1d4c:	84 07       	cpc	r24, r20
    1d4e:	38 f0       	brcs	.+14     	; 0x1d5e <__divsf3_pse+0x26>
    1d50:	9f 5f       	subi	r25, 0xFF	; 255
    1d52:	5f 4f       	sbci	r21, 0xFF	; 255
    1d54:	22 0f       	add	r18, r18
    1d56:	33 1f       	adc	r19, r19
    1d58:	44 1f       	adc	r20, r20
    1d5a:	aa 1f       	adc	r26, r26
    1d5c:	a9 f3       	breq	.-22     	; 0x1d48 <__divsf3_pse+0x10>
    1d5e:	35 d0       	rcall	.+106    	; 0x1dca <__divsf3_pse+0x92>
    1d60:	0e 2e       	mov	r0, r30
    1d62:	3a f0       	brmi	.+14     	; 0x1d72 <__divsf3_pse+0x3a>
    1d64:	e0 e8       	ldi	r30, 0x80	; 128
    1d66:	32 d0       	rcall	.+100    	; 0x1dcc <__divsf3_pse+0x94>
    1d68:	91 50       	subi	r25, 0x01	; 1
    1d6a:	50 40       	sbci	r21, 0x00	; 0
    1d6c:	e6 95       	lsr	r30
    1d6e:	00 1c       	adc	r0, r0
    1d70:	ca f7       	brpl	.-14     	; 0x1d64 <__divsf3_pse+0x2c>
    1d72:	2b d0       	rcall	.+86     	; 0x1dca <__divsf3_pse+0x92>
    1d74:	fe 2f       	mov	r31, r30
    1d76:	29 d0       	rcall	.+82     	; 0x1dca <__divsf3_pse+0x92>
    1d78:	66 0f       	add	r22, r22
    1d7a:	77 1f       	adc	r23, r23
    1d7c:	88 1f       	adc	r24, r24
    1d7e:	bb 1f       	adc	r27, r27
    1d80:	26 17       	cp	r18, r22
    1d82:	37 07       	cpc	r19, r23
    1d84:	48 07       	cpc	r20, r24
    1d86:	ab 07       	cpc	r26, r27
    1d88:	b0 e8       	ldi	r27, 0x80	; 128
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <__divsf3_pse+0x56>
    1d8c:	bb 0b       	sbc	r27, r27
    1d8e:	80 2d       	mov	r24, r0
    1d90:	bf 01       	movw	r22, r30
    1d92:	ff 27       	eor	r31, r31
    1d94:	93 58       	subi	r25, 0x83	; 131
    1d96:	5f 4f       	sbci	r21, 0xFF	; 255
    1d98:	3a f0       	brmi	.+14     	; 0x1da8 <__divsf3_pse+0x70>
    1d9a:	9e 3f       	cpi	r25, 0xFE	; 254
    1d9c:	51 05       	cpc	r21, r1
    1d9e:	78 f0       	brcs	.+30     	; 0x1dbe <__divsf3_pse+0x86>
    1da0:	0c 94 45 10 	jmp	0x208a	; 0x208a <__fp_inf>
    1da4:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__fp_szero>
    1da8:	5f 3f       	cpi	r21, 0xFF	; 255
    1daa:	e4 f3       	brlt	.-8      	; 0x1da4 <__divsf3_pse+0x6c>
    1dac:	98 3e       	cpi	r25, 0xE8	; 232
    1dae:	d4 f3       	brlt	.-12     	; 0x1da4 <__divsf3_pse+0x6c>
    1db0:	86 95       	lsr	r24
    1db2:	77 95       	ror	r23
    1db4:	67 95       	ror	r22
    1db6:	b7 95       	ror	r27
    1db8:	f7 95       	ror	r31
    1dba:	9f 5f       	subi	r25, 0xFF	; 255
    1dbc:	c9 f7       	brne	.-14     	; 0x1db0 <__divsf3_pse+0x78>
    1dbe:	88 0f       	add	r24, r24
    1dc0:	91 1d       	adc	r25, r1
    1dc2:	96 95       	lsr	r25
    1dc4:	87 95       	ror	r24
    1dc6:	97 f9       	bld	r25, 7
    1dc8:	08 95       	ret
    1dca:	e1 e0       	ldi	r30, 0x01	; 1
    1dcc:	66 0f       	add	r22, r22
    1dce:	77 1f       	adc	r23, r23
    1dd0:	88 1f       	adc	r24, r24
    1dd2:	bb 1f       	adc	r27, r27
    1dd4:	62 17       	cp	r22, r18
    1dd6:	73 07       	cpc	r23, r19
    1dd8:	84 07       	cpc	r24, r20
    1dda:	ba 07       	cpc	r27, r26
    1ddc:	20 f0       	brcs	.+8      	; 0x1de6 <__divsf3_pse+0xae>
    1dde:	62 1b       	sub	r22, r18
    1de0:	73 0b       	sbc	r23, r19
    1de2:	84 0b       	sbc	r24, r20
    1de4:	ba 0b       	sbc	r27, r26
    1de6:	ee 1f       	adc	r30, r30
    1de8:	88 f7       	brcc	.-30     	; 0x1dcc <__divsf3_pse+0x94>
    1dea:	e0 95       	com	r30
    1dec:	08 95       	ret

00001dee <__fixsfdi>:
    1dee:	be e3       	ldi	r27, 0x3E	; 62
    1df0:	04 d0       	rcall	.+8      	; 0x1dfa <__fixunssfdi+0x2>
    1df2:	08 f4       	brcc	.+2      	; 0x1df6 <__fixsfdi+0x8>
    1df4:	90 e8       	ldi	r25, 0x80	; 128
    1df6:	08 95       	ret

00001df8 <__fixunssfdi>:
    1df8:	bf e3       	ldi	r27, 0x3F	; 63
    1dfa:	22 27       	eor	r18, r18
    1dfc:	33 27       	eor	r19, r19
    1dfe:	a9 01       	movw	r20, r18
    1e00:	0e 94 85 10 	call	0x210a	; 0x210a <__fp_splitA>
    1e04:	60 f1       	brcs	.+88     	; 0x1e5e <__fixunssfdi+0x66>
    1e06:	9f 57       	subi	r25, 0x7F	; 127
    1e08:	48 f1       	brcs	.+82     	; 0x1e5c <__fixunssfdi+0x64>
    1e0a:	b9 17       	cp	r27, r25
    1e0c:	40 f1       	brcs	.+80     	; 0x1e5e <__fixunssfdi+0x66>
    1e0e:	bf e3       	ldi	r27, 0x3F	; 63
    1e10:	b9 1b       	sub	r27, r25
    1e12:	99 27       	eor	r25, r25
    1e14:	b8 50       	subi	r27, 0x08	; 8
    1e16:	3a f4       	brpl	.+14     	; 0x1e26 <__fixunssfdi+0x2e>
    1e18:	66 0f       	add	r22, r22
    1e1a:	77 1f       	adc	r23, r23
    1e1c:	88 1f       	adc	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	b3 95       	inc	r27
    1e22:	d2 f3       	brmi	.-12     	; 0x1e18 <__fixunssfdi+0x20>
    1e24:	16 c0       	rjmp	.+44     	; 0x1e52 <__fixunssfdi+0x5a>
    1e26:	b8 50       	subi	r27, 0x08	; 8
    1e28:	4a f0       	brmi	.+18     	; 0x1e3c <__fixunssfdi+0x44>
    1e2a:	23 2f       	mov	r18, r19
    1e2c:	34 2f       	mov	r19, r20
    1e2e:	45 2f       	mov	r20, r21
    1e30:	56 2f       	mov	r21, r22
    1e32:	67 2f       	mov	r22, r23
    1e34:	78 2f       	mov	r23, r24
    1e36:	88 27       	eor	r24, r24
    1e38:	b8 50       	subi	r27, 0x08	; 8
    1e3a:	ba f7       	brpl	.-18     	; 0x1e2a <__fixunssfdi+0x32>
    1e3c:	b8 5f       	subi	r27, 0xF8	; 248
    1e3e:	49 f0       	breq	.+18     	; 0x1e52 <__fixunssfdi+0x5a>
    1e40:	86 95       	lsr	r24
    1e42:	77 95       	ror	r23
    1e44:	67 95       	ror	r22
    1e46:	57 95       	ror	r21
    1e48:	47 95       	ror	r20
    1e4a:	37 95       	ror	r19
    1e4c:	27 95       	ror	r18
    1e4e:	ba 95       	dec	r27
    1e50:	b9 f7       	brne	.-18     	; 0x1e40 <__fixunssfdi+0x48>
    1e52:	16 f4       	brtc	.+4      	; 0x1e58 <__fixunssfdi+0x60>
    1e54:	0e 94 4e 10 	call	0x209c	; 0x209c <__fp_negdi>
    1e58:	88 94       	clc
    1e5a:	08 95       	ret
    1e5c:	88 94       	clc
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	70 e0       	ldi	r23, 0x00	; 0
    1e62:	cb 01       	movw	r24, r22
    1e64:	08 95       	ret

00001e66 <__fixunssfsi>:
    1e66:	0e 94 85 10 	call	0x210a	; 0x210a <__fp_splitA>
    1e6a:	88 f0       	brcs	.+34     	; 0x1e8e <__fixunssfsi+0x28>
    1e6c:	9f 57       	subi	r25, 0x7F	; 127
    1e6e:	98 f0       	brcs	.+38     	; 0x1e96 <__fixunssfsi+0x30>
    1e70:	b9 2f       	mov	r27, r25
    1e72:	99 27       	eor	r25, r25
    1e74:	b7 51       	subi	r27, 0x17	; 23
    1e76:	b0 f0       	brcs	.+44     	; 0x1ea4 <__fixunssfsi+0x3e>
    1e78:	e1 f0       	breq	.+56     	; 0x1eb2 <__fixunssfsi+0x4c>
    1e7a:	66 0f       	add	r22, r22
    1e7c:	77 1f       	adc	r23, r23
    1e7e:	88 1f       	adc	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	1a f0       	brmi	.+6      	; 0x1e8a <__fixunssfsi+0x24>
    1e84:	ba 95       	dec	r27
    1e86:	c9 f7       	brne	.-14     	; 0x1e7a <__fixunssfsi+0x14>
    1e88:	14 c0       	rjmp	.+40     	; 0x1eb2 <__fixunssfsi+0x4c>
    1e8a:	b1 30       	cpi	r27, 0x01	; 1
    1e8c:	91 f0       	breq	.+36     	; 0x1eb2 <__fixunssfsi+0x4c>
    1e8e:	0e 94 9f 10 	call	0x213e	; 0x213e <__fp_zero>
    1e92:	b1 e0       	ldi	r27, 0x01	; 1
    1e94:	08 95       	ret
    1e96:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__fp_zero>
    1e9a:	67 2f       	mov	r22, r23
    1e9c:	78 2f       	mov	r23, r24
    1e9e:	88 27       	eor	r24, r24
    1ea0:	b8 5f       	subi	r27, 0xF8	; 248
    1ea2:	39 f0       	breq	.+14     	; 0x1eb2 <__fixunssfsi+0x4c>
    1ea4:	b9 3f       	cpi	r27, 0xF9	; 249
    1ea6:	cc f3       	brlt	.-14     	; 0x1e9a <__fixunssfsi+0x34>
    1ea8:	86 95       	lsr	r24
    1eaa:	77 95       	ror	r23
    1eac:	67 95       	ror	r22
    1eae:	b3 95       	inc	r27
    1eb0:	d9 f7       	brne	.-10     	; 0x1ea8 <__fixunssfsi+0x42>
    1eb2:	3e f4       	brtc	.+14     	; 0x1ec2 <__fixunssfsi+0x5c>
    1eb4:	90 95       	com	r25
    1eb6:	80 95       	com	r24
    1eb8:	70 95       	com	r23
    1eba:	61 95       	neg	r22
    1ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebe:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec2:	08 95       	ret

00001ec4 <__floatdisf>:
    1ec4:	97 fb       	bst	r25, 7
    1ec6:	16 f4       	brtc	.+4      	; 0x1ecc <__floatdisf+0x8>
    1ec8:	0e 94 4e 10 	call	0x209c	; 0x209c <__fp_negdi>
    1ecc:	0c 94 a6 0f 	jmp	0x1f4c	; 0x1f4c <__fp_di2sf>

00001ed0 <__floatunsisf>:
    1ed0:	e8 94       	clt
    1ed2:	09 c0       	rjmp	.+18     	; 0x1ee6 <__floatsisf+0x12>

00001ed4 <__floatsisf>:
    1ed4:	97 fb       	bst	r25, 7
    1ed6:	3e f4       	brtc	.+14     	; 0x1ee6 <__floatsisf+0x12>
    1ed8:	90 95       	com	r25
    1eda:	80 95       	com	r24
    1edc:	70 95       	com	r23
    1ede:	61 95       	neg	r22
    1ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee6:	99 23       	and	r25, r25
    1ee8:	a9 f0       	breq	.+42     	; 0x1f14 <__floatsisf+0x40>
    1eea:	f9 2f       	mov	r31, r25
    1eec:	96 e9       	ldi	r25, 0x96	; 150
    1eee:	bb 27       	eor	r27, r27
    1ef0:	93 95       	inc	r25
    1ef2:	f6 95       	lsr	r31
    1ef4:	87 95       	ror	r24
    1ef6:	77 95       	ror	r23
    1ef8:	67 95       	ror	r22
    1efa:	b7 95       	ror	r27
    1efc:	f1 11       	cpse	r31, r1
    1efe:	f8 cf       	rjmp	.-16     	; 0x1ef0 <__floatsisf+0x1c>
    1f00:	fa f4       	brpl	.+62     	; 0x1f40 <__floatsisf+0x6c>
    1f02:	bb 0f       	add	r27, r27
    1f04:	11 f4       	brne	.+4      	; 0x1f0a <__floatsisf+0x36>
    1f06:	60 ff       	sbrs	r22, 0
    1f08:	1b c0       	rjmp	.+54     	; 0x1f40 <__floatsisf+0x6c>
    1f0a:	6f 5f       	subi	r22, 0xFF	; 255
    1f0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f10:	9f 4f       	sbci	r25, 0xFF	; 255
    1f12:	16 c0       	rjmp	.+44     	; 0x1f40 <__floatsisf+0x6c>
    1f14:	88 23       	and	r24, r24
    1f16:	11 f0       	breq	.+4      	; 0x1f1c <__floatsisf+0x48>
    1f18:	96 e9       	ldi	r25, 0x96	; 150
    1f1a:	11 c0       	rjmp	.+34     	; 0x1f3e <__floatsisf+0x6a>
    1f1c:	77 23       	and	r23, r23
    1f1e:	21 f0       	breq	.+8      	; 0x1f28 <__floatsisf+0x54>
    1f20:	9e e8       	ldi	r25, 0x8E	; 142
    1f22:	87 2f       	mov	r24, r23
    1f24:	76 2f       	mov	r23, r22
    1f26:	05 c0       	rjmp	.+10     	; 0x1f32 <__floatsisf+0x5e>
    1f28:	66 23       	and	r22, r22
    1f2a:	71 f0       	breq	.+28     	; 0x1f48 <__floatsisf+0x74>
    1f2c:	96 e8       	ldi	r25, 0x86	; 134
    1f2e:	86 2f       	mov	r24, r22
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	2a f0       	brmi	.+10     	; 0x1f40 <__floatsisf+0x6c>
    1f36:	9a 95       	dec	r25
    1f38:	66 0f       	add	r22, r22
    1f3a:	77 1f       	adc	r23, r23
    1f3c:	88 1f       	adc	r24, r24
    1f3e:	da f7       	brpl	.-10     	; 0x1f36 <__floatsisf+0x62>
    1f40:	88 0f       	add	r24, r24
    1f42:	96 95       	lsr	r25
    1f44:	87 95       	ror	r24
    1f46:	97 f9       	bld	r25, 7
    1f48:	08 95       	ret

00001f4a <__floatundisf>:
    1f4a:	e8 94       	clt

00001f4c <__fp_di2sf>:
    1f4c:	f9 2f       	mov	r31, r25
    1f4e:	96 eb       	ldi	r25, 0xB6	; 182
    1f50:	ff 23       	and	r31, r31
    1f52:	81 f0       	breq	.+32     	; 0x1f74 <__fp_di2sf+0x28>
    1f54:	12 16       	cp	r1, r18
    1f56:	13 06       	cpc	r1, r19
    1f58:	14 06       	cpc	r1, r20
    1f5a:	44 0b       	sbc	r20, r20
    1f5c:	93 95       	inc	r25
    1f5e:	f6 95       	lsr	r31
    1f60:	87 95       	ror	r24
    1f62:	77 95       	ror	r23
    1f64:	67 95       	ror	r22
    1f66:	57 95       	ror	r21
    1f68:	40 40       	sbci	r20, 0x00	; 0
    1f6a:	ff 23       	and	r31, r31
    1f6c:	b9 f7       	brne	.-18     	; 0x1f5c <__fp_di2sf+0x10>
    1f6e:	1b c0       	rjmp	.+54     	; 0x1fa6 <__fp_di2sf+0x5a>
    1f70:	99 27       	eor	r25, r25
    1f72:	08 95       	ret
    1f74:	88 23       	and	r24, r24
    1f76:	51 f4       	brne	.+20     	; 0x1f8c <__fp_di2sf+0x40>
    1f78:	98 50       	subi	r25, 0x08	; 8
    1f7a:	d2 f7       	brpl	.-12     	; 0x1f70 <__fp_di2sf+0x24>
    1f7c:	87 2b       	or	r24, r23
    1f7e:	76 2f       	mov	r23, r22
    1f80:	65 2f       	mov	r22, r21
    1f82:	54 2f       	mov	r21, r20
    1f84:	43 2f       	mov	r20, r19
    1f86:	32 2f       	mov	r19, r18
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	b1 f3       	breq	.-20     	; 0x1f78 <__fp_di2sf+0x2c>
    1f8c:	12 16       	cp	r1, r18
    1f8e:	13 06       	cpc	r1, r19
    1f90:	14 06       	cpc	r1, r20
    1f92:	44 0b       	sbc	r20, r20
    1f94:	88 23       	and	r24, r24
    1f96:	3a f0       	brmi	.+14     	; 0x1fa6 <__fp_di2sf+0x5a>
    1f98:	9a 95       	dec	r25
    1f9a:	44 0f       	add	r20, r20
    1f9c:	55 1f       	adc	r21, r21
    1f9e:	66 1f       	adc	r22, r22
    1fa0:	77 1f       	adc	r23, r23
    1fa2:	88 1f       	adc	r24, r24
    1fa4:	ca f7       	brpl	.-14     	; 0x1f98 <__fp_di2sf+0x4c>
    1fa6:	55 23       	and	r21, r21
    1fa8:	4a f4       	brpl	.+18     	; 0x1fbc <__fp_di2sf+0x70>
    1faa:	44 0f       	add	r20, r20
    1fac:	55 1f       	adc	r21, r21
    1fae:	11 f4       	brne	.+4      	; 0x1fb4 <__fp_di2sf+0x68>
    1fb0:	60 ff       	sbrs	r22, 0
    1fb2:	04 c0       	rjmp	.+8      	; 0x1fbc <__fp_di2sf+0x70>
    1fb4:	6f 5f       	subi	r22, 0xFF	; 255
    1fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fba:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbc:	88 0f       	add	r24, r24
    1fbe:	96 95       	lsr	r25
    1fc0:	87 95       	ror	r24
    1fc2:	97 f9       	bld	r25, 7
    1fc4:	08 95       	ret

00001fc6 <fmax>:
    1fc6:	99 0f       	add	r25, r25
    1fc8:	bb 0b       	sbc	r27, r27
    1fca:	55 0f       	add	r21, r21
    1fcc:	aa 0b       	sbc	r26, r26
    1fce:	e0 e8       	ldi	r30, 0x80	; 128
    1fd0:	fe ef       	ldi	r31, 0xFE	; 254
    1fd2:	16 16       	cp	r1, r22
    1fd4:	17 06       	cpc	r1, r23
    1fd6:	e8 07       	cpc	r30, r24
    1fd8:	f9 07       	cpc	r31, r25
    1fda:	70 f0       	brcs	.+28     	; 0x1ff8 <fmax+0x32>
    1fdc:	12 16       	cp	r1, r18
    1fde:	13 06       	cpc	r1, r19
    1fe0:	e4 07       	cpc	r30, r20
    1fe2:	f5 07       	cpc	r31, r21
    1fe4:	60 f0       	brcs	.+24     	; 0x1ffe <fmax+0x38>
    1fe6:	ba 17       	cp	r27, r26
    1fe8:	3c f0       	brlt	.+14     	; 0x1ff8 <fmax+0x32>
    1fea:	49 f4       	brne	.+18     	; 0x1ffe <fmax+0x38>
    1fec:	62 17       	cp	r22, r18
    1fee:	73 07       	cpc	r23, r19
    1ff0:	84 07       	cpc	r24, r20
    1ff2:	95 07       	cpc	r25, r21
    1ff4:	a7 95       	ror	r26
    1ff6:	1b f4       	brvc	.+6      	; 0x1ffe <fmax+0x38>
    1ff8:	b9 01       	movw	r22, r18
    1ffa:	ca 01       	movw	r24, r20
    1ffc:	ba 2f       	mov	r27, r26
    1ffe:	b6 95       	lsr	r27
    2000:	97 95       	ror	r25
    2002:	08 95       	ret

00002004 <fmin>:
    2004:	99 0f       	add	r25, r25
    2006:	bb 0b       	sbc	r27, r27
    2008:	55 0f       	add	r21, r21
    200a:	aa 0b       	sbc	r26, r26
    200c:	e0 e8       	ldi	r30, 0x80	; 128
    200e:	fe ef       	ldi	r31, 0xFE	; 254
    2010:	16 16       	cp	r1, r22
    2012:	17 06       	cpc	r1, r23
    2014:	e8 07       	cpc	r30, r24
    2016:	f9 07       	cpc	r31, r25
    2018:	70 f0       	brcs	.+28     	; 0x2036 <fmin+0x32>
    201a:	12 16       	cp	r1, r18
    201c:	13 06       	cpc	r1, r19
    201e:	e4 07       	cpc	r30, r20
    2020:	f5 07       	cpc	r31, r21
    2022:	60 f0       	brcs	.+24     	; 0x203c <fmin+0x38>
    2024:	ba 17       	cp	r27, r26
    2026:	54 f0       	brlt	.+20     	; 0x203c <fmin+0x38>
    2028:	31 f4       	brne	.+12     	; 0x2036 <fmin+0x32>
    202a:	26 17       	cp	r18, r22
    202c:	37 07       	cpc	r19, r23
    202e:	48 07       	cpc	r20, r24
    2030:	59 07       	cpc	r21, r25
    2032:	a7 95       	ror	r26
    2034:	1b f4       	brvc	.+6      	; 0x203c <fmin+0x38>
    2036:	b9 01       	movw	r22, r18
    2038:	ca 01       	movw	r24, r20
    203a:	ba 2f       	mov	r27, r26
    203c:	b6 95       	lsr	r27
    203e:	97 95       	ror	r25
    2040:	08 95       	ret

00002042 <__fp_cmp>:
    2042:	99 0f       	add	r25, r25
    2044:	00 08       	sbc	r0, r0
    2046:	55 0f       	add	r21, r21
    2048:	aa 0b       	sbc	r26, r26
    204a:	e0 e8       	ldi	r30, 0x80	; 128
    204c:	fe ef       	ldi	r31, 0xFE	; 254
    204e:	16 16       	cp	r1, r22
    2050:	17 06       	cpc	r1, r23
    2052:	e8 07       	cpc	r30, r24
    2054:	f9 07       	cpc	r31, r25
    2056:	c0 f0       	brcs	.+48     	; 0x2088 <__fp_cmp+0x46>
    2058:	12 16       	cp	r1, r18
    205a:	13 06       	cpc	r1, r19
    205c:	e4 07       	cpc	r30, r20
    205e:	f5 07       	cpc	r31, r21
    2060:	98 f0       	brcs	.+38     	; 0x2088 <__fp_cmp+0x46>
    2062:	62 1b       	sub	r22, r18
    2064:	73 0b       	sbc	r23, r19
    2066:	84 0b       	sbc	r24, r20
    2068:	95 0b       	sbc	r25, r21
    206a:	39 f4       	brne	.+14     	; 0x207a <__fp_cmp+0x38>
    206c:	0a 26       	eor	r0, r26
    206e:	61 f0       	breq	.+24     	; 0x2088 <__fp_cmp+0x46>
    2070:	23 2b       	or	r18, r19
    2072:	24 2b       	or	r18, r20
    2074:	25 2b       	or	r18, r21
    2076:	21 f4       	brne	.+8      	; 0x2080 <__fp_cmp+0x3e>
    2078:	08 95       	ret
    207a:	0a 26       	eor	r0, r26
    207c:	09 f4       	brne	.+2      	; 0x2080 <__fp_cmp+0x3e>
    207e:	a1 40       	sbci	r26, 0x01	; 1
    2080:	a6 95       	lsr	r26
    2082:	8f ef       	ldi	r24, 0xFF	; 255
    2084:	81 1d       	adc	r24, r1
    2086:	81 1d       	adc	r24, r1
    2088:	08 95       	ret

0000208a <__fp_inf>:
    208a:	97 f9       	bld	r25, 7
    208c:	9f 67       	ori	r25, 0x7F	; 127
    208e:	80 e8       	ldi	r24, 0x80	; 128
    2090:	70 e0       	ldi	r23, 0x00	; 0
    2092:	60 e0       	ldi	r22, 0x00	; 0
    2094:	08 95       	ret

00002096 <__fp_nan>:
    2096:	9f ef       	ldi	r25, 0xFF	; 255
    2098:	80 ec       	ldi	r24, 0xC0	; 192
    209a:	08 95       	ret

0000209c <__fp_negdi>:
    209c:	90 95       	com	r25
    209e:	80 95       	com	r24
    20a0:	70 95       	com	r23
    20a2:	60 95       	com	r22
    20a4:	50 95       	com	r21
    20a6:	40 95       	com	r20
    20a8:	30 95       	com	r19
    20aa:	21 95       	neg	r18
    20ac:	3f 4f       	sbci	r19, 0xFF	; 255
    20ae:	4f 4f       	sbci	r20, 0xFF	; 255
    20b0:	5f 4f       	sbci	r21, 0xFF	; 255
    20b2:	6f 4f       	sbci	r22, 0xFF	; 255
    20b4:	7f 4f       	sbci	r23, 0xFF	; 255
    20b6:	8f 4f       	sbci	r24, 0xFF	; 255
    20b8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ba:	08 95       	ret

000020bc <__fp_pscA>:
    20bc:	00 24       	eor	r0, r0
    20be:	0a 94       	dec	r0
    20c0:	16 16       	cp	r1, r22
    20c2:	17 06       	cpc	r1, r23
    20c4:	18 06       	cpc	r1, r24
    20c6:	09 06       	cpc	r0, r25
    20c8:	08 95       	ret

000020ca <__fp_pscB>:
    20ca:	00 24       	eor	r0, r0
    20cc:	0a 94       	dec	r0
    20ce:	12 16       	cp	r1, r18
    20d0:	13 06       	cpc	r1, r19
    20d2:	14 06       	cpc	r1, r20
    20d4:	05 06       	cpc	r0, r21
    20d6:	08 95       	ret

000020d8 <__fp_round>:
    20d8:	09 2e       	mov	r0, r25
    20da:	03 94       	inc	r0
    20dc:	00 0c       	add	r0, r0
    20de:	11 f4       	brne	.+4      	; 0x20e4 <__fp_round+0xc>
    20e0:	88 23       	and	r24, r24
    20e2:	52 f0       	brmi	.+20     	; 0x20f8 <__fp_round+0x20>
    20e4:	bb 0f       	add	r27, r27
    20e6:	40 f4       	brcc	.+16     	; 0x20f8 <__fp_round+0x20>
    20e8:	bf 2b       	or	r27, r31
    20ea:	11 f4       	brne	.+4      	; 0x20f0 <__fp_round+0x18>
    20ec:	60 ff       	sbrs	r22, 0
    20ee:	04 c0       	rjmp	.+8      	; 0x20f8 <__fp_round+0x20>
    20f0:	6f 5f       	subi	r22, 0xFF	; 255
    20f2:	7f 4f       	sbci	r23, 0xFF	; 255
    20f4:	8f 4f       	sbci	r24, 0xFF	; 255
    20f6:	9f 4f       	sbci	r25, 0xFF	; 255
    20f8:	08 95       	ret

000020fa <__fp_split3>:
    20fa:	57 fd       	sbrc	r21, 7
    20fc:	90 58       	subi	r25, 0x80	; 128
    20fe:	44 0f       	add	r20, r20
    2100:	55 1f       	adc	r21, r21
    2102:	59 f0       	breq	.+22     	; 0x211a <__fp_splitA+0x10>
    2104:	5f 3f       	cpi	r21, 0xFF	; 255
    2106:	71 f0       	breq	.+28     	; 0x2124 <__fp_splitA+0x1a>
    2108:	47 95       	ror	r20

0000210a <__fp_splitA>:
    210a:	88 0f       	add	r24, r24
    210c:	97 fb       	bst	r25, 7
    210e:	99 1f       	adc	r25, r25
    2110:	61 f0       	breq	.+24     	; 0x212a <__fp_splitA+0x20>
    2112:	9f 3f       	cpi	r25, 0xFF	; 255
    2114:	79 f0       	breq	.+30     	; 0x2134 <__fp_splitA+0x2a>
    2116:	87 95       	ror	r24
    2118:	08 95       	ret
    211a:	12 16       	cp	r1, r18
    211c:	13 06       	cpc	r1, r19
    211e:	14 06       	cpc	r1, r20
    2120:	55 1f       	adc	r21, r21
    2122:	f2 cf       	rjmp	.-28     	; 0x2108 <__fp_split3+0xe>
    2124:	46 95       	lsr	r20
    2126:	f1 df       	rcall	.-30     	; 0x210a <__fp_splitA>
    2128:	08 c0       	rjmp	.+16     	; 0x213a <__fp_splitA+0x30>
    212a:	16 16       	cp	r1, r22
    212c:	17 06       	cpc	r1, r23
    212e:	18 06       	cpc	r1, r24
    2130:	99 1f       	adc	r25, r25
    2132:	f1 cf       	rjmp	.-30     	; 0x2116 <__fp_splitA+0xc>
    2134:	86 95       	lsr	r24
    2136:	71 05       	cpc	r23, r1
    2138:	61 05       	cpc	r22, r1
    213a:	08 94       	sec
    213c:	08 95       	ret

0000213e <__fp_zero>:
    213e:	e8 94       	clt

00002140 <__fp_szero>:
    2140:	bb 27       	eor	r27, r27
    2142:	66 27       	eor	r22, r22
    2144:	77 27       	eor	r23, r23
    2146:	cb 01       	movw	r24, r22
    2148:	97 f9       	bld	r25, 7
    214a:	08 95       	ret

0000214c <__mulsf3>:
    214c:	0e 94 b9 10 	call	0x2172	; 0x2172 <__mulsf3x>
    2150:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__fp_round>
    2154:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__fp_pscA>
    2158:	38 f0       	brcs	.+14     	; 0x2168 <__mulsf3+0x1c>
    215a:	0e 94 65 10 	call	0x20ca	; 0x20ca <__fp_pscB>
    215e:	20 f0       	brcs	.+8      	; 0x2168 <__mulsf3+0x1c>
    2160:	95 23       	and	r25, r21
    2162:	11 f0       	breq	.+4      	; 0x2168 <__mulsf3+0x1c>
    2164:	0c 94 45 10 	jmp	0x208a	; 0x208a <__fp_inf>
    2168:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <__fp_nan>
    216c:	11 24       	eor	r1, r1
    216e:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__fp_szero>

00002172 <__mulsf3x>:
    2172:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__fp_split3>
    2176:	70 f3       	brcs	.-36     	; 0x2154 <__mulsf3+0x8>

00002178 <__mulsf3_pse>:
    2178:	95 9f       	mul	r25, r21
    217a:	c1 f3       	breq	.-16     	; 0x216c <__mulsf3+0x20>
    217c:	95 0f       	add	r25, r21
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	55 1f       	adc	r21, r21
    2182:	62 9f       	mul	r22, r18
    2184:	f0 01       	movw	r30, r0
    2186:	72 9f       	mul	r23, r18
    2188:	bb 27       	eor	r27, r27
    218a:	f0 0d       	add	r31, r0
    218c:	b1 1d       	adc	r27, r1
    218e:	63 9f       	mul	r22, r19
    2190:	aa 27       	eor	r26, r26
    2192:	f0 0d       	add	r31, r0
    2194:	b1 1d       	adc	r27, r1
    2196:	aa 1f       	adc	r26, r26
    2198:	64 9f       	mul	r22, r20
    219a:	66 27       	eor	r22, r22
    219c:	b0 0d       	add	r27, r0
    219e:	a1 1d       	adc	r26, r1
    21a0:	66 1f       	adc	r22, r22
    21a2:	82 9f       	mul	r24, r18
    21a4:	22 27       	eor	r18, r18
    21a6:	b0 0d       	add	r27, r0
    21a8:	a1 1d       	adc	r26, r1
    21aa:	62 1f       	adc	r22, r18
    21ac:	73 9f       	mul	r23, r19
    21ae:	b0 0d       	add	r27, r0
    21b0:	a1 1d       	adc	r26, r1
    21b2:	62 1f       	adc	r22, r18
    21b4:	83 9f       	mul	r24, r19
    21b6:	a0 0d       	add	r26, r0
    21b8:	61 1d       	adc	r22, r1
    21ba:	22 1f       	adc	r18, r18
    21bc:	74 9f       	mul	r23, r20
    21be:	33 27       	eor	r19, r19
    21c0:	a0 0d       	add	r26, r0
    21c2:	61 1d       	adc	r22, r1
    21c4:	23 1f       	adc	r18, r19
    21c6:	84 9f       	mul	r24, r20
    21c8:	60 0d       	add	r22, r0
    21ca:	21 1d       	adc	r18, r1
    21cc:	82 2f       	mov	r24, r18
    21ce:	76 2f       	mov	r23, r22
    21d0:	6a 2f       	mov	r22, r26
    21d2:	11 24       	eor	r1, r1
    21d4:	9f 57       	subi	r25, 0x7F	; 127
    21d6:	50 40       	sbci	r21, 0x00	; 0
    21d8:	9a f0       	brmi	.+38     	; 0x2200 <__mulsf3_pse+0x88>
    21da:	f1 f0       	breq	.+60     	; 0x2218 <__mulsf3_pse+0xa0>
    21dc:	88 23       	and	r24, r24
    21de:	4a f0       	brmi	.+18     	; 0x21f2 <__mulsf3_pse+0x7a>
    21e0:	ee 0f       	add	r30, r30
    21e2:	ff 1f       	adc	r31, r31
    21e4:	bb 1f       	adc	r27, r27
    21e6:	66 1f       	adc	r22, r22
    21e8:	77 1f       	adc	r23, r23
    21ea:	88 1f       	adc	r24, r24
    21ec:	91 50       	subi	r25, 0x01	; 1
    21ee:	50 40       	sbci	r21, 0x00	; 0
    21f0:	a9 f7       	brne	.-22     	; 0x21dc <__mulsf3_pse+0x64>
    21f2:	9e 3f       	cpi	r25, 0xFE	; 254
    21f4:	51 05       	cpc	r21, r1
    21f6:	80 f0       	brcs	.+32     	; 0x2218 <__mulsf3_pse+0xa0>
    21f8:	0c 94 45 10 	jmp	0x208a	; 0x208a <__fp_inf>
    21fc:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__fp_szero>
    2200:	5f 3f       	cpi	r21, 0xFF	; 255
    2202:	e4 f3       	brlt	.-8      	; 0x21fc <__mulsf3_pse+0x84>
    2204:	98 3e       	cpi	r25, 0xE8	; 232
    2206:	d4 f3       	brlt	.-12     	; 0x21fc <__mulsf3_pse+0x84>
    2208:	86 95       	lsr	r24
    220a:	77 95       	ror	r23
    220c:	67 95       	ror	r22
    220e:	b7 95       	ror	r27
    2210:	f7 95       	ror	r31
    2212:	e7 95       	ror	r30
    2214:	9f 5f       	subi	r25, 0xFF	; 255
    2216:	c1 f7       	brne	.-16     	; 0x2208 <__mulsf3_pse+0x90>
    2218:	fe 2b       	or	r31, r30
    221a:	88 0f       	add	r24, r24
    221c:	91 1d       	adc	r25, r1
    221e:	96 95       	lsr	r25
    2220:	87 95       	ror	r24
    2222:	97 f9       	bld	r25, 7
    2224:	08 95       	ret

00002226 <sin>:
    2226:	9f 93       	push	r25
    2228:	0e 94 1d 11 	call	0x223a	; 0x223a <__fp_rempio2>
    222c:	0f 90       	pop	r0
    222e:	07 fc       	sbrc	r0, 7
    2230:	ee 5f       	subi	r30, 0xFE	; 254
    2232:	0c 94 46 11 	jmp	0x228c	; 0x228c <__fp_sinus>
    2236:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <__fp_nan>

0000223a <__fp_rempio2>:
    223a:	0e 94 85 10 	call	0x210a	; 0x210a <__fp_splitA>
    223e:	d8 f3       	brcs	.-10     	; 0x2236 <sin+0x10>
    2240:	e8 94       	clt
    2242:	e0 e0       	ldi	r30, 0x00	; 0
    2244:	bb 27       	eor	r27, r27
    2246:	9f 57       	subi	r25, 0x7F	; 127
    2248:	f0 f0       	brcs	.+60     	; 0x2286 <__fp_rempio2+0x4c>
    224a:	2a ed       	ldi	r18, 0xDA	; 218
    224c:	3f e0       	ldi	r19, 0x0F	; 15
    224e:	49 ec       	ldi	r20, 0xC9	; 201
    2250:	06 c0       	rjmp	.+12     	; 0x225e <__fp_rempio2+0x24>
    2252:	ee 0f       	add	r30, r30
    2254:	bb 0f       	add	r27, r27
    2256:	66 1f       	adc	r22, r22
    2258:	77 1f       	adc	r23, r23
    225a:	88 1f       	adc	r24, r24
    225c:	28 f0       	brcs	.+10     	; 0x2268 <__fp_rempio2+0x2e>
    225e:	b2 3a       	cpi	r27, 0xA2	; 162
    2260:	62 07       	cpc	r22, r18
    2262:	73 07       	cpc	r23, r19
    2264:	84 07       	cpc	r24, r20
    2266:	28 f0       	brcs	.+10     	; 0x2272 <__fp_rempio2+0x38>
    2268:	b2 5a       	subi	r27, 0xA2	; 162
    226a:	62 0b       	sbc	r22, r18
    226c:	73 0b       	sbc	r23, r19
    226e:	84 0b       	sbc	r24, r20
    2270:	e3 95       	inc	r30
    2272:	9a 95       	dec	r25
    2274:	72 f7       	brpl	.-36     	; 0x2252 <__fp_rempio2+0x18>
    2276:	80 38       	cpi	r24, 0x80	; 128
    2278:	30 f4       	brcc	.+12     	; 0x2286 <__fp_rempio2+0x4c>
    227a:	9a 95       	dec	r25
    227c:	bb 0f       	add	r27, r27
    227e:	66 1f       	adc	r22, r22
    2280:	77 1f       	adc	r23, r23
    2282:	88 1f       	adc	r24, r24
    2284:	d2 f7       	brpl	.-12     	; 0x227a <__fp_rempio2+0x40>
    2286:	90 48       	sbci	r25, 0x80	; 128
    2288:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__fp_mpack_finite>

0000228c <__fp_sinus>:
    228c:	ef 93       	push	r30
    228e:	e0 ff       	sbrs	r30, 0
    2290:	07 c0       	rjmp	.+14     	; 0x22a0 <__fp_sinus+0x14>
    2292:	a2 ea       	ldi	r26, 0xA2	; 162
    2294:	2a ed       	ldi	r18, 0xDA	; 218
    2296:	3f e0       	ldi	r19, 0x0F	; 15
    2298:	49 ec       	ldi	r20, 0xC9	; 201
    229a:	5f eb       	ldi	r21, 0xBF	; 191
    229c:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__addsf3x>
    22a0:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__fp_round>
    22a4:	0f 90       	pop	r0
    22a6:	03 94       	inc	r0
    22a8:	01 fc       	sbrc	r0, 1
    22aa:	90 58       	subi	r25, 0x80	; 128
    22ac:	e8 e6       	ldi	r30, 0x68	; 104
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__fp_powsodd>

000022b4 <__fp_mpack>:
    22b4:	9f 3f       	cpi	r25, 0xFF	; 255
    22b6:	31 f0       	breq	.+12     	; 0x22c4 <__fp_mpack_finite+0xc>

000022b8 <__fp_mpack_finite>:
    22b8:	91 50       	subi	r25, 0x01	; 1
    22ba:	20 f4       	brcc	.+8      	; 0x22c4 <__fp_mpack_finite+0xc>
    22bc:	87 95       	ror	r24
    22be:	77 95       	ror	r23
    22c0:	67 95       	ror	r22
    22c2:	b7 95       	ror	r27
    22c4:	88 0f       	add	r24, r24
    22c6:	91 1d       	adc	r25, r1
    22c8:	96 95       	lsr	r25
    22ca:	87 95       	ror	r24
    22cc:	97 f9       	bld	r25, 7
    22ce:	08 95       	ret

000022d0 <__fp_powsodd>:
    22d0:	9f 93       	push	r25
    22d2:	8f 93       	push	r24
    22d4:	7f 93       	push	r23
    22d6:	6f 93       	push	r22
    22d8:	ff 93       	push	r31
    22da:	ef 93       	push	r30
    22dc:	9b 01       	movw	r18, r22
    22de:	ac 01       	movw	r20, r24
    22e0:	0e 94 a6 10 	call	0x214c	; 0x214c <__mulsf3>
    22e4:	ef 91       	pop	r30
    22e6:	ff 91       	pop	r31
    22e8:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__fp_powser>
    22ec:	2f 91       	pop	r18
    22ee:	3f 91       	pop	r19
    22f0:	4f 91       	pop	r20
    22f2:	5f 91       	pop	r21
    22f4:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__mulsf3>

000022f8 <__fp_powser>:
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	1f 93       	push	r17
    22fe:	0f 93       	push	r16
    2300:	ff 92       	push	r15
    2302:	ef 92       	push	r14
    2304:	df 92       	push	r13
    2306:	7b 01       	movw	r14, r22
    2308:	8c 01       	movw	r16, r24
    230a:	68 94       	set
    230c:	06 c0       	rjmp	.+12     	; 0x231a <__fp_powser+0x22>
    230e:	da 2e       	mov	r13, r26
    2310:	ef 01       	movw	r28, r30
    2312:	0e 94 b9 10 	call	0x2172	; 0x2172 <__mulsf3x>
    2316:	fe 01       	movw	r30, r28
    2318:	e8 94       	clt
    231a:	a5 91       	lpm	r26, Z+
    231c:	25 91       	lpm	r18, Z+
    231e:	35 91       	lpm	r19, Z+
    2320:	45 91       	lpm	r20, Z+
    2322:	55 91       	lpm	r21, Z+
    2324:	a6 f3       	brts	.-24     	; 0x230e <__fp_powser+0x16>
    2326:	ef 01       	movw	r28, r30
    2328:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__addsf3x>
    232c:	fe 01       	movw	r30, r28
    232e:	97 01       	movw	r18, r14
    2330:	a8 01       	movw	r20, r16
    2332:	da 94       	dec	r13
    2334:	69 f7       	brne	.-38     	; 0x2310 <__fp_powser+0x18>
    2336:	df 90       	pop	r13
    2338:	ef 90       	pop	r14
    233a:	ff 90       	pop	r15
    233c:	0f 91       	pop	r16
    233e:	1f 91       	pop	r17
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <MorphUtils_empty_callback>:
#ifndef MORPHUTILS_H_
#define MORPHUTILS_H_

// This function is used to initialize any function pointers.
// If this is not used, function pointers will restart the program if accidentally called.
static void MorphUtils_empty_callback(){
    2346:	08 95       	ret

00002348 <MorphADC_register_get_adc_value_function>:
MorphADCValue (*morph_get_maximum_value_function)(MorphPinNumber) = &MorphUtils_empty_callback;


MorphADCValue MorphADC_register_get_adc_value_function(void (*function)(MorphADCChannel, MorphADCResolution))
{
	morph_get_adc_value_function = function;
    2348:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <morph_get_adc_value_function+0x1>
    234c:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <morph_get_adc_value_function>
}
    2350:	08 95       	ret

00002352 <MorphADC_register_get_adc_pin_function>:

MorphADCValue MorphADC_register_get_adc_pin_function(void (*function)(MorphPinNumber, MorphADCResolution))
{
	morph_get_adc_pin_function = function;
    2352:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <morph_get_adc_pin_function+0x1>
    2356:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <morph_get_adc_pin_function>
}
    235a:	08 95       	ret

0000235c <MorphADC_register_init_adc_function>:


void MorphADC_register_init_adc_function(void (*function)(MorphPinNumber))
{
	morph_init_adc_function = function;
    235c:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <morph_init_adc_function+0x1>
    2360:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <morph_init_adc_function>
    2364:	08 95       	ret

00002366 <MorphADC_register_read_function>:
}

void MorphADC_register_read_function(MorphADCValue (*function)(MorphPinNumber))
{
	morph_read_function = function;
    2366:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <morph_read_function+0x1>
    236a:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <morph_read_function>
    236e:	08 95       	ret

00002370 <MorphADC_register_set_resolution_function>:
}

void MorphADC_register_set_resolution_function(int8_t (*function)(MorphPinNumber, MorphADCResolution))
{
	morph_set_resolution_function = function;
    2370:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <morph_set_resolution_function+0x1>
    2374:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <morph_set_resolution_function>
    2378:	08 95       	ret

0000237a <MorphADC_register_set_reference_function>:
}

void MorphADC_register_set_reference_function(void (*function)(MorphPinNumber, enum MorphADCReference, uint8_t))
{
	morph_set_reference_function = function;	
    237a:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <morph_set_reference_function+0x1>
    237e:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <morph_set_reference_function>
    2382:	08 95       	ret

00002384 <MorphADC_register_set_prescaler_function>:
}

void MorphADC_register_set_prescaler_function(void (*function)(MorphPinNumber, uint16_t))
{
	morph_set_prescaler_function = function;
    2384:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <morph_set_prescaler_function+0x1>
    2388:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <morph_set_prescaler_function>
    238c:	08 95       	ret

0000238e <MorphADC_register_get_maximum_value>:
}

void MorphADC_register_get_maximum_value(void (*function)(MorphPinNumber))
{
	morph_get_maximum_value_function = function;
    238e:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <morph_get_maximum_value_function+0x1>
    2392:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <morph_get_maximum_value_function>
    2396:	08 95       	ret

00002398 <MorphUtils_empty_callback>:
	#ifdef MORPH_IMPLICIT
		return morph_config_gpio_get_pin_direction(pn);
	#else
		return morph_get_pin_direction_function(pn);
	#endif
}
    2398:	08 95       	ret

0000239a <MorphGPIO_register_set_pin_value_function>:
    239a:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <morph_set_pin_value_function+0x1>
    239e:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <morph_set_pin_value_function>
    23a2:	08 95       	ret

000023a4 <MorphGPIO_register_get_pin_value_function>:
    23a4:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <morph_get_pin_value_function+0x1>
    23a8:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <morph_get_pin_value_function>
    23ac:	08 95       	ret

000023ae <MorphGPIO_register_set_pin_direction_function>:
    23ae:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <morph_set_pin_direction_function+0x1>
    23b2:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <morph_set_pin_direction_function>
    23b6:	08 95       	ret

000023b8 <MorphGPIO_register_get_pin_direction_function>:
    23b8:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <morph_get_pin_direction_function+0x1>
    23bc:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <morph_get_pin_direction_function>
    23c0:	08 95       	ret

000023c2 <MorphGPIO_register_set_pin_pull_state_function>:
    23c2:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <morph_set_pin_pull_state_function+0x1>
    23c6:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <morph_set_pin_pull_state_function>
    23ca:	08 95       	ret

000023cc <MorphGPIO_register_get_pin_pull_state_function>:
    23cc:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <morph_get_pin_pull_state_function+0x1>
    23d0:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <morph_get_pin_pull_state_function>
    23d4:	08 95       	ret

000023d6 <MorphGPIO_set_pin_value>:
    23d6:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <morph_set_pin_value_function>
    23da:	f0 91 6d 02 	lds	r31, 0x026D	; 0x80026d <morph_set_pin_value_function+0x1>
    23de:	09 95       	icall
    23e0:	08 95       	ret

000023e2 <MorphGPIO_set_pin_direction>:
    23e2:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <morph_set_pin_direction_function>
    23e6:	f0 91 69 02 	lds	r31, 0x0269	; 0x800269 <morph_set_pin_direction_function+0x1>
    23ea:	09 95       	icall
    23ec:	08 95       	ret

000023ee <MorphGPIO_set_pin_pull_state>:
void MorphGPIO_set_pin_pull_state(MorphPinNumber pn, enum MorphPinPullState ps)
{
	#ifdef MORPH_IMPLICIT
		morph_config_gpio_set_pin_pull_state(pn);
	#else
		morph_set_pin_pull_state_function(pn, ps);
    23ee:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <morph_set_pin_pull_state_function>
    23f2:	f0 91 65 02 	lds	r31, 0x0265	; 0x800265 <morph_set_pin_pull_state_function+0x1>
    23f6:	09 95       	icall
    23f8:	08 95       	ret

000023fa <MorphUtils_empty_callback>:
void MorphPWM_stop_pwm(MorphPinNumber pn)
{
	#ifdef MORPH_IMPLICIT
		morph_config_pwm_stop_pwm(pn);
	#else
		morph_stop_pwm_function(pn);
    23fa:	08 95       	ret

000023fc <MorphPWM_register_start_pwm>:
    23fc:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <morph_start_pwm_function+0x1>
    2400:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <morph_start_pwm_function>
    2404:	08 95       	ret

00002406 <MorphPWM_register_stop_pwm>:
    2406:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <morph_stop_pwm_function+0x1>
    240a:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <morph_stop_pwm_function>
    240e:	08 95       	ret

00002410 <MorphPWM_register_set_pwm_duty_float>:
    2410:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <morph_set_pwm_duty_float_function+0x1>
    2414:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <morph_set_pwm_duty_float_function>
    2418:	08 95       	ret

0000241a <MorphPWM_register_set_pwm_duty_64bit>:
    241a:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <morph_set_pwm_duty_64bit_function+0x1>
    241e:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <morph_set_pwm_duty_64bit_function>
    2422:	08 95       	ret

00002424 <MorphPWM_register_set_pwm_duty_32bit>:
    2424:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <morph_set_pwm_duty_32bit_function+0x1>
    2428:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <morph_set_pwm_duty_32bit_function>
    242c:	08 95       	ret

0000242e <MorphPWM_register_set_pwm_duty_16bit>:
    242e:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <morph_set_pwm_duty_16bit_function+0x1>
    2432:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <morph_set_pwm_duty_16bit_function>
    2436:	08 95       	ret

00002438 <MorphPWM_register_set_pwm_duty_8bit>:
    2438:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <morph_set_pwm_duty_8bit_function+0x1>
    243c:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <morph_set_pwm_duty_8bit_function>
    2440:	08 95       	ret

00002442 <MorphPWM_start_pwm>:
    2442:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <morph_start_pwm_function>
    2446:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <morph_start_pwm_function+0x1>
    244a:	09 95       	icall
    244c:	08 95       	ret

0000244e <MorphPWM_set_pwm_duty_float>:
void MorphPWM_set_pwm_duty_float(MorphPinNumber pn, double duty)
{
	#ifdef MORPH_IMPLICIT
		morph_config_pwm_set_pwm_duty_float(pn, duty);
	#else
		morph_set_pwm_duty_float_function(pn, duty);
    244e:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <morph_set_pwm_duty_float_function>
    2452:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <morph_set_pwm_duty_float_function+0x1>
    2456:	09 95       	icall
    2458:	08 95       	ret

0000245a <MorphUtils_empty_callback>:
void MorphTime_init_rtc()
{
	#ifdef MORPH_IMPLICIT
		morph_config_time_init_rtc();
	#else
		morph_init_rtc_function();
    245a:	08 95       	ret

0000245c <MorphTime_register_init_function>:
    245c:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <morph_init_function+0x1>
    2460:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <morph_init_function>
    2464:	08 95       	ret

00002466 <MorphTime_register_init_rtc_function>:
    2466:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <morph_init_rtc_function+0x1>
    246a:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <morph_init_rtc_function>
    246e:	08 95       	ret

00002470 <MorphTime_register_millis_function>:
    2470:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <morph_millis_function+0x1>
    2474:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <morph_millis_function>
    2478:	08 95       	ret

0000247a <MorphTime_init>:
    247a:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <morph_init_function>
    247e:	f0 91 81 02 	lds	r31, 0x0281	; 0x800281 <morph_init_function+0x1>
    2482:	09 95       	icall
    2484:	08 95       	ret

00002486 <MorphTime_millis>:
{
	MorphTimeValue value = 0;
	#ifdef MORPH_IMPLICIT
		value = morph_config_time_millis();
	#else
		value = morph_millis_function();
    2486:	e0 91 7c 02 	lds	r30, 0x027C	; 0x80027c <morph_millis_function>
    248a:	f0 91 7d 02 	lds	r31, 0x027D	; 0x80027d <morph_millis_function+0x1>
    248e:	09 95       	icall
	#endif
	
	return value;
}
    2490:	08 95       	ret

00002492 <MorphUtils_empty_callback>:
	#ifdef MORPH_IMPLICIT
	morph_config_timer_set_rate(tn, res, rate);
	#else
	morph_set_timer_rate_function(tn, res, rate);
	#endif
}
    2492:	08 95       	ret

00002494 <MorphTimer_register_acquire_timer_function>:
    2494:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <morph_aquire_timer_function+0x1>
    2498:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <morph_aquire_timer_function>
    249c:	08 95       	ret

0000249e <MorphTimer_register_release_timer_function>:
    249e:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <morph_release_timer_function+0x1>
    24a2:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <morph_release_timer_function>
    24a6:	08 95       	ret

000024a8 <MorphTimer_register_set_rate_function>:
    24a8:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <morph_set_timer_rate_function+0x1>
    24ac:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <morph_set_timer_rate_function>
    24b0:	08 95       	ret

000024b2 <MorphTimer_register_set_timer_callback_function>:
    24b2:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <morph_set_timer_callback_function+0x1>
    24b6:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <morph_set_timer_callback_function>
    24ba:	08 95       	ret

000024bc <MorphTimer_set_timer_callback>:
void MorphTimer_set_timer_callback(MorphTimerNumber tn, MorphTimerResolution res, void (*callback)(void))
{
	#ifdef MORPH_IMPLICIT
	morph_config_timer_set_timer_callback(tn, res, callback);
	#else
	morph_set_timer_callback_function(tn, res, callback);
    24bc:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <morph_set_timer_callback_function>
    24c0:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <morph_set_timer_callback_function+0x1>
    24c4:	09 95       	icall
    24c6:	08 95       	ret

000024c8 <MorphUtils_empty_callback>:
	morph_data_ready_function = function;
}

void MorphUART_register_purge_input_function(void (*function)(MorphUARTChannel))
{
	morph_purge_input_function = function;
    24c8:	08 95       	ret

000024ca <MorphUART_register_setup_channel_function>:
    24ca:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <morph_setup_channel_function+0x1>
    24ce:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <morph_setup_channel_function>
    24d2:	08 95       	ret

000024d4 <MorphUART_register_send_data_function>:
    24d4:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <morph_send_data_function+0x1>
    24d8:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <morph_send_data_function>
    24dc:	08 95       	ret

000024de <MorphUART_register_read_data_function>:
    24de:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <morph_read_data_function+0x1>
    24e2:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <morph_read_data_function>
    24e6:	08 95       	ret

000024e8 <MorphUART_register_send_byte_function>:
    24e8:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <morph_send_byte_function+0x1>
    24ec:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <morph_send_byte_function>
    24f0:	08 95       	ret

000024f2 <MorphUART_register_read_byte_function>:
    24f2:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <morph_read_byte_function+0x1>
    24f6:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <morph_read_byte_function>
    24fa:	08 95       	ret

000024fc <MorphUART_register_write_data_buffer_function>:
    24fc:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <morph_write_data_buffer_function+0x1>
    2500:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <morph_write_data_buffer_function>
    2504:	08 95       	ret

00002506 <MorphUART_register_write_byte_buffer_function>:
    2506:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <morph_write_byte_buffer_function+0x1>
    250a:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <morph_write_byte_buffer_function>
    250e:	08 95       	ret

00002510 <MorphUART_register_read_data_buffer_function>:
    2510:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <morph_read_data_buffer_function+0x1>
    2514:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <morph_read_data_buffer_function>
    2518:	08 95       	ret

0000251a <MorphUART_register_read_byte_buffer_function>:
    251a:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <morph_read_byte_buffer_function+0x1>
    251e:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <morph_read_byte_buffer_function>
    2522:	08 95       	ret

00002524 <MorphUART_register_data_ready_function>:
    2524:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <morph_data_ready_function+0x1>
    2528:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <morph_data_ready_function>
    252c:	08 95       	ret

0000252e <MorphUART_register_set_tx_pin_function>:
}

void MorphUART_register_set_tx_pin_function(void (*function)(MorphUARTChannel, MorphPinNumber))
{
	morph_set_tx_pin_function = function;
    252e:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <morph_set_tx_pin_function+0x1>
    2532:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <morph_set_tx_pin_function>
    2536:	08 95       	ret

00002538 <MorphUART_register_set_rx_pin_function>:
}

void MorphUART_register_set_rx_pin_function(void (*function)(MorphUARTChannel, MorphPinNumber))
{
	morph_set_rx_pin_function = function;
    2538:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <morph_set_rx_pin_function+0x1>
    253c:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <morph_set_rx_pin_function>
    2540:	08 95       	ret

00002542 <__moddi3>:
    2542:	68 94       	set
    2544:	01 c0       	rjmp	.+2      	; 0x2548 <__divdi3_moddi3>

00002546 <__divdi3>:
    2546:	e8 94       	clt

00002548 <__divdi3_moddi3>:
    2548:	f9 2f       	mov	r31, r25
    254a:	f1 2b       	or	r31, r17
    254c:	12 f0       	brmi	.+4      	; 0x2552 <__divdi3_moddi3+0xa>
    254e:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__udivdi3_umoddi3>
    2552:	a0 e0       	ldi	r26, 0x00	; 0
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	ef ea       	ldi	r30, 0xAF	; 175
    2558:	f2 e1       	ldi	r31, 0x12	; 18
    255a:	0c 94 47 13 	jmp	0x268e	; 0x268e <__prologue_saves__+0xc>
    255e:	09 2e       	mov	r0, r25
    2560:	05 94       	asr	r0
    2562:	22 f4       	brpl	.+8      	; 0x256c <__divdi3_moddi3+0x24>
    2564:	0e 94 31 13 	call	0x2662	; 0x2662 <__negdi2>
    2568:	11 23       	and	r17, r17
    256a:	92 f4       	brpl	.+36     	; 0x2590 <__divdi3_moddi3+0x48>
    256c:	f0 e8       	ldi	r31, 0x80	; 128
    256e:	0f 26       	eor	r0, r31
    2570:	ff ef       	ldi	r31, 0xFF	; 255
    2572:	e0 94       	com	r14
    2574:	f0 94       	com	r15
    2576:	00 95       	com	r16
    2578:	10 95       	com	r17
    257a:	b0 94       	com	r11
    257c:	c0 94       	com	r12
    257e:	d0 94       	com	r13
    2580:	a1 94       	neg	r10
    2582:	bf 0a       	sbc	r11, r31
    2584:	cf 0a       	sbc	r12, r31
    2586:	df 0a       	sbc	r13, r31
    2588:	ef 0a       	sbc	r14, r31
    258a:	ff 0a       	sbc	r15, r31
    258c:	0f 0b       	sbc	r16, r31
    258e:	1f 0b       	sbc	r17, r31
    2590:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__udivmod64>
    2594:	07 fc       	sbrc	r0, 7
    2596:	0e 94 31 13 	call	0x2662	; 0x2662 <__negdi2>
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	ec e0       	ldi	r30, 0x0C	; 12
    25a0:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__epilogue_restores__+0xc>

000025a4 <__umoddi3>:
    25a4:	68 94       	set
    25a6:	01 c0       	rjmp	.+2      	; 0x25aa <__udivdi3_umoddi3>

000025a8 <__udivdi3>:
    25a8:	e8 94       	clt

000025aa <__udivdi3_umoddi3>:
    25aa:	8f 92       	push	r8
    25ac:	9f 92       	push	r9
    25ae:	cf 93       	push	r28
    25b0:	df 93       	push	r29
    25b2:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__udivmod64>
    25b6:	df 91       	pop	r29
    25b8:	cf 91       	pop	r28
    25ba:	9f 90       	pop	r9
    25bc:	8f 90       	pop	r8
    25be:	08 95       	ret

000025c0 <__udivmod64>:
    25c0:	88 24       	eor	r8, r8
    25c2:	99 24       	eor	r9, r9
    25c4:	f4 01       	movw	r30, r8
    25c6:	e4 01       	movw	r28, r8
    25c8:	b0 e4       	ldi	r27, 0x40	; 64
    25ca:	9f 93       	push	r25
    25cc:	aa 27       	eor	r26, r26
    25ce:	9a 15       	cp	r25, r10
    25d0:	8b 04       	cpc	r8, r11
    25d2:	9c 04       	cpc	r9, r12
    25d4:	ed 05       	cpc	r30, r13
    25d6:	fe 05       	cpc	r31, r14
    25d8:	cf 05       	cpc	r28, r15
    25da:	d0 07       	cpc	r29, r16
    25dc:	a1 07       	cpc	r26, r17
    25de:	98 f4       	brcc	.+38     	; 0x2606 <__udivmod64+0x46>
    25e0:	ad 2f       	mov	r26, r29
    25e2:	dc 2f       	mov	r29, r28
    25e4:	cf 2f       	mov	r28, r31
    25e6:	fe 2f       	mov	r31, r30
    25e8:	e9 2d       	mov	r30, r9
    25ea:	98 2c       	mov	r9, r8
    25ec:	89 2e       	mov	r8, r25
    25ee:	98 2f       	mov	r25, r24
    25f0:	87 2f       	mov	r24, r23
    25f2:	76 2f       	mov	r23, r22
    25f4:	65 2f       	mov	r22, r21
    25f6:	54 2f       	mov	r21, r20
    25f8:	43 2f       	mov	r20, r19
    25fa:	32 2f       	mov	r19, r18
    25fc:	22 27       	eor	r18, r18
    25fe:	b8 50       	subi	r27, 0x08	; 8
    2600:	31 f7       	brne	.-52     	; 0x25ce <__udivmod64+0xe>
    2602:	bf 91       	pop	r27
    2604:	27 c0       	rjmp	.+78     	; 0x2654 <__udivmod64+0x94>
    2606:	1b 2e       	mov	r1, r27
    2608:	bf 91       	pop	r27
    260a:	bb 27       	eor	r27, r27
    260c:	22 0f       	add	r18, r18
    260e:	33 1f       	adc	r19, r19
    2610:	44 1f       	adc	r20, r20
    2612:	55 1f       	adc	r21, r21
    2614:	66 1f       	adc	r22, r22
    2616:	77 1f       	adc	r23, r23
    2618:	88 1f       	adc	r24, r24
    261a:	99 1f       	adc	r25, r25
    261c:	88 1c       	adc	r8, r8
    261e:	99 1c       	adc	r9, r9
    2620:	ee 1f       	adc	r30, r30
    2622:	ff 1f       	adc	r31, r31
    2624:	cc 1f       	adc	r28, r28
    2626:	dd 1f       	adc	r29, r29
    2628:	aa 1f       	adc	r26, r26
    262a:	bb 1f       	adc	r27, r27
    262c:	8a 14       	cp	r8, r10
    262e:	9b 04       	cpc	r9, r11
    2630:	ec 05       	cpc	r30, r12
    2632:	fd 05       	cpc	r31, r13
    2634:	ce 05       	cpc	r28, r14
    2636:	df 05       	cpc	r29, r15
    2638:	a0 07       	cpc	r26, r16
    263a:	b1 07       	cpc	r27, r17
    263c:	48 f0       	brcs	.+18     	; 0x2650 <__udivmod64+0x90>
    263e:	8a 18       	sub	r8, r10
    2640:	9b 08       	sbc	r9, r11
    2642:	ec 09       	sbc	r30, r12
    2644:	fd 09       	sbc	r31, r13
    2646:	ce 09       	sbc	r28, r14
    2648:	df 09       	sbc	r29, r15
    264a:	a0 0b       	sbc	r26, r16
    264c:	b1 0b       	sbc	r27, r17
    264e:	21 60       	ori	r18, 0x01	; 1
    2650:	1a 94       	dec	r1
    2652:	e1 f6       	brne	.-72     	; 0x260c <__udivmod64+0x4c>
    2654:	2e f4       	brtc	.+10     	; 0x2660 <__udivmod64+0xa0>
    2656:	94 01       	movw	r18, r8
    2658:	af 01       	movw	r20, r30
    265a:	be 01       	movw	r22, r28
    265c:	cd 01       	movw	r24, r26
    265e:	00 0c       	add	r0, r0
    2660:	08 95       	ret

00002662 <__negdi2>:
    2662:	60 95       	com	r22
    2664:	70 95       	com	r23
    2666:	80 95       	com	r24
    2668:	90 95       	com	r25
    266a:	30 95       	com	r19
    266c:	40 95       	com	r20
    266e:	50 95       	com	r21
    2670:	21 95       	neg	r18
    2672:	3f 4f       	sbci	r19, 0xFF	; 255
    2674:	4f 4f       	sbci	r20, 0xFF	; 255
    2676:	5f 4f       	sbci	r21, 0xFF	; 255
    2678:	6f 4f       	sbci	r22, 0xFF	; 255
    267a:	7f 4f       	sbci	r23, 0xFF	; 255
    267c:	8f 4f       	sbci	r24, 0xFF	; 255
    267e:	9f 4f       	sbci	r25, 0xFF	; 255
    2680:	08 95       	ret

00002682 <__prologue_saves__>:
    2682:	2f 92       	push	r2
    2684:	3f 92       	push	r3
    2686:	4f 92       	push	r4
    2688:	5f 92       	push	r5
    268a:	6f 92       	push	r6
    268c:	7f 92       	push	r7
    268e:	8f 92       	push	r8
    2690:	9f 92       	push	r9
    2692:	af 92       	push	r10
    2694:	bf 92       	push	r11
    2696:	cf 92       	push	r12
    2698:	df 92       	push	r13
    269a:	ef 92       	push	r14
    269c:	ff 92       	push	r15
    269e:	0f 93       	push	r16
    26a0:	1f 93       	push	r17
    26a2:	cf 93       	push	r28
    26a4:	df 93       	push	r29
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    26aa:	ca 1b       	sub	r28, r26
    26ac:	db 0b       	sbc	r29, r27
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
    26b8:	09 94       	ijmp

000026ba <__epilogue_restores__>:
    26ba:	2a 88       	ldd	r2, Y+18	; 0x12
    26bc:	39 88       	ldd	r3, Y+17	; 0x11
    26be:	48 88       	ldd	r4, Y+16	; 0x10
    26c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    26c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    26c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    26c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    26c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    26ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    26cc:	b9 84       	ldd	r11, Y+9	; 0x09
    26ce:	c8 84       	ldd	r12, Y+8	; 0x08
    26d0:	df 80       	ldd	r13, Y+7	; 0x07
    26d2:	ee 80       	ldd	r14, Y+6	; 0x06
    26d4:	fd 80       	ldd	r15, Y+5	; 0x05
    26d6:	0c 81       	ldd	r16, Y+4	; 0x04
    26d8:	1b 81       	ldd	r17, Y+3	; 0x03
    26da:	aa 81       	ldd	r26, Y+2	; 0x02
    26dc:	b9 81       	ldd	r27, Y+1	; 0x01
    26de:	ce 0f       	add	r28, r30
    26e0:	d1 1d       	adc	r29, r1
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	ed 01       	movw	r28, r26
    26ee:	08 95       	ret

000026f0 <__adddi3_s8>:
    26f0:	00 24       	eor	r0, r0
    26f2:	a7 fd       	sbrc	r26, 7
    26f4:	00 94       	com	r0
    26f6:	2a 0f       	add	r18, r26
    26f8:	30 1d       	adc	r19, r0
    26fa:	40 1d       	adc	r20, r0
    26fc:	50 1d       	adc	r21, r0
    26fe:	60 1d       	adc	r22, r0
    2700:	70 1d       	adc	r23, r0
    2702:	80 1d       	adc	r24, r0
    2704:	90 1d       	adc	r25, r0
    2706:	08 95       	ret

00002708 <_exit>:
    2708:	f8 94       	cli

0000270a <__stop_program>:
    270a:	ff cf       	rjmp	.-2      	; 0x270a <__stop_program>
