
Element-SAMD-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004cd0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00004cd0  00004cd0  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000edc  20000000  00004cd8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000094  20000ee0  00005bb8  00020edc  2**3
                  ALLOC
  4 .stack        00002004  20000f74  00005c4c  00020edc  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020edc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020f04  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000cd72  00000000  00000000  00020f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001491  00000000  00000000  0002dccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001e1b  00000000  00000000  0002f160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000005e0  00000000  00000000  00030f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000550  00000000  00000000  0003155b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000127c4  00000000  00000000  00031aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003ed8  00000000  00000000  0004426f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000721dd  00000000  00000000  00048147  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001640  00000000  00000000  000ba324  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 2f 00 20 6d 15 00 00 65 16 00 00 65 16 00 00     x/. m...e...e...
	...
      2c:	65 16 00 00 00 00 00 00 00 00 00 00 65 16 00 00     e...........e...
      3c:	a5 2c 00 00 65 16 00 00 65 16 00 00 65 16 00 00     .,..e...e...e...
      4c:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
      5c:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
      6c:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
      7c:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
      8c:	65 16 00 00 65 16 00 00 00 00 00 00 00 00 00 00     e...e...........
      9c:	65 16 00 00 65 16 00 00 65 16 00 00 65 16 00 00     e...e...e...e...
      ac:	65 16 00 00 00 00 00 00                             e.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000ee0 	.word	0x20000ee0
      d4:	00000000 	.word	0x00000000
      d8:	00004cd8 	.word	0x00004cd8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000ee4 	.word	0x20000ee4
     108:	00004cd8 	.word	0x00004cd8
     10c:	00004cd8 	.word	0x00004cd8
     110:	00000000 	.word	0x00000000

00000114 <MorphUtils_empty_callback>:
#ifndef MORPHUTILS_H_
#define MORPHUTILS_H_

// This function is used to initialize any function pointers.
// If this is not used, function pointers will restart the program if accidentally called.
static void MorphUtils_empty_callback(){
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	; // Do nothing
}
     118:	46c0      	nop			; (mov r8, r8)
     11a:	46bd      	mov	sp, r7
     11c:	bd80      	pop	{r7, pc}
	...

00000120 <Element7Seg_write_character>:
	
}

// This function takes a character and applies it to the specified digit.
void Element7Seg_write_character(ElementAnimationBufferConfigStruct * buffer, uint16_t digit, uint8_t character)
{
     120:	b580      	push	{r7, lr}
     122:	b082      	sub	sp, #8
     124:	af00      	add	r7, sp, #0
     126:	6078      	str	r0, [r7, #4]
     128:	0008      	movs	r0, r1
     12a:	0011      	movs	r1, r2
     12c:	1cbb      	adds	r3, r7, #2
     12e:	1c02      	adds	r2, r0, #0
     130:	801a      	strh	r2, [r3, #0]
     132:	1c7b      	adds	r3, r7, #1
     134:	1c0a      	adds	r2, r1, #0
     136:	701a      	strb	r2, [r3, #0]

	// Enforce size requirements.
	if(buffer->data_dimensions[1] > digit && character < 127)
     138:	687b      	ldr	r3, [r7, #4]
     13a:	8b5b      	ldrh	r3, [r3, #26]
     13c:	1cba      	adds	r2, r7, #2
     13e:	8812      	ldrh	r2, [r2, #0]
     140:	429a      	cmp	r2, r3
     142:	d20f      	bcs.n	164 <Element7Seg_write_character+0x44>
     144:	1c7b      	adds	r3, r7, #1
     146:	781b      	ldrb	r3, [r3, #0]
     148:	2b7e      	cmp	r3, #126	; 0x7e
     14a:	d80b      	bhi.n	164 <Element7Seg_write_character+0x44>
	{
		// The Y-axis is the number of digits. We are in range.
		buffer->write_buffer[digit] = seven_seg_char_ascii_map[character] << 1;			
     14c:	687b      	ldr	r3, [r7, #4]
     14e:	689a      	ldr	r2, [r3, #8]
     150:	1cbb      	adds	r3, r7, #2
     152:	881b      	ldrh	r3, [r3, #0]
     154:	18d2      	adds	r2, r2, r3
     156:	1c7b      	adds	r3, r7, #1
     158:	781b      	ldrb	r3, [r3, #0]
     15a:	4904      	ldr	r1, [pc, #16]	; (16c <Element7Seg_write_character+0x4c>)
     15c:	5ccb      	ldrb	r3, [r1, r3]
     15e:	18db      	adds	r3, r3, r3
     160:	b2db      	uxtb	r3, r3
     162:	7013      	strb	r3, [r2, #0]
	}
	
}
     164:	46c0      	nop			; (mov r8, r8)
     166:	46bd      	mov	sp, r7
     168:	b002      	add	sp, #8
     16a:	bd80      	pop	{r7, pc}
     16c:	20000170 	.word	0x20000170

00000170 <Element7Seg_write_string>:

// This function takes a string of characters and an offset. The string will be written into the buffer at the specified offset.
// The offset is in characters. A positive offset will push the characters off the left of the screen.
void Element7Seg_write_string(ElementAnimationBufferConfigStruct * buffer, uint8_t * string, uint8_t string_length, int8_t offset)
{
     170:	b580      	push	{r7, lr}
     172:	b086      	sub	sp, #24
     174:	af00      	add	r7, sp, #0
     176:	60f8      	str	r0, [r7, #12]
     178:	60b9      	str	r1, [r7, #8]
     17a:	0019      	movs	r1, r3
     17c:	1dfb      	adds	r3, r7, #7
     17e:	701a      	strb	r2, [r3, #0]
     180:	1dbb      	adds	r3, r7, #6
     182:	1c0a      	adds	r2, r1, #0
     184:	701a      	strb	r2, [r3, #0]

	for(int8_t j = 0; j < buffer->data_dimensions[1]; j++)
     186:	2317      	movs	r3, #23
     188:	18fb      	adds	r3, r7, r3
     18a:	2200      	movs	r2, #0
     18c:	701a      	strb	r2, [r3, #0]
     18e:	e012      	b.n	1b6 <Element7Seg_write_string+0x46>
	{
		buffer->write_buffer[j] = 0;
     190:	68fb      	ldr	r3, [r7, #12]
     192:	689a      	ldr	r2, [r3, #8]
     194:	2317      	movs	r3, #23
     196:	18fb      	adds	r3, r7, r3
     198:	781b      	ldrb	r3, [r3, #0]
     19a:	b25b      	sxtb	r3, r3
     19c:	18d3      	adds	r3, r2, r3
     19e:	2200      	movs	r2, #0
     1a0:	701a      	strb	r2, [r3, #0]
	for(int8_t j = 0; j < buffer->data_dimensions[1]; j++)
     1a2:	2317      	movs	r3, #23
     1a4:	18fb      	adds	r3, r7, r3
     1a6:	781b      	ldrb	r3, [r3, #0]
     1a8:	b25b      	sxtb	r3, r3
     1aa:	b2db      	uxtb	r3, r3
     1ac:	3301      	adds	r3, #1
     1ae:	b2da      	uxtb	r2, r3
     1b0:	2317      	movs	r3, #23
     1b2:	18fb      	adds	r3, r7, r3
     1b4:	701a      	strb	r2, [r3, #0]
     1b6:	2317      	movs	r3, #23
     1b8:	18fb      	adds	r3, r7, r3
     1ba:	781b      	ldrb	r3, [r3, #0]
     1bc:	b25b      	sxtb	r3, r3
     1be:	68fa      	ldr	r2, [r7, #12]
     1c0:	8b52      	ldrh	r2, [r2, #26]
     1c2:	4293      	cmp	r3, r2
     1c4:	dbe4      	blt.n	190 <Element7Seg_write_string+0x20>
	}
	
	for(int8_t i = offset, j = 0; i < string_length && j < buffer->data_dimensions[1]; i++, j++)
     1c6:	2316      	movs	r3, #22
     1c8:	18fb      	adds	r3, r7, r3
     1ca:	1dba      	adds	r2, r7, #6
     1cc:	7812      	ldrb	r2, [r2, #0]
     1ce:	701a      	strb	r2, [r3, #0]
     1d0:	2315      	movs	r3, #21
     1d2:	18fb      	adds	r3, r7, r3
     1d4:	2200      	movs	r2, #0
     1d6:	701a      	strb	r2, [r3, #0]
     1d8:	e027      	b.n	22a <Element7Seg_write_string+0xba>
	{
		buffer->write_buffer[j] = seven_seg_char_ascii_map[string[i]] << 1;
     1da:	68fb      	ldr	r3, [r7, #12]
     1dc:	689a      	ldr	r2, [r3, #8]
     1de:	2315      	movs	r3, #21
     1e0:	18fb      	adds	r3, r7, r3
     1e2:	781b      	ldrb	r3, [r3, #0]
     1e4:	b25b      	sxtb	r3, r3
     1e6:	18d2      	adds	r2, r2, r3
     1e8:	2316      	movs	r3, #22
     1ea:	18fb      	adds	r3, r7, r3
     1ec:	781b      	ldrb	r3, [r3, #0]
     1ee:	b25b      	sxtb	r3, r3
     1f0:	68b9      	ldr	r1, [r7, #8]
     1f2:	18cb      	adds	r3, r1, r3
     1f4:	781b      	ldrb	r3, [r3, #0]
     1f6:	0019      	movs	r1, r3
     1f8:	4b16      	ldr	r3, [pc, #88]	; (254 <Element7Seg_write_string+0xe4>)
     1fa:	5c5b      	ldrb	r3, [r3, r1]
     1fc:	18db      	adds	r3, r3, r3
     1fe:	b2db      	uxtb	r3, r3
     200:	7013      	strb	r3, [r2, #0]
	for(int8_t i = offset, j = 0; i < string_length && j < buffer->data_dimensions[1]; i++, j++)
     202:	2316      	movs	r3, #22
     204:	18fb      	adds	r3, r7, r3
     206:	781b      	ldrb	r3, [r3, #0]
     208:	b25b      	sxtb	r3, r3
     20a:	b2db      	uxtb	r3, r3
     20c:	3301      	adds	r3, #1
     20e:	b2da      	uxtb	r2, r3
     210:	2316      	movs	r3, #22
     212:	18fb      	adds	r3, r7, r3
     214:	701a      	strb	r2, [r3, #0]
     216:	2315      	movs	r3, #21
     218:	18fb      	adds	r3, r7, r3
     21a:	781b      	ldrb	r3, [r3, #0]
     21c:	b25b      	sxtb	r3, r3
     21e:	b2db      	uxtb	r3, r3
     220:	3301      	adds	r3, #1
     222:	b2da      	uxtb	r2, r3
     224:	2315      	movs	r3, #21
     226:	18fb      	adds	r3, r7, r3
     228:	701a      	strb	r2, [r3, #0]
     22a:	2316      	movs	r3, #22
     22c:	18fb      	adds	r3, r7, r3
     22e:	2200      	movs	r2, #0
     230:	569a      	ldrsb	r2, [r3, r2]
     232:	1dfb      	adds	r3, r7, #7
     234:	781b      	ldrb	r3, [r3, #0]
     236:	429a      	cmp	r2, r3
     238:	da07      	bge.n	24a <Element7Seg_write_string+0xda>
     23a:	2315      	movs	r3, #21
     23c:	18fb      	adds	r3, r7, r3
     23e:	781b      	ldrb	r3, [r3, #0]
     240:	b25b      	sxtb	r3, r3
     242:	68fa      	ldr	r2, [r7, #12]
     244:	8b52      	ldrh	r2, [r2, #26]
     246:	4293      	cmp	r3, r2
     248:	dbc7      	blt.n	1da <Element7Seg_write_string+0x6a>
	}
}
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	46bd      	mov	sp, r7
     24e:	b006      	add	sp, #24
     250:	bd80      	pop	{r7, pc}
     252:	46c0      	nop			; (mov r8, r8)
     254:	20000170 	.word	0x20000170

00000258 <Element7Seg_get_bit>:
{
	return Element7Seg_get_bit(buffer, digit, 0);
}

uint8_t Element7Seg_get_bit(ElementAnimationBufferConfigStruct * buffer, uint16_t digit, uint8_t bit)
{
     258:	b580      	push	{r7, lr}
     25a:	b084      	sub	sp, #16
     25c:	af00      	add	r7, sp, #0
     25e:	6078      	str	r0, [r7, #4]
     260:	0008      	movs	r0, r1
     262:	0011      	movs	r1, r2
     264:	1cbb      	adds	r3, r7, #2
     266:	1c02      	adds	r2, r0, #0
     268:	801a      	strh	r2, [r3, #0]
     26a:	1c7b      	adds	r3, r7, #1
     26c:	1c0a      	adds	r2, r1, #0
     26e:	701a      	strb	r2, [r3, #0]
	uint8_t value = 0;
     270:	230f      	movs	r3, #15
     272:	18fb      	adds	r3, r7, r3
     274:	2200      	movs	r2, #0
     276:	701a      	strb	r2, [r3, #0]
	if(bit <= 7 && digit < buffer->data_dimensions[1])
     278:	1c7b      	adds	r3, r7, #1
     27a:	781b      	ldrb	r3, [r3, #0]
     27c:	2b07      	cmp	r3, #7
     27e:	d818      	bhi.n	2b2 <Element7Seg_get_bit+0x5a>
     280:	687b      	ldr	r3, [r7, #4]
     282:	8b5b      	ldrh	r3, [r3, #26]
     284:	1cba      	adds	r2, r7, #2
     286:	8812      	ldrh	r2, [r2, #0]
     288:	429a      	cmp	r2, r3
     28a:	d212      	bcs.n	2b2 <Element7Seg_get_bit+0x5a>
	{
		value = (buffer->read_buffer[digit] >> (7 - bit)) & 0x1;
     28c:	687b      	ldr	r3, [r7, #4]
     28e:	68da      	ldr	r2, [r3, #12]
     290:	1cbb      	adds	r3, r7, #2
     292:	881b      	ldrh	r3, [r3, #0]
     294:	18d3      	adds	r3, r2, r3
     296:	781b      	ldrb	r3, [r3, #0]
     298:	0019      	movs	r1, r3
     29a:	1c7b      	adds	r3, r7, #1
     29c:	781b      	ldrb	r3, [r3, #0]
     29e:	2207      	movs	r2, #7
     2a0:	1ad3      	subs	r3, r2, r3
     2a2:	4119      	asrs	r1, r3
     2a4:	000b      	movs	r3, r1
     2a6:	b2da      	uxtb	r2, r3
     2a8:	230f      	movs	r3, #15
     2aa:	18fb      	adds	r3, r7, r3
     2ac:	2101      	movs	r1, #1
     2ae:	400a      	ands	r2, r1
     2b0:	701a      	strb	r2, [r3, #0]
	}	

	return value; 
     2b2:	230f      	movs	r3, #15
     2b4:	18fb      	adds	r3, r7, r3
     2b6:	781b      	ldrb	r3, [r3, #0]
	
}
     2b8:	0018      	movs	r0, r3
     2ba:	46bd      	mov	sp, r7
     2bc:	b004      	add	sp, #16
     2be:	bd80      	pop	{r7, pc}

000002c0 <Element7Seg_get_byte>:

// This function gets a full byte with the bit order a, b, c, d, e, f, g, period.
uint8_t Element7Seg_get_byte(ElementAnimationBufferConfigStruct * buffer, uint16_t digit)
{
     2c0:	b580      	push	{r7, lr}
     2c2:	b084      	sub	sp, #16
     2c4:	af00      	add	r7, sp, #0
     2c6:	6078      	str	r0, [r7, #4]
     2c8:	000a      	movs	r2, r1
     2ca:	1cbb      	adds	r3, r7, #2
     2cc:	801a      	strh	r2, [r3, #0]
	uint8_t value = 0;
     2ce:	230f      	movs	r3, #15
     2d0:	18fb      	adds	r3, r7, r3
     2d2:	2200      	movs	r2, #0
     2d4:	701a      	strb	r2, [r3, #0]
	if(digit < buffer->data_dimensions[1])
     2d6:	687b      	ldr	r3, [r7, #4]
     2d8:	8b5b      	ldrh	r3, [r3, #26]
     2da:	1cba      	adds	r2, r7, #2
     2dc:	8812      	ldrh	r2, [r2, #0]
     2de:	429a      	cmp	r2, r3
     2e0:	d208      	bcs.n	2f4 <Element7Seg_get_byte+0x34>
	{
		value = buffer->read_buffer[digit];
     2e2:	687b      	ldr	r3, [r7, #4]
     2e4:	68da      	ldr	r2, [r3, #12]
     2e6:	1cbb      	adds	r3, r7, #2
     2e8:	881b      	ldrh	r3, [r3, #0]
     2ea:	18d2      	adds	r2, r2, r3
     2ec:	230f      	movs	r3, #15
     2ee:	18fb      	adds	r3, r7, r3
     2f0:	7812      	ldrb	r2, [r2, #0]
     2f2:	701a      	strb	r2, [r3, #0]
	}

	return value;
     2f4:	230f      	movs	r3, #15
     2f6:	18fb      	adds	r3, r7, r3
     2f8:	781b      	ldrb	r3, [r3, #0]
     2fa:	0018      	movs	r0, r3
     2fc:	46bd      	mov	sp, r7
     2fe:	b004      	add	sp, #16
     300:	bd80      	pop	{r7, pc}
	...

00000304 <Element7SegGPIODriver_init>:

// When a new display is created, a couple pieces of information are needed.
// 1. The location of all 7-8 GPIO pins, driving A - G and DP respectively.
// 2. The location of all multiplexing GPIO pins, along with how many.
void Element7SegGPIODriver_init(MorphPinNumber * bit_gpios, uint8_t bit_count, MorphPinNumber * digit_locations, uint8_t digit_count, ElementAnimationBufferConfigStruct * buffer)
{
     304:	b590      	push	{r4, r7, lr}
     306:	b087      	sub	sp, #28
     308:	af00      	add	r7, sp, #0
     30a:	60f8      	str	r0, [r7, #12]
     30c:	0008      	movs	r0, r1
     30e:	607a      	str	r2, [r7, #4]
     310:	0019      	movs	r1, r3
     312:	230b      	movs	r3, #11
     314:	18fb      	adds	r3, r7, r3
     316:	1c02      	adds	r2, r0, #0
     318:	701a      	strb	r2, [r3, #0]
     31a:	230a      	movs	r3, #10
     31c:	18fb      	adds	r3, r7, r3
     31e:	1c0a      	adds	r2, r1, #0
     320:	701a      	strb	r2, [r3, #0]
	
	if(current_display_count >= MAX_CONCURRENT_DISPLAYS)
     322:	4b5b      	ldr	r3, [pc, #364]	; (490 <Element7SegGPIODriver_init+0x18c>)
     324:	781b      	ldrb	r3, [r3, #0]
     326:	2b01      	cmp	r3, #1
     328:	d900      	bls.n	32c <Element7SegGPIODriver_init+0x28>
     32a:	e0ad      	b.n	488 <Element7SegGPIODriver_init+0x184>
	{
		// Please leave.
		return;
	}
	
	segment_configs[current_display_count].buffer = buffer;
     32c:	4b58      	ldr	r3, [pc, #352]	; (490 <Element7SegGPIODriver_init+0x18c>)
     32e:	781b      	ldrb	r3, [r3, #0]
     330:	0019      	movs	r1, r3
     332:	4a58      	ldr	r2, [pc, #352]	; (494 <Element7SegGPIODriver_init+0x190>)
     334:	000b      	movs	r3, r1
     336:	00db      	lsls	r3, r3, #3
     338:	1a5b      	subs	r3, r3, r1
     33a:	009b      	lsls	r3, r3, #2
     33c:	18d3      	adds	r3, r2, r3
     33e:	3318      	adds	r3, #24
     340:	6aba      	ldr	r2, [r7, #40]	; 0x28
     342:	601a      	str	r2, [r3, #0]
	
	segment_configs[current_display_count].num_bits = bit_count;
     344:	4b52      	ldr	r3, [pc, #328]	; (490 <Element7SegGPIODriver_init+0x18c>)
     346:	781b      	ldrb	r3, [r3, #0]
     348:	0019      	movs	r1, r3
     34a:	4a52      	ldr	r2, [pc, #328]	; (494 <Element7SegGPIODriver_init+0x190>)
     34c:	000b      	movs	r3, r1
     34e:	00db      	lsls	r3, r3, #3
     350:	1a5b      	subs	r3, r3, r1
     352:	009b      	lsls	r3, r3, #2
     354:	210b      	movs	r1, #11
     356:	1879      	adds	r1, r7, r1
     358:	7809      	ldrb	r1, [r1, #0]
     35a:	5499      	strb	r1, [r3, r2]
	
	for(uint8_t i = 0; i < bit_count && i < MAX_ELEMENT_7SEG_GPIO_BITS; i++)
     35c:	2317      	movs	r3, #23
     35e:	18fb      	adds	r3, r7, r3
     360:	2200      	movs	r2, #0
     362:	701a      	strb	r2, [r3, #0]
     364:	e033      	b.n	3ce <Element7SegGPIODriver_init+0xca>
	{
		// Populate the bit array.
		segment_configs[current_display_count].bit_locations[i] = bit_gpios[i];	
     366:	4b4a      	ldr	r3, [pc, #296]	; (490 <Element7SegGPIODriver_init+0x18c>)
     368:	781b      	ldrb	r3, [r3, #0]
     36a:	0018      	movs	r0, r3
     36c:	2317      	movs	r3, #23
     36e:	18fb      	adds	r3, r7, r3
     370:	781a      	ldrb	r2, [r3, #0]
     372:	2317      	movs	r3, #23
     374:	18fb      	adds	r3, r7, r3
     376:	781b      	ldrb	r3, [r3, #0]
     378:	68f9      	ldr	r1, [r7, #12]
     37a:	18cb      	adds	r3, r1, r3
     37c:	2400      	movs	r4, #0
     37e:	571c      	ldrsb	r4, [r3, r4]
     380:	4944      	ldr	r1, [pc, #272]	; (494 <Element7SegGPIODriver_init+0x190>)
     382:	0003      	movs	r3, r0
     384:	00db      	lsls	r3, r3, #3
     386:	1a1b      	subs	r3, r3, r0
     388:	009b      	lsls	r3, r3, #2
     38a:	18cb      	adds	r3, r1, r3
     38c:	189b      	adds	r3, r3, r2
     38e:	3302      	adds	r3, #2
     390:	1c22      	adds	r2, r4, #0
     392:	701a      	strb	r2, [r3, #0]
		
		// Ensure the GPIOs are setup for output.
		MorphGPIO_set_pin_direction(bit_gpios[i], Output);
     394:	2317      	movs	r3, #23
     396:	18fb      	adds	r3, r7, r3
     398:	781b      	ldrb	r3, [r3, #0]
     39a:	68fa      	ldr	r2, [r7, #12]
     39c:	18d3      	adds	r3, r2, r3
     39e:	781b      	ldrb	r3, [r3, #0]
     3a0:	b25b      	sxtb	r3, r3
     3a2:	2101      	movs	r1, #1
     3a4:	0018      	movs	r0, r3
     3a6:	4b3c      	ldr	r3, [pc, #240]	; (498 <Element7SegGPIODriver_init+0x194>)
     3a8:	4798      	blx	r3
		
		// High turns them off.
		MorphGPIO_set_pin_value(bit_gpios[i], High);
     3aa:	2317      	movs	r3, #23
     3ac:	18fb      	adds	r3, r7, r3
     3ae:	781b      	ldrb	r3, [r3, #0]
     3b0:	68fa      	ldr	r2, [r7, #12]
     3b2:	18d3      	adds	r3, r2, r3
     3b4:	781b      	ldrb	r3, [r3, #0]
     3b6:	b25b      	sxtb	r3, r3
     3b8:	2101      	movs	r1, #1
     3ba:	0018      	movs	r0, r3
     3bc:	4b37      	ldr	r3, [pc, #220]	; (49c <Element7SegGPIODriver_init+0x198>)
     3be:	4798      	blx	r3
	for(uint8_t i = 0; i < bit_count && i < MAX_ELEMENT_7SEG_GPIO_BITS; i++)
     3c0:	2317      	movs	r3, #23
     3c2:	18fb      	adds	r3, r7, r3
     3c4:	781a      	ldrb	r2, [r3, #0]
     3c6:	2317      	movs	r3, #23
     3c8:	18fb      	adds	r3, r7, r3
     3ca:	3201      	adds	r2, #1
     3cc:	701a      	strb	r2, [r3, #0]
     3ce:	2317      	movs	r3, #23
     3d0:	18fa      	adds	r2, r7, r3
     3d2:	230b      	movs	r3, #11
     3d4:	18fb      	adds	r3, r7, r3
     3d6:	7812      	ldrb	r2, [r2, #0]
     3d8:	781b      	ldrb	r3, [r3, #0]
     3da:	429a      	cmp	r2, r3
     3dc:	d204      	bcs.n	3e8 <Element7SegGPIODriver_init+0xe4>
     3de:	2317      	movs	r3, #23
     3e0:	18fb      	adds	r3, r7, r3
     3e2:	781b      	ldrb	r3, [r3, #0]
     3e4:	2b07      	cmp	r3, #7
     3e6:	d9be      	bls.n	366 <Element7SegGPIODriver_init+0x62>
		
	}

	segment_configs[current_display_count].num_digits = digit_count;
     3e8:	4b29      	ldr	r3, [pc, #164]	; (490 <Element7SegGPIODriver_init+0x18c>)
     3ea:	781b      	ldrb	r3, [r3, #0]
     3ec:	0019      	movs	r1, r3
     3ee:	4a29      	ldr	r2, [pc, #164]	; (494 <Element7SegGPIODriver_init+0x190>)
     3f0:	000b      	movs	r3, r1
     3f2:	00db      	lsls	r3, r3, #3
     3f4:	1a5b      	subs	r3, r3, r1
     3f6:	009b      	lsls	r3, r3, #2
     3f8:	18d3      	adds	r3, r2, r3
     3fa:	3301      	adds	r3, #1
     3fc:	220a      	movs	r2, #10
     3fe:	18ba      	adds	r2, r7, r2
     400:	7812      	ldrb	r2, [r2, #0]
     402:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < digit_count && i < MAX_ELEMENT_7SEG_GPIO_DIGITS; i++)
     404:	2316      	movs	r3, #22
     406:	18fb      	adds	r3, r7, r3
     408:	2200      	movs	r2, #0
     40a:	701a      	strb	r2, [r3, #0]
     40c:	e028      	b.n	460 <Element7SegGPIODriver_init+0x15c>
	{
		// Populate the display array.
		segment_configs[current_display_count].digit_location[i] = digit_locations[i];
     40e:	4b20      	ldr	r3, [pc, #128]	; (490 <Element7SegGPIODriver_init+0x18c>)
     410:	781b      	ldrb	r3, [r3, #0]
     412:	0018      	movs	r0, r3
     414:	2316      	movs	r3, #22
     416:	18fb      	adds	r3, r7, r3
     418:	781a      	ldrb	r2, [r3, #0]
     41a:	2316      	movs	r3, #22
     41c:	18fb      	adds	r3, r7, r3
     41e:	781b      	ldrb	r3, [r3, #0]
     420:	6879      	ldr	r1, [r7, #4]
     422:	18cb      	adds	r3, r1, r3
     424:	2400      	movs	r4, #0
     426:	571c      	ldrsb	r4, [r3, r4]
     428:	491a      	ldr	r1, [pc, #104]	; (494 <Element7SegGPIODriver_init+0x190>)
     42a:	0003      	movs	r3, r0
     42c:	00db      	lsls	r3, r3, #3
     42e:	1a1b      	subs	r3, r3, r0
     430:	009b      	lsls	r3, r3, #2
     432:	18cb      	adds	r3, r1, r3
     434:	189b      	adds	r3, r3, r2
     436:	330a      	adds	r3, #10
     438:	1c22      	adds	r2, r4, #0
     43a:	701a      	strb	r2, [r3, #0]

		// Ensure the GPIOs are setup for output.
		MorphGPIO_set_pin_direction(digit_locations[i], Output);
     43c:	2316      	movs	r3, #22
     43e:	18fb      	adds	r3, r7, r3
     440:	781b      	ldrb	r3, [r3, #0]
     442:	687a      	ldr	r2, [r7, #4]
     444:	18d3      	adds	r3, r2, r3
     446:	781b      	ldrb	r3, [r3, #0]
     448:	b25b      	sxtb	r3, r3
     44a:	2101      	movs	r1, #1
     44c:	0018      	movs	r0, r3
     44e:	4b12      	ldr	r3, [pc, #72]	; (498 <Element7SegGPIODriver_init+0x194>)
     450:	4798      	blx	r3
	for(uint8_t i = 0; i < digit_count && i < MAX_ELEMENT_7SEG_GPIO_DIGITS; i++)
     452:	2316      	movs	r3, #22
     454:	18fb      	adds	r3, r7, r3
     456:	781a      	ldrb	r2, [r3, #0]
     458:	2316      	movs	r3, #22
     45a:	18fb      	adds	r3, r7, r3
     45c:	3201      	adds	r2, #1
     45e:	701a      	strb	r2, [r3, #0]
     460:	2316      	movs	r3, #22
     462:	18fa      	adds	r2, r7, r3
     464:	230a      	movs	r3, #10
     466:	18fb      	adds	r3, r7, r3
     468:	7812      	ldrb	r2, [r2, #0]
     46a:	781b      	ldrb	r3, [r3, #0]
     46c:	429a      	cmp	r2, r3
     46e:	d204      	bcs.n	47a <Element7SegGPIODriver_init+0x176>
     470:	2316      	movs	r3, #22
     472:	18fb      	adds	r3, r7, r3
     474:	781b      	ldrb	r3, [r3, #0]
     476:	2b09      	cmp	r3, #9
     478:	d9c9      	bls.n	40e <Element7SegGPIODriver_init+0x10a>
	}
	
	current_display_count++;
     47a:	4b05      	ldr	r3, [pc, #20]	; (490 <Element7SegGPIODriver_init+0x18c>)
     47c:	781b      	ldrb	r3, [r3, #0]
     47e:	3301      	adds	r3, #1
     480:	b2da      	uxtb	r2, r3
     482:	4b03      	ldr	r3, [pc, #12]	; (490 <Element7SegGPIODriver_init+0x18c>)
     484:	701a      	strb	r2, [r3, #0]
     486:	e000      	b.n	48a <Element7SegGPIODriver_init+0x186>
		return;
     488:	46c0      	nop			; (mov r8, r8)
	
}
     48a:	46bd      	mov	sp, r7
     48c:	b007      	add	sp, #28
     48e:	bd90      	pop	{r4, r7, pc}
     490:	20000f34 	.word	0x20000f34
     494:	20000efc 	.word	0x20000efc
     498:	00002dcd 	.word	0x00002dcd
     49c:	00002dbd 	.word	0x00002dbd

000004a0 <Element7SegGPIODriver_update>:

void Element7SegGPIODriver_update()
{
     4a0:	b580      	push	{r7, lr}
     4a2:	b084      	sub	sp, #16
     4a4:	af00      	add	r7, sp, #0
	
	for(uint8_t i = 0; i < current_display_count; i ++)
     4a6:	230f      	movs	r3, #15
     4a8:	18fb      	adds	r3, r7, r3
     4aa:	2200      	movs	r2, #0
     4ac:	701a      	strb	r2, [r3, #0]
     4ae:	e080      	b.n	5b2 <Element7SegGPIODriver_update+0x112>
	{

		Element7SegGPIODriverStruct * driver_struct = &segment_configs[i];
     4b0:	230f      	movs	r3, #15
     4b2:	18fb      	adds	r3, r7, r3
     4b4:	781a      	ldrb	r2, [r3, #0]
     4b6:	0013      	movs	r3, r2
     4b8:	00db      	lsls	r3, r3, #3
     4ba:	1a9b      	subs	r3, r3, r2
     4bc:	009b      	lsls	r3, r3, #2
     4be:	4a43      	ldr	r2, [pc, #268]	; (5cc <Element7SegGPIODriver_update+0x12c>)
     4c0:	189b      	adds	r3, r3, r2
     4c2:	60bb      	str	r3, [r7, #8]

		// Turn off the current digit.
		MorphGPIO_set_pin_value(driver_struct->digit_location[driver_struct->current_digit], Low);
     4c4:	68bb      	ldr	r3, [r7, #8]
     4c6:	7d1b      	ldrb	r3, [r3, #20]
     4c8:	001a      	movs	r2, r3
     4ca:	68bb      	ldr	r3, [r7, #8]
     4cc:	189b      	adds	r3, r3, r2
     4ce:	7a9b      	ldrb	r3, [r3, #10]
     4d0:	b25b      	sxtb	r3, r3
     4d2:	2100      	movs	r1, #0
     4d4:	0018      	movs	r0, r3
     4d6:	4b3e      	ldr	r3, [pc, #248]	; (5d0 <Element7SegGPIODriver_update+0x130>)
     4d8:	4798      	blx	r3

		// Update the current digit to the correct digit.
		driver_struct->current_digit = (int16_t)(driver_struct->current_digit + 1) < driver_struct->num_digits ? driver_struct->current_digit + 1 : 0; 
     4da:	68bb      	ldr	r3, [r7, #8]
     4dc:	7d1b      	ldrb	r3, [r3, #20]
     4de:	b29b      	uxth	r3, r3
     4e0:	3301      	adds	r3, #1
     4e2:	b29b      	uxth	r3, r3
     4e4:	b21b      	sxth	r3, r3
     4e6:	001a      	movs	r2, r3
     4e8:	68bb      	ldr	r3, [r7, #8]
     4ea:	785b      	ldrb	r3, [r3, #1]
     4ec:	429a      	cmp	r2, r3
     4ee:	da04      	bge.n	4fa <Element7SegGPIODriver_update+0x5a>
     4f0:	68bb      	ldr	r3, [r7, #8]
     4f2:	7d1b      	ldrb	r3, [r3, #20]
     4f4:	3301      	adds	r3, #1
     4f6:	b2da      	uxtb	r2, r3
     4f8:	e000      	b.n	4fc <Element7SegGPIODriver_update+0x5c>
     4fa:	2200      	movs	r2, #0
     4fc:	68bb      	ldr	r3, [r7, #8]
     4fe:	751a      	strb	r2, [r3, #20]

		uint8_t new_byte = Element7Seg_get_byte(driver_struct->buffer, driver_struct->current_digit);			
     500:	68bb      	ldr	r3, [r7, #8]
     502:	699a      	ldr	r2, [r3, #24]
     504:	68bb      	ldr	r3, [r7, #8]
     506:	7d1b      	ldrb	r3, [r3, #20]
     508:	0019      	movs	r1, r3
     50a:	0010      	movs	r0, r2
     50c:	4b31      	ldr	r3, [pc, #196]	; (5d4 <Element7SegGPIODriver_update+0x134>)
     50e:	4798      	blx	r3
     510:	0002      	movs	r2, r0
     512:	1dfb      	adds	r3, r7, #7
     514:	701a      	strb	r2, [r3, #0]
		
		// Now, update the output
		for(uint8_t i = 0; i < driver_struct->num_bits; i ++)
     516:	230e      	movs	r3, #14
     518:	18fb      	adds	r3, r7, r3
     51a:	2200      	movs	r2, #0
     51c:	701a      	strb	r2, [r3, #0]
     51e:	e02f      	b.n	580 <Element7SegGPIODriver_update+0xe0>
		{

			// Throw the pin to High before setting it officially.
			MorphGPIO_set_pin_value(driver_struct->bit_locations[i], High);
     520:	230e      	movs	r3, #14
     522:	18fb      	adds	r3, r7, r3
     524:	781b      	ldrb	r3, [r3, #0]
     526:	68ba      	ldr	r2, [r7, #8]
     528:	18d3      	adds	r3, r2, r3
     52a:	789b      	ldrb	r3, [r3, #2]
     52c:	b25b      	sxtb	r3, r3
     52e:	2101      	movs	r1, #1
     530:	0018      	movs	r0, r3
     532:	4b27      	ldr	r3, [pc, #156]	; (5d0 <Element7SegGPIODriver_update+0x130>)
     534:	4798      	blx	r3

			enum MorphPinValue val = Element7Seg_get_bit(driver_struct->buffer, driver_struct->current_digit, i) == 0 ? High : Low;
     536:	68bb      	ldr	r3, [r7, #8]
     538:	6998      	ldr	r0, [r3, #24]
     53a:	68bb      	ldr	r3, [r7, #8]
     53c:	7d1b      	ldrb	r3, [r3, #20]
     53e:	0019      	movs	r1, r3
     540:	230e      	movs	r3, #14
     542:	18fb      	adds	r3, r7, r3
     544:	781b      	ldrb	r3, [r3, #0]
     546:	001a      	movs	r2, r3
     548:	4b23      	ldr	r3, [pc, #140]	; (5d8 <Element7SegGPIODriver_update+0x138>)
     54a:	4798      	blx	r3
     54c:	0003      	movs	r3, r0
     54e:	425a      	negs	r2, r3
     550:	4153      	adcs	r3, r2
     552:	b2da      	uxtb	r2, r3
     554:	1dbb      	adds	r3, r7, #6
     556:	701a      	strb	r2, [r3, #0]

			MorphGPIO_set_pin_value(driver_struct->bit_locations[i], val);
     558:	230e      	movs	r3, #14
     55a:	18fb      	adds	r3, r7, r3
     55c:	781b      	ldrb	r3, [r3, #0]
     55e:	68ba      	ldr	r2, [r7, #8]
     560:	18d3      	adds	r3, r2, r3
     562:	2202      	movs	r2, #2
     564:	569a      	ldrsb	r2, [r3, r2]
     566:	1dbb      	adds	r3, r7, #6
     568:	781b      	ldrb	r3, [r3, #0]
     56a:	0019      	movs	r1, r3
     56c:	0010      	movs	r0, r2
     56e:	4b18      	ldr	r3, [pc, #96]	; (5d0 <Element7SegGPIODriver_update+0x130>)
     570:	4798      	blx	r3
		for(uint8_t i = 0; i < driver_struct->num_bits; i ++)
     572:	230e      	movs	r3, #14
     574:	18fb      	adds	r3, r7, r3
     576:	781a      	ldrb	r2, [r3, #0]
     578:	230e      	movs	r3, #14
     57a:	18fb      	adds	r3, r7, r3
     57c:	3201      	adds	r2, #1
     57e:	701a      	strb	r2, [r3, #0]
     580:	68bb      	ldr	r3, [r7, #8]
     582:	781b      	ldrb	r3, [r3, #0]
     584:	220e      	movs	r2, #14
     586:	18ba      	adds	r2, r7, r2
     588:	7812      	ldrb	r2, [r2, #0]
     58a:	429a      	cmp	r2, r3
     58c:	d3c8      	bcc.n	520 <Element7SegGPIODriver_update+0x80>

		}

		// Turn the new digit on.
		MorphGPIO_set_pin_value(driver_struct->digit_location[driver_struct->current_digit], High);
     58e:	68bb      	ldr	r3, [r7, #8]
     590:	7d1b      	ldrb	r3, [r3, #20]
     592:	001a      	movs	r2, r3
     594:	68bb      	ldr	r3, [r7, #8]
     596:	189b      	adds	r3, r3, r2
     598:	7a9b      	ldrb	r3, [r3, #10]
     59a:	b25b      	sxtb	r3, r3
     59c:	2101      	movs	r1, #1
     59e:	0018      	movs	r0, r3
     5a0:	4b0b      	ldr	r3, [pc, #44]	; (5d0 <Element7SegGPIODriver_update+0x130>)
     5a2:	4798      	blx	r3
	for(uint8_t i = 0; i < current_display_count; i ++)
     5a4:	230f      	movs	r3, #15
     5a6:	18fb      	adds	r3, r7, r3
     5a8:	781a      	ldrb	r2, [r3, #0]
     5aa:	230f      	movs	r3, #15
     5ac:	18fb      	adds	r3, r7, r3
     5ae:	3201      	adds	r2, #1
     5b0:	701a      	strb	r2, [r3, #0]
     5b2:	4b0a      	ldr	r3, [pc, #40]	; (5dc <Element7SegGPIODriver_update+0x13c>)
     5b4:	781b      	ldrb	r3, [r3, #0]
     5b6:	220f      	movs	r2, #15
     5b8:	18ba      	adds	r2, r7, r2
     5ba:	7812      	ldrb	r2, [r2, #0]
     5bc:	429a      	cmp	r2, r3
     5be:	d200      	bcs.n	5c2 <Element7SegGPIODriver_update+0x122>
     5c0:	e776      	b.n	4b0 <Element7SegGPIODriver_update+0x10>
		
	}
	
	
}
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	46bd      	mov	sp, r7
     5c6:	b004      	add	sp, #16
     5c8:	bd80      	pop	{r7, pc}
     5ca:	46c0      	nop			; (mov r8, r8)
     5cc:	20000efc 	.word	0x20000efc
     5d0:	00002dbd 	.word	0x00002dbd
     5d4:	000002c1 	.word	0x000002c1
     5d8:	00000259 	.word	0x00000259
     5dc:	20000f34 	.word	0x20000f34

000005e0 <MorphUtils_empty_callback>:
static void MorphUtils_empty_callback(){
     5e0:	b580      	push	{r7, lr}
     5e2:	af00      	add	r7, sp, #0
}
     5e4:	46c0      	nop			; (mov r8, r8)
     5e6:	46bd      	mov	sp, r7
     5e8:	bd80      	pop	{r7, pc}
	...

000005ec <ElementAnimationEngine_get_current_frame>:
#include <stddef.h>

#include "include/ElementAnimationEngine.h"

int32_t ElementAnimationEngine_get_current_frame(ElementCalculatedAnimationInstance * animation)
{
     5ec:	b590      	push	{r4, r7, lr}
     5ee:	b08f      	sub	sp, #60	; 0x3c
     5f0:	af00      	add	r7, sp, #0
     5f2:	6078      	str	r0, [r7, #4]
	ElementCalculatedAnimationInstance * anim_inst = animation;
     5f4:	687b      	ldr	r3, [r7, #4]
     5f6:	633b      	str	r3, [r7, #48]	; 0x30
		
	MorphTimeValue cur_time = MorphTime_millis();
     5f8:	4b3d      	ldr	r3, [pc, #244]	; (6f0 <ElementAnimationEngine_get_current_frame+0x104>)
     5fa:	4798      	blx	r3
     5fc:	0003      	movs	r3, r0
     5fe:	62bb      	str	r3, [r7, #40]	; 0x28
     600:	17db      	asrs	r3, r3, #31
     602:	62fb      	str	r3, [r7, #44]	; 0x2c
		
	MorphTimeValue start_time = anim_inst->start_time;
     604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     606:	6a5c      	ldr	r4, [r3, #36]	; 0x24
     608:	6a1b      	ldr	r3, [r3, #32]
     60a:	623b      	str	r3, [r7, #32]
     60c:	627c      	str	r4, [r7, #36]	; 0x24
		
	MorphTimeValue elapsed_time = cur_time - start_time;
     60e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
     610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     612:	6a3b      	ldr	r3, [r7, #32]
     614:	6a7c      	ldr	r4, [r7, #36]	; 0x24
     616:	1ac9      	subs	r1, r1, r3
     618:	41a2      	sbcs	r2, r4
     61a:	000b      	movs	r3, r1
     61c:	0014      	movs	r4, r2
     61e:	61bb      	str	r3, [r7, #24]
     620:	61fc      	str	r4, [r7, #28]
		
	int32_t current_frame = 0;
     622:	2300      	movs	r3, #0
     624:	637b      	str	r3, [r7, #52]	; 0x34
		
	// Is the animation paused? If it is, we don't have to calculate the current frame!

	if(anim_inst->is_running)
     626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     628:	7e5b      	ldrb	r3, [r3, #25]
     62a:	2b00      	cmp	r3, #0
     62c:	d057      	beq.n	6de <ElementAnimationEngine_get_current_frame+0xf2>
	{
			
		// It's not paused. Calculate the frame!
			
		// How many milliseconds does the current animation take?
		MorphTimeValue animation_duration_ms = ((float)anim_inst->num_frames / (float)anim_inst->framerate) * 1000;
     62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     630:	891a      	ldrh	r2, [r3, #8]
     632:	4b30      	ldr	r3, [pc, #192]	; (6f4 <ElementAnimationEngine_get_current_frame+0x108>)
     634:	0010      	movs	r0, r2
     636:	4798      	blx	r3
     638:	1c04      	adds	r4, r0, #0
     63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     63c:	789a      	ldrb	r2, [r3, #2]
     63e:	4b2d      	ldr	r3, [pc, #180]	; (6f4 <ElementAnimationEngine_get_current_frame+0x108>)
     640:	0010      	movs	r0, r2
     642:	4798      	blx	r3
     644:	1c02      	adds	r2, r0, #0
     646:	4b2c      	ldr	r3, [pc, #176]	; (6f8 <ElementAnimationEngine_get_current_frame+0x10c>)
     648:	1c11      	adds	r1, r2, #0
     64a:	1c20      	adds	r0, r4, #0
     64c:	4798      	blx	r3
     64e:	1c03      	adds	r3, r0, #0
     650:	1c1a      	adds	r2, r3, #0
     652:	4b2a      	ldr	r3, [pc, #168]	; (6fc <ElementAnimationEngine_get_current_frame+0x110>)
     654:	492a      	ldr	r1, [pc, #168]	; (700 <ElementAnimationEngine_get_current_frame+0x114>)
     656:	1c10      	adds	r0, r2, #0
     658:	4798      	blx	r3
     65a:	1c03      	adds	r3, r0, #0
     65c:	1c1a      	adds	r2, r3, #0
     65e:	4b29      	ldr	r3, [pc, #164]	; (704 <ElementAnimationEngine_get_current_frame+0x118>)
     660:	1c10      	adds	r0, r2, #0
     662:	4798      	blx	r3
     664:	0003      	movs	r3, r0
     666:	000c      	movs	r4, r1
     668:	613b      	str	r3, [r7, #16]
     66a:	617c      	str	r4, [r7, #20]

		MorphTimeValue frame_duration_ms = 1000 / anim_inst->framerate;
     66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     66e:	789b      	ldrb	r3, [r3, #2]
     670:	001a      	movs	r2, r3
     672:	4b25      	ldr	r3, [pc, #148]	; (708 <ElementAnimationEngine_get_current_frame+0x11c>)
     674:	0011      	movs	r1, r2
     676:	22fa      	movs	r2, #250	; 0xfa
     678:	0090      	lsls	r0, r2, #2
     67a:	4798      	blx	r3
     67c:	0003      	movs	r3, r0
     67e:	60bb      	str	r3, [r7, #8]
     680:	17db      	asrs	r3, r3, #31
     682:	60fb      	str	r3, [r7, #12]

		// Is this animation supposed to loop?
		if(!anim_inst->is_repeating && animation_duration_ms < elapsed_time)
     684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     686:	2232      	movs	r2, #50	; 0x32
     688:	5c9b      	ldrb	r3, [r3, r2]
     68a:	2201      	movs	r2, #1
     68c:	4053      	eors	r3, r2
     68e:	b2db      	uxtb	r3, r3
     690:	2b00      	cmp	r3, #0
     692:	d00b      	beq.n	6ac <ElementAnimationEngine_get_current_frame+0xc0>
     694:	69fa      	ldr	r2, [r7, #28]
     696:	697b      	ldr	r3, [r7, #20]
     698:	429a      	cmp	r2, r3
     69a:	d823      	bhi.n	6e4 <ElementAnimationEngine_get_current_frame+0xf8>
     69c:	69fa      	ldr	r2, [r7, #28]
     69e:	697b      	ldr	r3, [r7, #20]
     6a0:	429a      	cmp	r2, r3
     6a2:	d103      	bne.n	6ac <ElementAnimationEngine_get_current_frame+0xc0>
     6a4:	69ba      	ldr	r2, [r7, #24]
     6a6:	693b      	ldr	r3, [r7, #16]
     6a8:	429a      	cmp	r2, r3
     6aa:	d81b      	bhi.n	6e4 <ElementAnimationEngine_get_current_frame+0xf8>
		else
		{
			// Either the animation is supposed to loop, or the animation hasn't reached the end yet.
				
			// Find the current millisecond in the animation, then translate that to a frame.
			current_frame = ((elapsed_time % animation_duration_ms) - anim_inst->offset_time) / frame_duration_ms;
     6ac:	69b8      	ldr	r0, [r7, #24]
     6ae:	69f9      	ldr	r1, [r7, #28]
     6b0:	4c16      	ldr	r4, [pc, #88]	; (70c <ElementAnimationEngine_get_current_frame+0x120>)
     6b2:	693a      	ldr	r2, [r7, #16]
     6b4:	697b      	ldr	r3, [r7, #20]
     6b6:	47a0      	blx	r4
     6b8:	001c      	movs	r4, r3
     6ba:	0013      	movs	r3, r2
     6bc:	0019      	movs	r1, r3
     6be:	0022      	movs	r2, r4
     6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     6c2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
     6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     6c6:	1ac9      	subs	r1, r1, r3
     6c8:	41a2      	sbcs	r2, r4
     6ca:	0008      	movs	r0, r1
     6cc:	0011      	movs	r1, r2
     6ce:	4c0f      	ldr	r4, [pc, #60]	; (70c <ElementAnimationEngine_get_current_frame+0x120>)
     6d0:	68ba      	ldr	r2, [r7, #8]
     6d2:	68fb      	ldr	r3, [r7, #12]
     6d4:	47a0      	blx	r4
     6d6:	0003      	movs	r3, r0
     6d8:	000c      	movs	r4, r1
     6da:	637b      	str	r3, [r7, #52]	; 0x34
     6dc:	e002      	b.n	6e4 <ElementAnimationEngine_get_current_frame+0xf8>
	}
	else
	{

		// The animation is paused, simply take the current frame.
		current_frame = anim_inst->current_frame;
     6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     6e0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
     6e2:	637b      	str	r3, [r7, #52]	; 0x34
			
	}
	
	return current_frame;
     6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	
}
     6e6:	0018      	movs	r0, r3
     6e8:	46bd      	mov	sp, r7
     6ea:	b00f      	add	sp, #60	; 0x3c
     6ec:	bd90      	pop	{r4, r7, pc}
     6ee:	46c0      	nop			; (mov r8, r8)
     6f0:	00002e25 	.word	0x00002e25
     6f4:	00003859 	.word	0x00003859
     6f8:	00003389 	.word	0x00003389
     6fc:	00003619 	.word	0x00003619
     700:	447a0000 	.word	0x447a0000
     704:	000031c9 	.word	0x000031c9
     708:	00002fb1 	.word	0x00002fb1
     70c:	00003189 	.word	0x00003189

00000710 <isolate_bits>:

uint8_t isolate_bits(uint8_t val, int8_t start_bit, int8_t length, uint8_t *result)
{
     710:	b590      	push	{r4, r7, lr}
     712:	b085      	sub	sp, #20
     714:	af00      	add	r7, sp, #0
     716:	0004      	movs	r4, r0
     718:	0008      	movs	r0, r1
     71a:	0011      	movs	r1, r2
     71c:	603b      	str	r3, [r7, #0]
     71e:	1dfb      	adds	r3, r7, #7
     720:	1c22      	adds	r2, r4, #0
     722:	701a      	strb	r2, [r3, #0]
     724:	1dbb      	adds	r3, r7, #6
     726:	1c02      	adds	r2, r0, #0
     728:	701a      	strb	r2, [r3, #0]
     72a:	1d7b      	adds	r3, r7, #5
     72c:	1c0a      	adds	r2, r1, #0
     72e:	701a      	strb	r2, [r3, #0]
	// Just act like this works.	
	uint8_t mask_size = 0;
     730:	230f      	movs	r3, #15
     732:	18fb      	adds	r3, r7, r3
     734:	2200      	movs	r2, #0
     736:	701a      	strb	r2, [r3, #0]

	if(start_bit + 1 >= length)
     738:	1dbb      	adds	r3, r7, #6
     73a:	781b      	ldrb	r3, [r3, #0]
     73c:	b25b      	sxtb	r3, r3
     73e:	1c5a      	adds	r2, r3, #1
     740:	1d7b      	adds	r3, r7, #5
     742:	781b      	ldrb	r3, [r3, #0]
     744:	b25b      	sxtb	r3, r3
     746:	429a      	cmp	r2, r3
     748:	db05      	blt.n	756 <isolate_bits+0x46>
	{
		// This is a fine size. We can be full length!
		mask_size = length;
     74a:	230f      	movs	r3, #15
     74c:	18fb      	adds	r3, r7, r3
     74e:	1d7a      	adds	r2, r7, #5
     750:	7812      	ldrb	r2, [r2, #0]
     752:	701a      	strb	r2, [r3, #0]
     754:	e005      	b.n	762 <isolate_bits+0x52>
	}
	else
	{
		// This is small. Can't be full length.
		mask_size = (start_bit + 1);
     756:	1dbb      	adds	r3, r7, #6
     758:	781a      	ldrb	r2, [r3, #0]
     75a:	230f      	movs	r3, #15
     75c:	18fb      	adds	r3, r7, r3
     75e:	3201      	adds	r2, #1
     760:	701a      	strb	r2, [r3, #0]
	}

	// How far over do we have to shift?
	int8_t shift_size = start_bit + 1 - length;
     762:	1dbb      	adds	r3, r7, #6
     764:	781a      	ldrb	r2, [r3, #0]
     766:	1d7b      	adds	r3, r7, #5
     768:	781b      	ldrb	r3, [r3, #0]
     76a:	1ad3      	subs	r3, r2, r3
     76c:	b2db      	uxtb	r3, r3
     76e:	3301      	adds	r3, #1
     770:	b2da      	uxtb	r2, r3
     772:	230e      	movs	r3, #14
     774:	18fb      	adds	r3, r7, r3
     776:	701a      	strb	r2, [r3, #0]
	
	if(shift_size < 0)
     778:	230e      	movs	r3, #14
     77a:	18fb      	adds	r3, r7, r3
     77c:	781b      	ldrb	r3, [r3, #0]
     77e:	2b7f      	cmp	r3, #127	; 0x7f
     780:	d903      	bls.n	78a <isolate_bits+0x7a>
		shift_size = 0;
     782:	230e      	movs	r3, #14
     784:	18fb      	adds	r3, r7, r3
     786:	2200      	movs	r2, #0
     788:	701a      	strb	r2, [r3, #0]
		
		   // create the mask | shift into position | Apply | Shift back
	*result = ((~(~(0x0) << mask_size) << shift_size) & val) >> shift_size;
     78a:	230f      	movs	r3, #15
     78c:	18fb      	adds	r3, r7, r3
     78e:	781b      	ldrb	r3, [r3, #0]
     790:	2201      	movs	r2, #1
     792:	4252      	negs	r2, r2
     794:	409a      	lsls	r2, r3
     796:	0013      	movs	r3, r2
     798:	43da      	mvns	r2, r3
     79a:	230e      	movs	r3, #14
     79c:	18fb      	adds	r3, r7, r3
     79e:	781b      	ldrb	r3, [r3, #0]
     7a0:	b25b      	sxtb	r3, r3
     7a2:	409a      	lsls	r2, r3
     7a4:	0013      	movs	r3, r2
     7a6:	1dfa      	adds	r2, r7, #7
     7a8:	7812      	ldrb	r2, [r2, #0]
     7aa:	401a      	ands	r2, r3
     7ac:	230e      	movs	r3, #14
     7ae:	18fb      	adds	r3, r7, r3
     7b0:	781b      	ldrb	r3, [r3, #0]
     7b2:	b25b      	sxtb	r3, r3
     7b4:	411a      	asrs	r2, r3
     7b6:	0013      	movs	r3, r2
     7b8:	b2da      	uxtb	r2, r3
     7ba:	683b      	ldr	r3, [r7, #0]
     7bc:	701a      	strb	r2, [r3, #0]
	
	return mask_size;
     7be:	230f      	movs	r3, #15
     7c0:	18fb      	adds	r3, r7, r3
     7c2:	781b      	ldrb	r3, [r3, #0]

}
     7c4:	0018      	movs	r0, r3
     7c6:	46bd      	mov	sp, r7
     7c8:	b005      	add	sp, #20
     7ca:	bd90      	pop	{r4, r7, pc}

000007cc <ElementAnimationEngine_access_bits>:

// The "size" is in bit_depth sized units.
uint8_t ElementAnimationEngine_access_bits(uint8_t * frame, uint8_t bit_depth, uint16_t x_size, uint16_t y_size, uint16_t x_pixel, uint16_t y_pixel)
{
     7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     7ce:	46ce      	mov	lr, r9
     7d0:	4647      	mov	r7, r8
     7d2:	b580      	push	{r7, lr}
     7d4:	b08f      	sub	sp, #60	; 0x3c
     7d6:	af00      	add	r7, sp, #0
     7d8:	61f8      	str	r0, [r7, #28]
     7da:	000c      	movs	r4, r1
     7dc:	0010      	movs	r0, r2
     7de:	0019      	movs	r1, r3
     7e0:	230b      	movs	r3, #11
     7e2:	2210      	movs	r2, #16
     7e4:	4694      	mov	ip, r2
     7e6:	44bc      	add	ip, r7
     7e8:	4463      	add	r3, ip
     7ea:	1c22      	adds	r2, r4, #0
     7ec:	701a      	strb	r2, [r3, #0]
     7ee:	2308      	movs	r3, #8
     7f0:	2210      	movs	r2, #16
     7f2:	4694      	mov	ip, r2
     7f4:	44bc      	add	ip, r7
     7f6:	4463      	add	r3, ip
     7f8:	1c02      	adds	r2, r0, #0
     7fa:	801a      	strh	r2, [r3, #0]
     7fc:	2316      	movs	r3, #22
     7fe:	18fb      	adds	r3, r7, r3
     800:	1c0a      	adds	r2, r1, #0
     802:	801a      	strh	r2, [r3, #0]
	
	uint64_t result = 0;
     804:	2300      	movs	r3, #0
     806:	2400      	movs	r4, #0
     808:	62bb      	str	r3, [r7, #40]	; 0x28
     80a:	62fc      	str	r4, [r7, #44]	; 0x2c
	
	// This access type uses a row-major model. Arrays are allocated array[y][x], for example. This allows the memory to formatted in a nice way in memory.
	uint8_t trailing_bits_remainder = x_size % bit_depth;
     80c:	2308      	movs	r3, #8
     80e:	2210      	movs	r2, #16
     810:	4694      	mov	ip, r2
     812:	44bc      	add	ip, r7
     814:	4463      	add	r3, ip
     816:	881a      	ldrh	r2, [r3, #0]
     818:	230b      	movs	r3, #11
     81a:	2110      	movs	r1, #16
     81c:	468c      	mov	ip, r1
     81e:	44bc      	add	ip, r7
     820:	4463      	add	r3, ip
     822:	7819      	ldrb	r1, [r3, #0]
     824:	4b9d      	ldr	r3, [pc, #628]	; (a9c <ElementAnimationEngine_access_bits+0x2d0>)
     826:	0010      	movs	r0, r2
     828:	4798      	blx	r3
     82a:	000b      	movs	r3, r1
     82c:	001a      	movs	r2, r3
     82e:	2326      	movs	r3, #38	; 0x26
     830:	2110      	movs	r1, #16
     832:	468c      	mov	ip, r1
     834:	44bc      	add	ip, r7
     836:	4463      	add	r3, ip
     838:	701a      	strb	r2, [r3, #0]
	
	// First, which bit are we on?
	uint16_t bit_offset = x_pixel * bit_depth + (y_pixel * x_size * bit_depth);
     83a:	2340      	movs	r3, #64	; 0x40
     83c:	2208      	movs	r2, #8
     83e:	4694      	mov	ip, r2
     840:	2210      	movs	r2, #16
     842:	4690      	mov	r8, r2
     844:	44b8      	add	r8, r7
     846:	44c4      	add	ip, r8
     848:	4463      	add	r3, ip
     84a:	881a      	ldrh	r2, [r3, #0]
     84c:	2344      	movs	r3, #68	; 0x44
     84e:	2108      	movs	r1, #8
     850:	468c      	mov	ip, r1
     852:	2110      	movs	r1, #16
     854:	4688      	mov	r8, r1
     856:	44b8      	add	r8, r7
     858:	44c4      	add	ip, r8
     85a:	4463      	add	r3, ip
     85c:	881b      	ldrh	r3, [r3, #0]
     85e:	2108      	movs	r1, #8
     860:	2010      	movs	r0, #16
     862:	4684      	mov	ip, r0
     864:	44bc      	add	ip, r7
     866:	4461      	add	r1, ip
     868:	8809      	ldrh	r1, [r1, #0]
     86a:	434b      	muls	r3, r1
     86c:	18d3      	adds	r3, r2, r3
     86e:	b29a      	uxth	r2, r3
     870:	230b      	movs	r3, #11
     872:	2110      	movs	r1, #16
     874:	468c      	mov	ip, r1
     876:	44bc      	add	ip, r7
     878:	4463      	add	r3, ip
     87a:	781b      	ldrb	r3, [r3, #0]
     87c:	b299      	uxth	r1, r3
     87e:	2324      	movs	r3, #36	; 0x24
     880:	2010      	movs	r0, #16
     882:	4684      	mov	ip, r0
     884:	44bc      	add	ip, r7
     886:	4463      	add	r3, ip
     888:	434a      	muls	r2, r1
     88a:	801a      	strh	r2, [r3, #0]
	
	// Okay, which byte is that in?
	uint16_t start_byte = bit_offset / 8;
     88c:	2322      	movs	r3, #34	; 0x22
     88e:	2210      	movs	r2, #16
     890:	4694      	mov	ip, r2
     892:	44bc      	add	ip, r7
     894:	4463      	add	r3, ip
     896:	2224      	movs	r2, #36	; 0x24
     898:	2110      	movs	r1, #16
     89a:	468c      	mov	ip, r1
     89c:	44bc      	add	ip, r7
     89e:	4462      	add	r2, ip
     8a0:	8812      	ldrh	r2, [r2, #0]
     8a2:	08d2      	lsrs	r2, r2, #3
     8a4:	801a      	strh	r2, [r3, #0]

	// Nice. Which bit in that byte?
	uint8_t in_byte_location = 7 - (bit_offset % 8);
     8a6:	2324      	movs	r3, #36	; 0x24
     8a8:	2210      	movs	r2, #16
     8aa:	4694      	mov	ip, r2
     8ac:	44bc      	add	ip, r7
     8ae:	4463      	add	r3, ip
     8b0:	881b      	ldrh	r3, [r3, #0]
     8b2:	b2db      	uxtb	r3, r3
     8b4:	43db      	mvns	r3, r3
     8b6:	b2da      	uxtb	r2, r3
     8b8:	2321      	movs	r3, #33	; 0x21
     8ba:	2110      	movs	r1, #16
     8bc:	468c      	mov	ip, r1
     8be:	44bc      	add	ip, r7
     8c0:	4463      	add	r3, ip
     8c2:	2107      	movs	r1, #7
     8c4:	400a      	ands	r2, r1
     8c6:	701a      	strb	r2, [r3, #0]
	
	// Hey, lets go ahead, isolate those bits and apply them to the result.
	uint8_t cur_bit_offset = bit_offset + isolate_bits(*(frame + start_byte), in_byte_location, bit_depth, &result);
     8c8:	2324      	movs	r3, #36	; 0x24
     8ca:	2210      	movs	r2, #16
     8cc:	4694      	mov	ip, r2
     8ce:	44bc      	add	ip, r7
     8d0:	4463      	add	r3, ip
     8d2:	881b      	ldrh	r3, [r3, #0]
     8d4:	b2db      	uxtb	r3, r3
     8d6:	4699      	mov	r9, r3
     8d8:	2322      	movs	r3, #34	; 0x22
     8da:	2210      	movs	r2, #16
     8dc:	4694      	mov	ip, r2
     8de:	44bc      	add	ip, r7
     8e0:	4463      	add	r3, ip
     8e2:	881b      	ldrh	r3, [r3, #0]
     8e4:	69fa      	ldr	r2, [r7, #28]
     8e6:	18d3      	adds	r3, r2, r3
     8e8:	7818      	ldrb	r0, [r3, #0]
     8ea:	2321      	movs	r3, #33	; 0x21
     8ec:	2210      	movs	r2, #16
     8ee:	4694      	mov	ip, r2
     8f0:	44bc      	add	ip, r7
     8f2:	4463      	add	r3, ip
     8f4:	2100      	movs	r1, #0
     8f6:	5659      	ldrsb	r1, [r3, r1]
     8f8:	230b      	movs	r3, #11
     8fa:	2210      	movs	r2, #16
     8fc:	4694      	mov	ip, r2
     8fe:	44bc      	add	ip, r7
     900:	4463      	add	r3, ip
     902:	2200      	movs	r2, #0
     904:	569a      	ldrsb	r2, [r3, r2]
     906:	2318      	movs	r3, #24
     908:	2410      	movs	r4, #16
     90a:	46a4      	mov	ip, r4
     90c:	44bc      	add	ip, r7
     90e:	4463      	add	r3, ip
     910:	4c63      	ldr	r4, [pc, #396]	; (aa0 <ElementAnimationEngine_access_bits+0x2d4>)
     912:	46a0      	mov	r8, r4
     914:	47c0      	blx	r8
     916:	0003      	movs	r3, r0
     918:	001a      	movs	r2, r3
     91a:	2327      	movs	r3, #39	; 0x27
     91c:	2110      	movs	r1, #16
     91e:	468c      	mov	ip, r1
     920:	44bc      	add	ip, r7
     922:	4463      	add	r3, ip
     924:	444a      	add	r2, r9
     926:	701a      	strb	r2, [r3, #0]
	
	while(cur_bit_offset - bit_offset < bit_depth)
     928:	e098      	b.n	a5c <ElementAnimationEngine_access_bits+0x290>
	{
		uint8_t new_bits;

		// Now which byte are we in?
		start_byte = cur_bit_offset / 8;
     92a:	2327      	movs	r3, #39	; 0x27
     92c:	2210      	movs	r2, #16
     92e:	4694      	mov	ip, r2
     930:	44bc      	add	ip, r7
     932:	4463      	add	r3, ip
     934:	781b      	ldrb	r3, [r3, #0]
     936:	08db      	lsrs	r3, r3, #3
     938:	b2da      	uxtb	r2, r3
     93a:	2322      	movs	r3, #34	; 0x22
     93c:	2110      	movs	r1, #16
     93e:	468c      	mov	ip, r1
     940:	44bc      	add	ip, r7
     942:	4463      	add	r3, ip
     944:	801a      	strh	r2, [r3, #0]

		// Nice. Which bit in that byte?
		in_byte_location = 7 - (cur_bit_offset % 8);
     946:	2327      	movs	r3, #39	; 0x27
     948:	2210      	movs	r2, #16
     94a:	4694      	mov	ip, r2
     94c:	44bc      	add	ip, r7
     94e:	4463      	add	r3, ip
     950:	781b      	ldrb	r3, [r3, #0]
     952:	43db      	mvns	r3, r3
     954:	b2da      	uxtb	r2, r3
     956:	2321      	movs	r3, #33	; 0x21
     958:	2110      	movs	r1, #16
     95a:	468c      	mov	ip, r1
     95c:	44bc      	add	ip, r7
     95e:	4463      	add	r3, ip
     960:	2107      	movs	r1, #7
     962:	400a      	ands	r2, r1
     964:	701a      	strb	r2, [r3, #0]
		
		uint8_t return_size = isolate_bits(*(frame + start_byte), in_byte_location, bit_depth - (cur_bit_offset - bit_offset), &new_bits);
     966:	2322      	movs	r3, #34	; 0x22
     968:	2210      	movs	r2, #16
     96a:	4694      	mov	ip, r2
     96c:	44bc      	add	ip, r7
     96e:	4463      	add	r3, ip
     970:	881b      	ldrh	r3, [r3, #0]
     972:	69fa      	ldr	r2, [r7, #28]
     974:	18d3      	adds	r3, r2, r3
     976:	7818      	ldrb	r0, [r3, #0]
     978:	2321      	movs	r3, #33	; 0x21
     97a:	2210      	movs	r2, #16
     97c:	4694      	mov	ip, r2
     97e:	44bc      	add	ip, r7
     980:	4463      	add	r3, ip
     982:	2100      	movs	r1, #0
     984:	5659      	ldrsb	r1, [r3, r1]
     986:	2324      	movs	r3, #36	; 0x24
     988:	2210      	movs	r2, #16
     98a:	4694      	mov	ip, r2
     98c:	44bc      	add	ip, r7
     98e:	4463      	add	r3, ip
     990:	881b      	ldrh	r3, [r3, #0]
     992:	b2da      	uxtb	r2, r3
     994:	2327      	movs	r3, #39	; 0x27
     996:	2410      	movs	r4, #16
     998:	46a4      	mov	ip, r4
     99a:	44bc      	add	ip, r7
     99c:	4463      	add	r3, ip
     99e:	781b      	ldrb	r3, [r3, #0]
     9a0:	1ad3      	subs	r3, r2, r3
     9a2:	b2da      	uxtb	r2, r3
     9a4:	230b      	movs	r3, #11
     9a6:	2410      	movs	r4, #16
     9a8:	46a4      	mov	ip, r4
     9aa:	44bc      	add	ip, r7
     9ac:	4463      	add	r3, ip
     9ae:	781b      	ldrb	r3, [r3, #0]
     9b0:	18d3      	adds	r3, r2, r3
     9b2:	b2db      	uxtb	r3, r3
     9b4:	b25a      	sxtb	r2, r3
     9b6:	2320      	movs	r3, #32
     9b8:	4699      	mov	r9, r3
     9ba:	2310      	movs	r3, #16
     9bc:	469c      	mov	ip, r3
     9be:	44bc      	add	ip, r7
     9c0:	44e1      	add	r9, ip
     9c2:	2317      	movs	r3, #23
     9c4:	2410      	movs	r4, #16
     9c6:	46a4      	mov	ip, r4
     9c8:	44bc      	add	ip, r7
     9ca:	4463      	add	r3, ip
     9cc:	4c34      	ldr	r4, [pc, #208]	; (aa0 <ElementAnimationEngine_access_bits+0x2d4>)
     9ce:	46a0      	mov	r8, r4
     9d0:	47c0      	blx	r8
     9d2:	0003      	movs	r3, r0
     9d4:	464a      	mov	r2, r9
     9d6:	7013      	strb	r3, [r2, #0]

		// Shift the new bits into the result variable.
		result = result << return_size | new_bits;
     9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
     9da:	6afc      	ldr	r4, [r7, #44]	; 0x2c
     9dc:	2220      	movs	r2, #32
     9de:	2110      	movs	r1, #16
     9e0:	468c      	mov	ip, r1
     9e2:	44bc      	add	ip, r7
     9e4:	4462      	add	r2, ip
     9e6:	7812      	ldrb	r2, [r2, #0]
     9e8:	0011      	movs	r1, r2
     9ea:	3920      	subs	r1, #32
     9ec:	2900      	cmp	r1, #0
     9ee:	db03      	blt.n	9f8 <ElementAnimationEngine_access_bits+0x22c>
     9f0:	0018      	movs	r0, r3
     9f2:	4088      	lsls	r0, r1
     9f4:	0006      	movs	r6, r0
     9f6:	e008      	b.n	a0a <ElementAnimationEngine_access_bits+0x23e>
     9f8:	2120      	movs	r1, #32
     9fa:	1a89      	subs	r1, r1, r2
     9fc:	0018      	movs	r0, r3
     9fe:	40c8      	lsrs	r0, r1
     a00:	0001      	movs	r1, r0
     a02:	0020      	movs	r0, r4
     a04:	4090      	lsls	r0, r2
     a06:	0006      	movs	r6, r0
     a08:	430e      	orrs	r6, r1
     a0a:	4093      	lsls	r3, r2
     a0c:	001d      	movs	r5, r3
     a0e:	2317      	movs	r3, #23
     a10:	2210      	movs	r2, #16
     a12:	4694      	mov	ip, r2
     a14:	44bc      	add	ip, r7
     a16:	4463      	add	r3, ip
     a18:	781b      	ldrb	r3, [r3, #0]
     a1a:	60bb      	str	r3, [r7, #8]
     a1c:	2300      	movs	r3, #0
     a1e:	60fb      	str	r3, [r7, #12]
     a20:	68bb      	ldr	r3, [r7, #8]
     a22:	68fc      	ldr	r4, [r7, #12]
     a24:	001a      	movs	r2, r3
     a26:	432a      	orrs	r2, r5
     a28:	603a      	str	r2, [r7, #0]
     a2a:	0023      	movs	r3, r4
     a2c:	4333      	orrs	r3, r6
     a2e:	607b      	str	r3, [r7, #4]
     a30:	683b      	ldr	r3, [r7, #0]
     a32:	687c      	ldr	r4, [r7, #4]
     a34:	62bb      	str	r3, [r7, #40]	; 0x28
     a36:	62fc      	str	r4, [r7, #44]	; 0x2c
		
		cur_bit_offset += return_size;
     a38:	2327      	movs	r3, #39	; 0x27
     a3a:	2210      	movs	r2, #16
     a3c:	4694      	mov	ip, r2
     a3e:	44bc      	add	ip, r7
     a40:	4463      	add	r3, ip
     a42:	2227      	movs	r2, #39	; 0x27
     a44:	2110      	movs	r1, #16
     a46:	1879      	adds	r1, r7, r1
     a48:	1889      	adds	r1, r1, r2
     a4a:	2220      	movs	r2, #32
     a4c:	2010      	movs	r0, #16
     a4e:	4684      	mov	ip, r0
     a50:	44bc      	add	ip, r7
     a52:	4462      	add	r2, ip
     a54:	7809      	ldrb	r1, [r1, #0]
     a56:	7812      	ldrb	r2, [r2, #0]
     a58:	188a      	adds	r2, r1, r2
     a5a:	701a      	strb	r2, [r3, #0]
	while(cur_bit_offset - bit_offset < bit_depth)
     a5c:	2327      	movs	r3, #39	; 0x27
     a5e:	2210      	movs	r2, #16
     a60:	4694      	mov	ip, r2
     a62:	44bc      	add	ip, r7
     a64:	4463      	add	r3, ip
     a66:	781a      	ldrb	r2, [r3, #0]
     a68:	2324      	movs	r3, #36	; 0x24
     a6a:	2110      	movs	r1, #16
     a6c:	468c      	mov	ip, r1
     a6e:	44bc      	add	ip, r7
     a70:	4463      	add	r3, ip
     a72:	881b      	ldrh	r3, [r3, #0]
     a74:	1ad2      	subs	r2, r2, r3
     a76:	230b      	movs	r3, #11
     a78:	2110      	movs	r1, #16
     a7a:	468c      	mov	ip, r1
     a7c:	44bc      	add	ip, r7
     a7e:	4463      	add	r3, ip
     a80:	781b      	ldrb	r3, [r3, #0]
     a82:	429a      	cmp	r2, r3
     a84:	da00      	bge.n	a88 <ElementAnimationEngine_access_bits+0x2bc>
     a86:	e750      	b.n	92a <ElementAnimationEngine_access_bits+0x15e>
		
	}
	
	return result;
     a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
     a8a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
     a8c:	b2db      	uxtb	r3, r3
	
}
     a8e:	0018      	movs	r0, r3
     a90:	46bd      	mov	sp, r7
     a92:	b00f      	add	sp, #60	; 0x3c
     a94:	bc0c      	pop	{r2, r3}
     a96:	4690      	mov	r8, r2
     a98:	4699      	mov	r9, r3
     a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a9c:	0000317d 	.word	0x0000317d
     aa0:	00000711 	.word	0x00000711

00000aa4 <write_bits>:

// The start bit and length REFER TO THE DESTINATION START BIT AND BIT LENGTH OF THE VALUE.
// THE WHOLE val WILL BE STUFFED INTO THE BYTE AT THAT LOCATION IF POSSIBLE
uint8_t write_bits( uint8_t * destination, int8_t start_bit, int8_t length, uint64_t val)
{
     aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
     aa6:	b087      	sub	sp, #28
     aa8:	af00      	add	r7, sp, #0
     aaa:	60f8      	str	r0, [r7, #12]
     aac:	0010      	movs	r0, r2
     aae:	220b      	movs	r2, #11
     ab0:	18ba      	adds	r2, r7, r2
     ab2:	7011      	strb	r1, [r2, #0]
     ab4:	220a      	movs	r2, #10
     ab6:	18ba      	adds	r2, r7, r2
     ab8:	1c01      	adds	r1, r0, #0
     aba:	7011      	strb	r1, [r2, #0]
	// Just act like this works.
	int8_t mask_size = 0;
     abc:	220f      	movs	r2, #15
     abe:	2108      	movs	r1, #8
     ac0:	468c      	mov	ip, r1
     ac2:	44bc      	add	ip, r7
     ac4:	4462      	add	r2, ip
     ac6:	2100      	movs	r1, #0
     ac8:	7011      	strb	r1, [r2, #0]
	int8_t shift_size = 0;
     aca:	220e      	movs	r2, #14
     acc:	2108      	movs	r1, #8
     ace:	468c      	mov	ip, r1
     ad0:	44bc      	add	ip, r7
     ad2:	4462      	add	r2, ip
     ad4:	2100      	movs	r1, #0
     ad6:	7011      	strb	r1, [r2, #0]

	uint8_t val_to_add = val;
     ad8:	220d      	movs	r2, #13
     ada:	2108      	movs	r1, #8
     adc:	1879      	adds	r1, r7, r1
     ade:	1888      	adds	r0, r1, r2
     ae0:	6b39      	ldr	r1, [r7, #48]	; 0x30
     ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     ae4:	1c0a      	adds	r2, r1, #0
     ae6:	7002      	strb	r2, [r0, #0]

	if(start_bit + 1 >= length)
     ae8:	220b      	movs	r2, #11
     aea:	18ba      	adds	r2, r7, r2
     aec:	7812      	ldrb	r2, [r2, #0]
     aee:	b252      	sxtb	r2, r2
     af0:	1c51      	adds	r1, r2, #1
     af2:	220a      	movs	r2, #10
     af4:	18ba      	adds	r2, r7, r2
     af6:	7812      	ldrb	r2, [r2, #0]
     af8:	b252      	sxtb	r2, r2
     afa:	4291      	cmp	r1, r2
     afc:	db19      	blt.n	b32 <write_bits+0x8e>
	{
		// This is a fine size. We can be full length!
		mask_size = length;
     afe:	230f      	movs	r3, #15
     b00:	2208      	movs	r2, #8
     b02:	4694      	mov	ip, r2
     b04:	44bc      	add	ip, r7
     b06:	4463      	add	r3, ip
     b08:	220a      	movs	r2, #10
     b0a:	18ba      	adds	r2, r7, r2
     b0c:	7812      	ldrb	r2, [r2, #0]
     b0e:	701a      	strb	r2, [r3, #0]
		shift_size = start_bit + 1 - length;
     b10:	230b      	movs	r3, #11
     b12:	18fb      	adds	r3, r7, r3
     b14:	781a      	ldrb	r2, [r3, #0]
     b16:	230a      	movs	r3, #10
     b18:	18fb      	adds	r3, r7, r3
     b1a:	781b      	ldrb	r3, [r3, #0]
     b1c:	1ad3      	subs	r3, r2, r3
     b1e:	b2db      	uxtb	r3, r3
     b20:	3301      	adds	r3, #1
     b22:	b2da      	uxtb	r2, r3
     b24:	230e      	movs	r3, #14
     b26:	2108      	movs	r1, #8
     b28:	468c      	mov	ip, r1
     b2a:	44bc      	add	ip, r7
     b2c:	4463      	add	r3, ip
     b2e:	701a      	strb	r2, [r3, #0]
     b30:	e068      	b.n	c04 <write_bits+0x160>
	}
	else
	{
		// This is small. Can't be full length.
		mask_size = (start_bit + 1);
     b32:	220b      	movs	r2, #11
     b34:	18ba      	adds	r2, r7, r2
     b36:	7812      	ldrb	r2, [r2, #0]
     b38:	3201      	adds	r2, #1
     b3a:	b2d1      	uxtb	r1, r2
     b3c:	220f      	movs	r2, #15
     b3e:	2008      	movs	r0, #8
     b40:	4684      	mov	ip, r0
     b42:	44bc      	add	ip, r7
     b44:	4462      	add	r2, ip
     b46:	7011      	strb	r1, [r2, #0]
					 // Get the number of bits that need to be added.
		shift_size = length - mask_size;
     b48:	220a      	movs	r2, #10
     b4a:	18ba      	adds	r2, r7, r2
     b4c:	7811      	ldrb	r1, [r2, #0]
     b4e:	220f      	movs	r2, #15
     b50:	2008      	movs	r0, #8
     b52:	4684      	mov	ip, r0
     b54:	44bc      	add	ip, r7
     b56:	4462      	add	r2, ip
     b58:	7812      	ldrb	r2, [r2, #0]
     b5a:	1a8a      	subs	r2, r1, r2
     b5c:	b2d1      	uxtb	r1, r2
     b5e:	220e      	movs	r2, #14
     b60:	2008      	movs	r0, #8
     b62:	4684      	mov	ip, r0
     b64:	44bc      	add	ip, r7
     b66:	4462      	add	r2, ip
     b68:	7011      	strb	r1, [r2, #0]
		start_bit = mask_size - 1;
     b6a:	220f      	movs	r2, #15
     b6c:	2108      	movs	r1, #8
     b6e:	468c      	mov	ip, r1
     b70:	44bc      	add	ip, r7
     b72:	4462      	add	r2, ip
     b74:	7812      	ldrb	r2, [r2, #0]
     b76:	3a01      	subs	r2, #1
     b78:	b2d1      	uxtb	r1, r2
     b7a:	220b      	movs	r2, #11
     b7c:	18ba      	adds	r2, r7, r2
     b7e:	7011      	strb	r1, [r2, #0]

		val_to_add = ((~(~(0x0) << mask_size) << shift_size) & val) >> shift_size;
     b80:	220f      	movs	r2, #15
     b82:	2108      	movs	r1, #8
     b84:	468c      	mov	ip, r1
     b86:	44bc      	add	ip, r7
     b88:	4462      	add	r2, ip
     b8a:	7812      	ldrb	r2, [r2, #0]
     b8c:	b252      	sxtb	r2, r2
     b8e:	2101      	movs	r1, #1
     b90:	4249      	negs	r1, r1
     b92:	4091      	lsls	r1, r2
     b94:	000a      	movs	r2, r1
     b96:	43d1      	mvns	r1, r2
     b98:	220e      	movs	r2, #14
     b9a:	2008      	movs	r0, #8
     b9c:	4684      	mov	ip, r0
     b9e:	44bc      	add	ip, r7
     ba0:	4462      	add	r2, ip
     ba2:	7812      	ldrb	r2, [r2, #0]
     ba4:	b252      	sxtb	r2, r2
     ba6:	4091      	lsls	r1, r2
     ba8:	000a      	movs	r2, r1
     baa:	603a      	str	r2, [r7, #0]
     bac:	17d2      	asrs	r2, r2, #31
     bae:	607a      	str	r2, [r7, #4]
     bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     bb2:	6839      	ldr	r1, [r7, #0]
     bb4:	4011      	ands	r1, r2
     bb6:	000b      	movs	r3, r1
     bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     bba:	6879      	ldr	r1, [r7, #4]
     bbc:	4011      	ands	r1, r2
     bbe:	000c      	movs	r4, r1
     bc0:	220e      	movs	r2, #14
     bc2:	2108      	movs	r1, #8
     bc4:	468c      	mov	ip, r1
     bc6:	44bc      	add	ip, r7
     bc8:	4462      	add	r2, ip
     bca:	7812      	ldrb	r2, [r2, #0]
     bcc:	b252      	sxtb	r2, r2
     bce:	0011      	movs	r1, r2
     bd0:	3920      	subs	r1, #32
     bd2:	2900      	cmp	r1, #0
     bd4:	db03      	blt.n	bde <write_bits+0x13a>
     bd6:	0020      	movs	r0, r4
     bd8:	40c8      	lsrs	r0, r1
     bda:	0005      	movs	r5, r0
     bdc:	e008      	b.n	bf0 <write_bits+0x14c>
     bde:	2120      	movs	r1, #32
     be0:	1a89      	subs	r1, r1, r2
     be2:	0020      	movs	r0, r4
     be4:	4088      	lsls	r0, r1
     be6:	0001      	movs	r1, r0
     be8:	0018      	movs	r0, r3
     bea:	40d0      	lsrs	r0, r2
     bec:	0005      	movs	r5, r0
     bee:	430d      	orrs	r5, r1
     bf0:	0023      	movs	r3, r4
     bf2:	40d3      	lsrs	r3, r2
     bf4:	001e      	movs	r6, r3
     bf6:	230d      	movs	r3, #13
     bf8:	2208      	movs	r2, #8
     bfa:	4694      	mov	ip, r2
     bfc:	44bc      	add	ip, r7
     bfe:	4463      	add	r3, ip
     c00:	1c2a      	adds	r2, r5, #0
     c02:	701a      	strb	r2, [r3, #0]
	


	
	// Put that value into the destination at the start bit location.
	*destination = (*destination  & ~(~(~(0x0) << mask_size) << shift_size)) | val_to_add << (start_bit + 1) - mask_size;
     c04:	68fb      	ldr	r3, [r7, #12]
     c06:	781b      	ldrb	r3, [r3, #0]
     c08:	b25b      	sxtb	r3, r3
     c0a:	220f      	movs	r2, #15
     c0c:	2108      	movs	r1, #8
     c0e:	468c      	mov	ip, r1
     c10:	44bc      	add	ip, r7
     c12:	4462      	add	r2, ip
     c14:	7812      	ldrb	r2, [r2, #0]
     c16:	b252      	sxtb	r2, r2
     c18:	2101      	movs	r1, #1
     c1a:	4249      	negs	r1, r1
     c1c:	4091      	lsls	r1, r2
     c1e:	000a      	movs	r2, r1
     c20:	43d1      	mvns	r1, r2
     c22:	220e      	movs	r2, #14
     c24:	2008      	movs	r0, #8
     c26:	4684      	mov	ip, r0
     c28:	44bc      	add	ip, r7
     c2a:	4462      	add	r2, ip
     c2c:	7812      	ldrb	r2, [r2, #0]
     c2e:	b252      	sxtb	r2, r2
     c30:	4091      	lsls	r1, r2
     c32:	000a      	movs	r2, r1
     c34:	b252      	sxtb	r2, r2
     c36:	43d2      	mvns	r2, r2
     c38:	b252      	sxtb	r2, r2
     c3a:	4013      	ands	r3, r2
     c3c:	b25a      	sxtb	r2, r3
     c3e:	230d      	movs	r3, #13
     c40:	2108      	movs	r1, #8
     c42:	468c      	mov	ip, r1
     c44:	44bc      	add	ip, r7
     c46:	4463      	add	r3, ip
     c48:	7819      	ldrb	r1, [r3, #0]
     c4a:	230b      	movs	r3, #11
     c4c:	18fb      	adds	r3, r7, r3
     c4e:	781b      	ldrb	r3, [r3, #0]
     c50:	b25b      	sxtb	r3, r3
     c52:	1c58      	adds	r0, r3, #1
     c54:	230f      	movs	r3, #15
     c56:	2408      	movs	r4, #8
     c58:	46a4      	mov	ip, r4
     c5a:	44bc      	add	ip, r7
     c5c:	4463      	add	r3, ip
     c5e:	781b      	ldrb	r3, [r3, #0]
     c60:	b25b      	sxtb	r3, r3
     c62:	1ac3      	subs	r3, r0, r3
     c64:	4099      	lsls	r1, r3
     c66:	000b      	movs	r3, r1
     c68:	b25b      	sxtb	r3, r3
     c6a:	4313      	orrs	r3, r2
     c6c:	b25b      	sxtb	r3, r3
     c6e:	b2da      	uxtb	r2, r3
     c70:	68fb      	ldr	r3, [r7, #12]
     c72:	701a      	strb	r2, [r3, #0]

	// How many bits did we end up adding?
	return mask_size;
     c74:	230f      	movs	r3, #15
     c76:	2208      	movs	r2, #8
     c78:	4694      	mov	ip, r2
     c7a:	44bc      	add	ip, r7
     c7c:	4463      	add	r3, ip
     c7e:	781b      	ldrb	r3, [r3, #0]
	
}
     c80:	0018      	movs	r0, r3
     c82:	46bd      	mov	sp, r7
     c84:	b007      	add	sp, #28
     c86:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000c88 <ElementAnimationEngine_write_bits>:

uint8_t ElementAnimationEngine_write_bits(uint8_t * frame, uint8_t bit_depth, uint16_t x_size, uint16_t y_size, uint16_t x_pixel, uint16_t y_pixel, uint64_t bits)
{
     c88:	b5b0      	push	{r4, r5, r7, lr}
     c8a:	b08c      	sub	sp, #48	; 0x30
     c8c:	af02      	add	r7, sp, #8
     c8e:	60f8      	str	r0, [r7, #12]
     c90:	000c      	movs	r4, r1
     c92:	0010      	movs	r0, r2
     c94:	0019      	movs	r1, r3
     c96:	230b      	movs	r3, #11
     c98:	18fb      	adds	r3, r7, r3
     c9a:	1c22      	adds	r2, r4, #0
     c9c:	701a      	strb	r2, [r3, #0]
     c9e:	2308      	movs	r3, #8
     ca0:	18fb      	adds	r3, r7, r3
     ca2:	1c02      	adds	r2, r0, #0
     ca4:	801a      	strh	r2, [r3, #0]
     ca6:	1dbb      	adds	r3, r7, #6
     ca8:	1c0a      	adds	r2, r1, #0
     caa:	801a      	strh	r2, [r3, #0]

	uint64_t result = 0;
     cac:	2300      	movs	r3, #0
     cae:	2400      	movs	r4, #0
     cb0:	61bb      	str	r3, [r7, #24]
     cb2:	61fc      	str	r4, [r7, #28]
		
	// This access type uses a row-major model. Arrays are allocated array[y][x], for example. This allows the memory to formatted in a nice way in memory.
		
	// First, which bit are we on?
	uint16_t bit_offset = x_pixel * bit_depth + (y_pixel * x_size * bit_depth);
     cb4:	2338      	movs	r3, #56	; 0x38
     cb6:	18fb      	adds	r3, r7, r3
     cb8:	881a      	ldrh	r2, [r3, #0]
     cba:	233c      	movs	r3, #60	; 0x3c
     cbc:	18fb      	adds	r3, r7, r3
     cbe:	881b      	ldrh	r3, [r3, #0]
     cc0:	2108      	movs	r1, #8
     cc2:	1879      	adds	r1, r7, r1
     cc4:	8809      	ldrh	r1, [r1, #0]
     cc6:	434b      	muls	r3, r1
     cc8:	18d3      	adds	r3, r2, r3
     cca:	b29a      	uxth	r2, r3
     ccc:	230b      	movs	r3, #11
     cce:	18fb      	adds	r3, r7, r3
     cd0:	781b      	ldrb	r3, [r3, #0]
     cd2:	b299      	uxth	r1, r3
     cd4:	2316      	movs	r3, #22
     cd6:	18fb      	adds	r3, r7, r3
     cd8:	434a      	muls	r2, r1
     cda:	801a      	strh	r2, [r3, #0]
		
	// Okay, which byte is that in?
	uint16_t start_byte = bit_offset / 8;
     cdc:	2314      	movs	r3, #20
     cde:	18fb      	adds	r3, r7, r3
     ce0:	2216      	movs	r2, #22
     ce2:	18ba      	adds	r2, r7, r2
     ce4:	8812      	ldrh	r2, [r2, #0]
     ce6:	08d2      	lsrs	r2, r2, #3
     ce8:	801a      	strh	r2, [r3, #0]

	// Nice. Which bit in that byte?
	uint8_t in_byte_location = 7 - (bit_offset % 8);
     cea:	2316      	movs	r3, #22
     cec:	18fb      	adds	r3, r7, r3
     cee:	881b      	ldrh	r3, [r3, #0]
     cf0:	b2db      	uxtb	r3, r3
     cf2:	43db      	mvns	r3, r3
     cf4:	b2da      	uxtb	r2, r3
     cf6:	2313      	movs	r3, #19
     cf8:	18fb      	adds	r3, r7, r3
     cfa:	2107      	movs	r1, #7
     cfc:	400a      	ands	r2, r1
     cfe:	701a      	strb	r2, [r3, #0]
		
	uint8_t cur_bit_offset = bit_offset + write_bits((frame + start_byte), in_byte_location, bit_depth, bits);
     d00:	2316      	movs	r3, #22
     d02:	18fb      	adds	r3, r7, r3
     d04:	881b      	ldrh	r3, [r3, #0]
     d06:	b2dd      	uxtb	r5, r3
     d08:	2314      	movs	r3, #20
     d0a:	18fb      	adds	r3, r7, r3
     d0c:	881b      	ldrh	r3, [r3, #0]
     d0e:	68fa      	ldr	r2, [r7, #12]
     d10:	18d0      	adds	r0, r2, r3
     d12:	2313      	movs	r3, #19
     d14:	18fb      	adds	r3, r7, r3
     d16:	2100      	movs	r1, #0
     d18:	5659      	ldrsb	r1, [r3, r1]
     d1a:	230b      	movs	r3, #11
     d1c:	18fb      	adds	r3, r7, r3
     d1e:	2200      	movs	r2, #0
     d20:	569a      	ldrsb	r2, [r3, r2]
     d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     d24:	6c7c      	ldr	r4, [r7, #68]	; 0x44
     d26:	9300      	str	r3, [sp, #0]
     d28:	9401      	str	r4, [sp, #4]
     d2a:	4b2c      	ldr	r3, [pc, #176]	; (ddc <ElementAnimationEngine_write_bits+0x154>)
     d2c:	4798      	blx	r3
     d2e:	0003      	movs	r3, r0
     d30:	001a      	movs	r2, r3
     d32:	2327      	movs	r3, #39	; 0x27
     d34:	18fb      	adds	r3, r7, r3
     d36:	18aa      	adds	r2, r5, r2
     d38:	701a      	strb	r2, [r3, #0]

	while(cur_bit_offset - bit_offset < bit_depth)
     d3a:	e03d      	b.n	db8 <ElementAnimationEngine_write_bits+0x130>
	{



		// Now which byte are we in?
		start_byte = cur_bit_offset / 8;
     d3c:	2327      	movs	r3, #39	; 0x27
     d3e:	18fb      	adds	r3, r7, r3
     d40:	781b      	ldrb	r3, [r3, #0]
     d42:	08db      	lsrs	r3, r3, #3
     d44:	b2da      	uxtb	r2, r3
     d46:	2314      	movs	r3, #20
     d48:	18fb      	adds	r3, r7, r3
     d4a:	801a      	strh	r2, [r3, #0]

		// Nice. Which bit in that byte?
		in_byte_location = 7 - (cur_bit_offset % 8);
     d4c:	2327      	movs	r3, #39	; 0x27
     d4e:	18fb      	adds	r3, r7, r3
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	43db      	mvns	r3, r3
     d54:	b2da      	uxtb	r2, r3
     d56:	2313      	movs	r3, #19
     d58:	18fb      	adds	r3, r7, r3
     d5a:	2107      	movs	r1, #7
     d5c:	400a      	ands	r2, r1
     d5e:	701a      	strb	r2, [r3, #0]
			
		uint8_t return_size = write_bits((frame + start_byte), in_byte_location, bit_depth - (cur_bit_offset - bit_offset), bits);
     d60:	2314      	movs	r3, #20
     d62:	18fb      	adds	r3, r7, r3
     d64:	881b      	ldrh	r3, [r3, #0]
     d66:	68fa      	ldr	r2, [r7, #12]
     d68:	18d0      	adds	r0, r2, r3
     d6a:	2313      	movs	r3, #19
     d6c:	18fb      	adds	r3, r7, r3
     d6e:	2100      	movs	r1, #0
     d70:	5659      	ldrsb	r1, [r3, r1]
     d72:	2316      	movs	r3, #22
     d74:	18fb      	adds	r3, r7, r3
     d76:	881b      	ldrh	r3, [r3, #0]
     d78:	b2da      	uxtb	r2, r3
     d7a:	2327      	movs	r3, #39	; 0x27
     d7c:	18fb      	adds	r3, r7, r3
     d7e:	781b      	ldrb	r3, [r3, #0]
     d80:	1ad3      	subs	r3, r2, r3
     d82:	b2da      	uxtb	r2, r3
     d84:	230b      	movs	r3, #11
     d86:	18fb      	adds	r3, r7, r3
     d88:	781b      	ldrb	r3, [r3, #0]
     d8a:	18d3      	adds	r3, r2, r3
     d8c:	b2db      	uxtb	r3, r3
     d8e:	b25a      	sxtb	r2, r3
     d90:	2312      	movs	r3, #18
     d92:	18fd      	adds	r5, r7, r3
     d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     d96:	6c7c      	ldr	r4, [r7, #68]	; 0x44
     d98:	9300      	str	r3, [sp, #0]
     d9a:	9401      	str	r4, [sp, #4]
     d9c:	4b0f      	ldr	r3, [pc, #60]	; (ddc <ElementAnimationEngine_write_bits+0x154>)
     d9e:	4798      	blx	r3
     da0:	0003      	movs	r3, r0
     da2:	702b      	strb	r3, [r5, #0]
			
		cur_bit_offset += return_size;
     da4:	2327      	movs	r3, #39	; 0x27
     da6:	18fb      	adds	r3, r7, r3
     da8:	2227      	movs	r2, #39	; 0x27
     daa:	18b9      	adds	r1, r7, r2
     dac:	2212      	movs	r2, #18
     dae:	18ba      	adds	r2, r7, r2
     db0:	7809      	ldrb	r1, [r1, #0]
     db2:	7812      	ldrb	r2, [r2, #0]
     db4:	188a      	adds	r2, r1, r2
     db6:	701a      	strb	r2, [r3, #0]
	while(cur_bit_offset - bit_offset < bit_depth)
     db8:	2327      	movs	r3, #39	; 0x27
     dba:	18fb      	adds	r3, r7, r3
     dbc:	781a      	ldrb	r2, [r3, #0]
     dbe:	2316      	movs	r3, #22
     dc0:	18fb      	adds	r3, r7, r3
     dc2:	881b      	ldrh	r3, [r3, #0]
     dc4:	1ad2      	subs	r2, r2, r3
     dc6:	230b      	movs	r3, #11
     dc8:	18fb      	adds	r3, r7, r3
     dca:	781b      	ldrb	r3, [r3, #0]
     dcc:	429a      	cmp	r2, r3
     dce:	dbb5      	blt.n	d3c <ElementAnimationEngine_write_bits+0xb4>
			
	}
		
	return 0;
     dd0:	2300      	movs	r3, #0
	
}
     dd2:	0018      	movs	r0, r3
     dd4:	46bd      	mov	sp, r7
     dd6:	b00a      	add	sp, #40	; 0x28
     dd8:	bdb0      	pop	{r4, r5, r7, pc}
     dda:	46c0      	nop			; (mov r8, r8)
     ddc:	00000aa5 	.word	0x00000aa5

00000de0 <ElementAnimationEngine_get_max_bitdepth_value>:


uint64_t ElementAnimationEngine_get_max_bitdepth_value(uint8_t bitdepth)
{
     de0:	b5f0      	push	{r4, r5, r6, r7, lr}
     de2:	b083      	sub	sp, #12
     de4:	af00      	add	r7, sp, #0
     de6:	0001      	movs	r1, r0
     de8:	1dfa      	adds	r2, r7, #7
     dea:	7011      	strb	r1, [r2, #0]
	
	return ~(~(0x0ull) << bitdepth);
     dec:	1dfa      	adds	r2, r7, #7
     dee:	7812      	ldrb	r2, [r2, #0]
     df0:	0011      	movs	r1, r2
     df2:	3920      	subs	r1, #32
     df4:	2900      	cmp	r1, #0
     df6:	db04      	blt.n	e02 <ElementAnimationEngine_get_max_bitdepth_value+0x22>
     df8:	2001      	movs	r0, #1
     dfa:	4240      	negs	r0, r0
     dfc:	4088      	lsls	r0, r1
     dfe:	0004      	movs	r4, r0
     e00:	e00a      	b.n	e18 <ElementAnimationEngine_get_max_bitdepth_value+0x38>
     e02:	2120      	movs	r1, #32
     e04:	1a89      	subs	r1, r1, r2
     e06:	2001      	movs	r0, #1
     e08:	4240      	negs	r0, r0
     e0a:	40c8      	lsrs	r0, r1
     e0c:	0001      	movs	r1, r0
     e0e:	2001      	movs	r0, #1
     e10:	4240      	negs	r0, r0
     e12:	4090      	lsls	r0, r2
     e14:	0004      	movs	r4, r0
     e16:	430c      	orrs	r4, r1
     e18:	2101      	movs	r1, #1
     e1a:	4249      	negs	r1, r1
     e1c:	4091      	lsls	r1, r2
     e1e:	000b      	movs	r3, r1
     e20:	43dd      	mvns	r5, r3
     e22:	43e6      	mvns	r6, r4
     e24:	002b      	movs	r3, r5
     e26:	0034      	movs	r4, r6
	
}
     e28:	0018      	movs	r0, r3
     e2a:	0021      	movs	r1, r4
     e2c:	46bd      	mov	sp, r7
     e2e:	b003      	add	sp, #12
     e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00000e34 <ElementAnimationEngine_load_to_buffer>:

enum ElementAnimationEngineStatus ElementAnimationEngine_load_to_buffer(ElementAnimationInstance * animation, ElementAnimationBufferConfigStruct * buffer)
{
     e34:	b5b0      	push	{r4, r5, r7, lr}
     e36:	b094      	sub	sp, #80	; 0x50
     e38:	af04      	add	r7, sp, #16
     e3a:	6078      	str	r0, [r7, #4]
     e3c:	6039      	str	r1, [r7, #0]
	
	if(!animation->is_calculated)
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	781b      	ldrb	r3, [r3, #0]
     e42:	2201      	movs	r2, #1
     e44:	4053      	eors	r3, r2
     e46:	b2db      	uxtb	r3, r3
     e48:	2b00      	cmp	r3, #0
     e4a:	d007      	beq.n	e5c <ElementAnimationEngine_load_to_buffer+0x28>
	{
		// TODO: deal with this later. 
		
		return animation->fun_anim->function(buffer);
     e4c:	687b      	ldr	r3, [r7, #4]
     e4e:	689b      	ldr	r3, [r3, #8]
     e50:	681b      	ldr	r3, [r3, #0]
     e52:	683a      	ldr	r2, [r7, #0]
     e54:	0010      	movs	r0, r2
     e56:	4798      	blx	r3
     e58:	0003      	movs	r3, r0
     e5a:	e0b3      	b.n	fc4 <ElementAnimationEngine_load_to_buffer+0x190>
	
	}
	
	ElementCalculatedAnimationInstance * anim_inst = animation->cal_anim;
     e5c:	687b      	ldr	r3, [r7, #4]
     e5e:	685b      	ldr	r3, [r3, #4]
     e60:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	int32_t current_frame = ElementAnimationEngine_get_current_frame(anim_inst);
     e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e64:	0018      	movs	r0, r3
     e66:	4b59      	ldr	r3, [pc, #356]	; (fcc <ElementAnimationEngine_load_to_buffer+0x198>)
     e68:	4798      	blx	r3
     e6a:	0003      	movs	r3, r0
     e6c:	62bb      	str	r3, [r7, #40]	; 0x28
	
	uint64_t maximum_bitdepth_value = ElementAnimationEngine_get_max_bitdepth_value(anim_inst->bit_depth);
     e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e70:	7e1b      	ldrb	r3, [r3, #24]
     e72:	0018      	movs	r0, r3
     e74:	4b56      	ldr	r3, [pc, #344]	; (fd0 <ElementAnimationEngine_load_to_buffer+0x19c>)
     e76:	4798      	blx	r3
     e78:	0003      	movs	r3, r0
     e7a:	000c      	movs	r4, r1
     e7c:	623b      	str	r3, [r7, #32]
     e7e:	627c      	str	r4, [r7, #36]	; 0x24

	if(current_frame >= 0 && current_frame < anim_inst->num_frames)
     e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
     e82:	2b00      	cmp	r3, #0
     e84:	da00      	bge.n	e88 <ElementAnimationEngine_load_to_buffer+0x54>
     e86:	e09c      	b.n	fc2 <ElementAnimationEngine_load_to_buffer+0x18e>
     e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e8a:	891b      	ldrh	r3, [r3, #8]
     e8c:	001a      	movs	r2, r3
     e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     e90:	429a      	cmp	r2, r3
     e92:	dc00      	bgt.n	e96 <ElementAnimationEngine_load_to_buffer+0x62>
     e94:	e095      	b.n	fc2 <ElementAnimationEngine_load_to_buffer+0x18e>
	{
		// Actually process this.
	
		// This gets a pointer to the frame we are interested in.
		uint8_t * frame = (anim_inst->frames + anim_inst->frame_size * current_frame);
     e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e98:	685a      	ldr	r2, [r3, #4]
     e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e9c:	68db      	ldr	r3, [r3, #12]
     e9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
     ea0:	434b      	muls	r3, r1
     ea2:	18d3      	adds	r3, r2, r3
     ea4:	61fb      	str	r3, [r7, #28]

		for(uint16_t x = 0; x < anim_inst->data_dimensions[0]; x++)		
     ea6:	233e      	movs	r3, #62	; 0x3e
     ea8:	18fb      	adds	r3, r7, r3
     eaa:	2200      	movs	r2, #0
     eac:	801a      	strh	r2, [r3, #0]
     eae:	e080      	b.n	fb2 <ElementAnimationEngine_load_to_buffer+0x17e>
		{	
			for(uint16_t y = 0; y < anim_inst->data_dimensions[1]; y++)
     eb0:	233c      	movs	r3, #60	; 0x3c
     eb2:	18fb      	adds	r3, r7, r3
     eb4:	2200      	movs	r2, #0
     eb6:	801a      	strh	r2, [r3, #0]
     eb8:	e06c      	b.n	f94 <ElementAnimationEngine_load_to_buffer+0x160>
			{
				
				uint64_t pixel_bits = ElementAnimationEngine_access_bits(frame, anim_inst->bit_depth, anim_inst->data_dimensions[0], anim_inst->data_dimensions[1], x, y);
     eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ebc:	7e19      	ldrb	r1, [r3, #24]
     ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ec0:	8a1a      	ldrh	r2, [r3, #16]
     ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ec4:	8a5c      	ldrh	r4, [r3, #18]
     ec6:	69f8      	ldr	r0, [r7, #28]
     ec8:	233c      	movs	r3, #60	; 0x3c
     eca:	18fb      	adds	r3, r7, r3
     ecc:	881b      	ldrh	r3, [r3, #0]
     ece:	9301      	str	r3, [sp, #4]
     ed0:	233e      	movs	r3, #62	; 0x3e
     ed2:	18fb      	adds	r3, r7, r3
     ed4:	881b      	ldrh	r3, [r3, #0]
     ed6:	9300      	str	r3, [sp, #0]
     ed8:	0023      	movs	r3, r4
     eda:	4c3e      	ldr	r4, [pc, #248]	; (fd4 <ElementAnimationEngine_load_to_buffer+0x1a0>)
     edc:	47a0      	blx	r4
     ede:	0003      	movs	r3, r0
     ee0:	613b      	str	r3, [r7, #16]
     ee2:	2300      	movs	r3, #0
     ee4:	617b      	str	r3, [r7, #20]
	
				// Okay, not lets access the bits from the current frame, then push the result back into the frame.

				uint64_t buffer_bits = ElementAnimationEngine_access_bits(buffer->write_buffer, buffer->bit_depth, buffer->data_dimensions[0], buffer->data_dimensions[1], x, y);	
     ee6:	683b      	ldr	r3, [r7, #0]
     ee8:	6898      	ldr	r0, [r3, #8]
     eea:	683b      	ldr	r3, [r7, #0]
     eec:	7c59      	ldrb	r1, [r3, #17]
     eee:	683b      	ldr	r3, [r7, #0]
     ef0:	8b1a      	ldrh	r2, [r3, #24]
     ef2:	683b      	ldr	r3, [r7, #0]
     ef4:	8b5c      	ldrh	r4, [r3, #26]
     ef6:	233c      	movs	r3, #60	; 0x3c
     ef8:	18fb      	adds	r3, r7, r3
     efa:	881b      	ldrh	r3, [r3, #0]
     efc:	9301      	str	r3, [sp, #4]
     efe:	233e      	movs	r3, #62	; 0x3e
     f00:	18fb      	adds	r3, r7, r3
     f02:	881b      	ldrh	r3, [r3, #0]
     f04:	9300      	str	r3, [sp, #0]
     f06:	0023      	movs	r3, r4
     f08:	4c32      	ldr	r4, [pc, #200]	; (fd4 <ElementAnimationEngine_load_to_buffer+0x1a0>)
     f0a:	47a0      	blx	r4
     f0c:	0003      	movs	r3, r0
     f0e:	60bb      	str	r3, [r7, #8]
     f10:	2300      	movs	r3, #0
     f12:	60fb      	str	r3, [r7, #12]
	
				// The following logic only uses additive coloring. TODO: Implement alpha.
	
				uint64_t result_bits = 0;
     f14:	2300      	movs	r3, #0
     f16:	2400      	movs	r4, #0
     f18:	633b      	str	r3, [r7, #48]	; 0x30
     f1a:	637c      	str	r4, [r7, #52]	; 0x34
	
				// Now check, is the addition of both bits going to go over the maximum value?
				if(maximum_bitdepth_value - pixel_bits < buffer_bits)
     f1c:	6a39      	ldr	r1, [r7, #32]
     f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     f20:	693b      	ldr	r3, [r7, #16]
     f22:	697c      	ldr	r4, [r7, #20]
     f24:	1ac9      	subs	r1, r1, r3
     f26:	41a2      	sbcs	r2, r4
     f28:	000b      	movs	r3, r1
     f2a:	0014      	movs	r4, r2
     f2c:	68fa      	ldr	r2, [r7, #12]
     f2e:	42a2      	cmp	r2, r4
     f30:	d805      	bhi.n	f3e <ElementAnimationEngine_load_to_buffer+0x10a>
     f32:	68fa      	ldr	r2, [r7, #12]
     f34:	42a2      	cmp	r2, r4
     f36:	d107      	bne.n	f48 <ElementAnimationEngine_load_to_buffer+0x114>
     f38:	68ba      	ldr	r2, [r7, #8]
     f3a:	429a      	cmp	r2, r3
     f3c:	d904      	bls.n	f48 <ElementAnimationEngine_load_to_buffer+0x114>
				{
					// No! There's not enough space left. Simply max it out.
					result_bits = maximum_bitdepth_value;
     f3e:	6a3b      	ldr	r3, [r7, #32]
     f40:	6a7c      	ldr	r4, [r7, #36]	; 0x24
     f42:	633b      	str	r3, [r7, #48]	; 0x30
     f44:	637c      	str	r4, [r7, #52]	; 0x34
     f46:	e007      	b.n	f58 <ElementAnimationEngine_load_to_buffer+0x124>
				}
				else
				{
					result_bits = buffer_bits + pixel_bits;
     f48:	68b9      	ldr	r1, [r7, #8]
     f4a:	68fa      	ldr	r2, [r7, #12]
     f4c:	693b      	ldr	r3, [r7, #16]
     f4e:	697c      	ldr	r4, [r7, #20]
     f50:	185b      	adds	r3, r3, r1
     f52:	4154      	adcs	r4, r2
     f54:	633b      	str	r3, [r7, #48]	; 0x30
     f56:	637c      	str	r4, [r7, #52]	; 0x34
				}
	
				// Now push the new result into the buffer.
				ElementAnimationEngine_write_bits(buffer->write_buffer, buffer->bit_depth, buffer->data_dimensions[0], buffer->data_dimensions[1], x, y, result_bits);
     f58:	683b      	ldr	r3, [r7, #0]
     f5a:	6898      	ldr	r0, [r3, #8]
     f5c:	683b      	ldr	r3, [r7, #0]
     f5e:	7c59      	ldrb	r1, [r3, #17]
     f60:	683b      	ldr	r3, [r7, #0]
     f62:	8b1a      	ldrh	r2, [r3, #24]
     f64:	683b      	ldr	r3, [r7, #0]
     f66:	8b5d      	ldrh	r5, [r3, #26]
     f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f6a:	6b7c      	ldr	r4, [r7, #52]	; 0x34
     f6c:	9302      	str	r3, [sp, #8]
     f6e:	9403      	str	r4, [sp, #12]
     f70:	233c      	movs	r3, #60	; 0x3c
     f72:	18fb      	adds	r3, r7, r3
     f74:	881b      	ldrh	r3, [r3, #0]
     f76:	9301      	str	r3, [sp, #4]
     f78:	233e      	movs	r3, #62	; 0x3e
     f7a:	18fb      	adds	r3, r7, r3
     f7c:	881b      	ldrh	r3, [r3, #0]
     f7e:	9300      	str	r3, [sp, #0]
     f80:	002b      	movs	r3, r5
     f82:	4c15      	ldr	r4, [pc, #84]	; (fd8 <ElementAnimationEngine_load_to_buffer+0x1a4>)
     f84:	47a0      	blx	r4
			for(uint16_t y = 0; y < anim_inst->data_dimensions[1]; y++)
     f86:	233c      	movs	r3, #60	; 0x3c
     f88:	18fb      	adds	r3, r7, r3
     f8a:	881a      	ldrh	r2, [r3, #0]
     f8c:	233c      	movs	r3, #60	; 0x3c
     f8e:	18fb      	adds	r3, r7, r3
     f90:	3201      	adds	r2, #1
     f92:	801a      	strh	r2, [r3, #0]
     f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f96:	8a5b      	ldrh	r3, [r3, #18]
     f98:	223c      	movs	r2, #60	; 0x3c
     f9a:	18ba      	adds	r2, r7, r2
     f9c:	8812      	ldrh	r2, [r2, #0]
     f9e:	429a      	cmp	r2, r3
     fa0:	d200      	bcs.n	fa4 <ElementAnimationEngine_load_to_buffer+0x170>
     fa2:	e78a      	b.n	eba <ElementAnimationEngine_load_to_buffer+0x86>
		for(uint16_t x = 0; x < anim_inst->data_dimensions[0]; x++)		
     fa4:	233e      	movs	r3, #62	; 0x3e
     fa6:	18fb      	adds	r3, r7, r3
     fa8:	881a      	ldrh	r2, [r3, #0]
     faa:	233e      	movs	r3, #62	; 0x3e
     fac:	18fb      	adds	r3, r7, r3
     fae:	3201      	adds	r2, #1
     fb0:	801a      	strh	r2, [r3, #0]
     fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     fb4:	8a1b      	ldrh	r3, [r3, #16]
     fb6:	223e      	movs	r2, #62	; 0x3e
     fb8:	18ba      	adds	r2, r7, r2
     fba:	8812      	ldrh	r2, [r2, #0]
     fbc:	429a      	cmp	r2, r3
     fbe:	d200      	bcs.n	fc2 <ElementAnimationEngine_load_to_buffer+0x18e>
     fc0:	e776      	b.n	eb0 <ElementAnimationEngine_load_to_buffer+0x7c>
			
			}
		}
	}
	return Animation_Engine_Success;
     fc2:	2300      	movs	r3, #0
}
     fc4:	0018      	movs	r0, r3
     fc6:	46bd      	mov	sp, r7
     fc8:	b010      	add	sp, #64	; 0x40
     fca:	bdb0      	pop	{r4, r5, r7, pc}
     fcc:	000005ed 	.word	0x000005ed
     fd0:	00000de1 	.word	0x00000de1
     fd4:	000007cd 	.word	0x000007cd
     fd8:	00000c89 	.word	0x00000c89

00000fdc <ElementAnimationEngine_add_buffer>:

enum ElementAnimationEngineStatus ElementAnimationEngine_add_buffer(ElementAnimationBufferConfigStruct * buffer)
{
     fdc:	b580      	push	{r7, lr}
     fde:	b082      	sub	sp, #8
     fe0:	af00      	add	r7, sp, #0
     fe2:	6078      	str	r0, [r7, #4]

	if(animation_engine_config.current_animation_buffers < animation_engine_config.maximum_animation_buffers)
     fe4:	4b10      	ldr	r3, [pc, #64]	; (1028 <ElementAnimationEngine_add_buffer+0x4c>)
     fe6:	785a      	ldrb	r2, [r3, #1]
     fe8:	4b0f      	ldr	r3, [pc, #60]	; (1028 <ElementAnimationEngine_add_buffer+0x4c>)
     fea:	781b      	ldrb	r3, [r3, #0]
     fec:	429a      	cmp	r2, r3
     fee:	d216      	bcs.n	101e <ElementAnimationEngine_add_buffer+0x42>
	{
		animation_engine_config.animation_buffers[animation_engine_config.current_animation_buffers++] = buffer;
     ff0:	4b0d      	ldr	r3, [pc, #52]	; (1028 <ElementAnimationEngine_add_buffer+0x4c>)
     ff2:	785b      	ldrb	r3, [r3, #1]
     ff4:	1c5a      	adds	r2, r3, #1
     ff6:	b2d1      	uxtb	r1, r2
     ff8:	4a0b      	ldr	r2, [pc, #44]	; (1028 <ElementAnimationEngine_add_buffer+0x4c>)
     ffa:	7051      	strb	r1, [r2, #1]
     ffc:	4a0a      	ldr	r2, [pc, #40]	; (1028 <ElementAnimationEngine_add_buffer+0x4c>)
     ffe:	009b      	lsls	r3, r3, #2
    1000:	18d3      	adds	r3, r2, r3
    1002:	3304      	adds	r3, #4
    1004:	687a      	ldr	r2, [r7, #4]
    1006:	601a      	str	r2, [r3, #0]
		
		// Initialize the buffers in this struct to do swapping.
		buffer->read_buffer = &(buffer->buffers)[buffer->buffer_size * 0];
    1008:	687b      	ldr	r3, [r7, #4]
    100a:	685a      	ldr	r2, [r3, #4]
    100c:	687b      	ldr	r3, [r7, #4]
    100e:	60da      	str	r2, [r3, #12]
		buffer->write_buffer = &(buffer->buffers)[buffer->buffer_size * 1];
    1010:	687b      	ldr	r3, [r7, #4]
    1012:	685a      	ldr	r2, [r3, #4]
    1014:	687b      	ldr	r3, [r7, #4]
    1016:	695b      	ldr	r3, [r3, #20]
    1018:	18d2      	adds	r2, r2, r3
    101a:	687b      	ldr	r3, [r7, #4]
    101c:	609a      	str	r2, [r3, #8]
	}
	
	return Animation_Engine_Success;
    101e:	2300      	movs	r3, #0
	
}
    1020:	0018      	movs	r0, r3
    1022:	46bd      	mov	sp, r7
    1024:	b002      	add	sp, #8
    1026:	bd80      	pop	{r7, pc}
    1028:	20000330 	.word	0x20000330

0000102c <ElementAnimationEngine_push_animation>:

// This adds another animation to the top of the stack.
enum ElementAnimationEngineStatus ElementAnimationEngine_push_animation(ElementAnimationBufferConfigStruct * buffer, ElementAnimationInstance * animation)
{
    102c:	b580      	push	{r7, lr}
    102e:	b082      	sub	sp, #8
    1030:	af00      	add	r7, sp, #0
    1032:	6078      	str	r0, [r7, #4]
    1034:	6039      	str	r1, [r7, #0]

	if(buffer->current_animation_size < ELEMENT_ANIMATION_ENGINE_CONCURRENT_ANIMATION_MAX)
    1036:	687b      	ldr	r3, [r7, #4]
    1038:	2230      	movs	r2, #48	; 0x30
    103a:	5c9b      	ldrb	r3, [r3, r2]
    103c:	2b04      	cmp	r3, #4
    103e:	d80e      	bhi.n	105e <ElementAnimationEngine_push_animation+0x32>
	{
		// We can add another animation.
		buffer->current_animations[buffer->current_animation_size++] = animation;
    1040:	687b      	ldr	r3, [r7, #4]
    1042:	2230      	movs	r2, #48	; 0x30
    1044:	5c9b      	ldrb	r3, [r3, r2]
    1046:	1c5a      	adds	r2, r3, #1
    1048:	b2d0      	uxtb	r0, r2
    104a:	687a      	ldr	r2, [r7, #4]
    104c:	2130      	movs	r1, #48	; 0x30
    104e:	5450      	strb	r0, [r2, r1]
    1050:	687a      	ldr	r2, [r7, #4]
    1052:	3306      	adds	r3, #6
    1054:	009b      	lsls	r3, r3, #2
    1056:	18d3      	adds	r3, r2, r3
    1058:	3304      	adds	r3, #4
    105a:	683a      	ldr	r2, [r7, #0]
    105c:	601a      	str	r2, [r3, #0]
	}

	return Animation_Engine_Success;	
    105e:	2300      	movs	r3, #0
	
}
    1060:	0018      	movs	r0, r3
    1062:	46bd      	mov	sp, r7
    1064:	b002      	add	sp, #8
    1066:	bd80      	pop	{r7, pc}

00001068 <ElementAnimationEngine_update>:



// This will update every animation buffer that has been registered, then flip buffers.
enum ElementAnimationEngineStatus ElementAnimationEngine_update()
{
    1068:	b580      	push	{r7, lr}
    106a:	b084      	sub	sp, #16
    106c:	af00      	add	r7, sp, #0
	//		3b. Extract the correct bits from the frame
	//		3c. Add the bits to the buffer bits then integrate back into buffer.	
	//		3c. Repeat for next animation. 
	// 4. Repeat with next buffer.
	
	for(uint8_t buf = 0; buf < animation_engine_config.current_animation_buffers; buf++)
    106e:	230f      	movs	r3, #15
    1070:	18fb      	adds	r3, r7, r3
    1072:	2200      	movs	r2, #0
    1074:	701a      	strb	r2, [r3, #0]
    1076:	e03b      	b.n	10f0 <ElementAnimationEngine_update+0x88>
	{
		
		ElementAnimationBufferConfigStruct * buffer_ptr = animation_engine_config.animation_buffers[buf];
    1078:	230f      	movs	r3, #15
    107a:	18fb      	adds	r3, r7, r3
    107c:	781b      	ldrb	r3, [r3, #0]
    107e:	4a22      	ldr	r2, [pc, #136]	; (1108 <ElementAnimationEngine_update+0xa0>)
    1080:	009b      	lsls	r3, r3, #2
    1082:	18d3      	adds	r3, r2, r3
    1084:	3304      	adds	r3, #4
    1086:	681b      	ldr	r3, [r3, #0]
    1088:	60bb      	str	r3, [r7, #8]
		
		for(uint8_t cur_anim = 0; cur_anim < buffer_ptr->current_animation_size; cur_anim++)
    108a:	230e      	movs	r3, #14
    108c:	18fb      	adds	r3, r7, r3
    108e:	2200      	movs	r2, #0
    1090:	701a      	strb	r2, [r3, #0]
    1092:	e014      	b.n	10be <ElementAnimationEngine_update+0x56>
		{
			ElementAnimationEngine_load_to_buffer(buffer_ptr->current_animations[cur_anim], buffer_ptr);
    1094:	230e      	movs	r3, #14
    1096:	18fb      	adds	r3, r7, r3
    1098:	781b      	ldrb	r3, [r3, #0]
    109a:	68ba      	ldr	r2, [r7, #8]
    109c:	3306      	adds	r3, #6
    109e:	009b      	lsls	r3, r3, #2
    10a0:	18d3      	adds	r3, r2, r3
    10a2:	3304      	adds	r3, #4
    10a4:	681b      	ldr	r3, [r3, #0]
    10a6:	68ba      	ldr	r2, [r7, #8]
    10a8:	0011      	movs	r1, r2
    10aa:	0018      	movs	r0, r3
    10ac:	4b17      	ldr	r3, [pc, #92]	; (110c <ElementAnimationEngine_update+0xa4>)
    10ae:	4798      	blx	r3
		for(uint8_t cur_anim = 0; cur_anim < buffer_ptr->current_animation_size; cur_anim++)
    10b0:	230e      	movs	r3, #14
    10b2:	18fb      	adds	r3, r7, r3
    10b4:	781a      	ldrb	r2, [r3, #0]
    10b6:	230e      	movs	r3, #14
    10b8:	18fb      	adds	r3, r7, r3
    10ba:	3201      	adds	r2, #1
    10bc:	701a      	strb	r2, [r3, #0]
    10be:	68bb      	ldr	r3, [r7, #8]
    10c0:	2230      	movs	r2, #48	; 0x30
    10c2:	5c9b      	ldrb	r3, [r3, r2]
    10c4:	220e      	movs	r2, #14
    10c6:	18ba      	adds	r2, r7, r2
    10c8:	7812      	ldrb	r2, [r2, #0]
    10ca:	429a      	cmp	r2, r3
    10cc:	d3e2      	bcc.n	1094 <ElementAnimationEngine_update+0x2c>
		}
		
		uint8_t * swap = buffer_ptr->write_buffer;
    10ce:	68bb      	ldr	r3, [r7, #8]
    10d0:	689b      	ldr	r3, [r3, #8]
    10d2:	607b      	str	r3, [r7, #4]
		
		buffer_ptr->write_buffer = buffer_ptr->read_buffer;
    10d4:	68bb      	ldr	r3, [r7, #8]
    10d6:	68da      	ldr	r2, [r3, #12]
    10d8:	68bb      	ldr	r3, [r7, #8]
    10da:	609a      	str	r2, [r3, #8]
		
		buffer_ptr->read_buffer = swap;
    10dc:	68bb      	ldr	r3, [r7, #8]
    10de:	687a      	ldr	r2, [r7, #4]
    10e0:	60da      	str	r2, [r3, #12]
	for(uint8_t buf = 0; buf < animation_engine_config.current_animation_buffers; buf++)
    10e2:	230f      	movs	r3, #15
    10e4:	18fb      	adds	r3, r7, r3
    10e6:	781a      	ldrb	r2, [r3, #0]
    10e8:	230f      	movs	r3, #15
    10ea:	18fb      	adds	r3, r7, r3
    10ec:	3201      	adds	r2, #1
    10ee:	701a      	strb	r2, [r3, #0]
    10f0:	4b05      	ldr	r3, [pc, #20]	; (1108 <ElementAnimationEngine_update+0xa0>)
    10f2:	785b      	ldrb	r3, [r3, #1]
    10f4:	220f      	movs	r2, #15
    10f6:	18ba      	adds	r2, r7, r2
    10f8:	7812      	ldrb	r2, [r2, #0]
    10fa:	429a      	cmp	r2, r3
    10fc:	d3bc      	bcc.n	1078 <ElementAnimationEngine_update+0x10>
	}
	
}
    10fe:	46c0      	nop			; (mov r8, r8)
    1100:	0018      	movs	r0, r3
    1102:	46bd      	mov	sp, r7
    1104:	b004      	add	sp, #16
    1106:	bd80      	pop	{r7, pc}
    1108:	20000330 	.word	0x20000330
    110c:	00000e35 	.word	0x00000e35

00001110 <MorphUtils_empty_callback>:
static void MorphUtils_empty_callback(){
    1110:	b580      	push	{r7, lr}
    1112:	af00      	add	r7, sp, #0
}
    1114:	46c0      	nop			; (mov r8, r8)
    1116:	46bd      	mov	sp, r7
    1118:	bd80      	pop	{r7, pc}
	...

0000111c <ElementClock_set>:
	
}

// This function pairs a clock value from the RTC to a wall clock time.
void ElementClock_set(MorphTimeValue val, ElementDateTime time)
{
    111c:	b082      	sub	sp, #8
    111e:	b590      	push	{r4, r7, lr}
    1120:	b083      	sub	sp, #12
    1122:	af00      	add	r7, sp, #0
    1124:	6038      	str	r0, [r7, #0]
    1126:	6079      	str	r1, [r7, #4]
    1128:	2118      	movs	r1, #24
    112a:	1879      	adds	r1, r7, r1
    112c:	600a      	str	r2, [r1, #0]
    112e:	604b      	str	r3, [r1, #4]
	// Deep copy from the parameters.
	
	clock_master_config.date.year		 = time.year;
    1130:	2318      	movs	r3, #24
    1132:	18fb      	adds	r3, r7, r3
    1134:	2200      	movs	r2, #0
    1136:	5e9a      	ldrsh	r2, [r3, r2]
    1138:	4b18      	ldr	r3, [pc, #96]	; (119c <ElementClock_set+0x80>)
    113a:	811a      	strh	r2, [r3, #8]
	clock_master_config.date.month		 = time.month;
    113c:	2318      	movs	r3, #24
    113e:	18fb      	adds	r3, r7, r3
    1140:	2202      	movs	r2, #2
    1142:	5e9a      	ldrsh	r2, [r3, r2]
    1144:	4b15      	ldr	r3, [pc, #84]	; (119c <ElementClock_set+0x80>)
    1146:	815a      	strh	r2, [r3, #10]
	clock_master_config.date.day		 = time.day;
    1148:	2318      	movs	r3, #24
    114a:	18fb      	adds	r3, r7, r3
    114c:	2204      	movs	r2, #4
    114e:	5e9a      	ldrsh	r2, [r3, r2]
    1150:	4b12      	ldr	r3, [pc, #72]	; (119c <ElementClock_set+0x80>)
    1152:	819a      	strh	r2, [r3, #12]
	clock_master_config.date.hour		 = time.hour;
    1154:	2318      	movs	r3, #24
    1156:	18fb      	adds	r3, r7, r3
    1158:	2206      	movs	r2, #6
    115a:	5e9a      	ldrsh	r2, [r3, r2]
    115c:	4b0f      	ldr	r3, [pc, #60]	; (119c <ElementClock_set+0x80>)
    115e:	81da      	strh	r2, [r3, #14]
	clock_master_config.date.minute		 = time.minute;
    1160:	2318      	movs	r3, #24
    1162:	18fb      	adds	r3, r7, r3
    1164:	2208      	movs	r2, #8
    1166:	5e9a      	ldrsh	r2, [r3, r2]
    1168:	4b0c      	ldr	r3, [pc, #48]	; (119c <ElementClock_set+0x80>)
    116a:	821a      	strh	r2, [r3, #16]
	clock_master_config.date.second		 = time.second;
    116c:	2318      	movs	r3, #24
    116e:	18fb      	adds	r3, r7, r3
    1170:	220a      	movs	r2, #10
    1172:	5e9a      	ldrsh	r2, [r3, r2]
    1174:	4b09      	ldr	r3, [pc, #36]	; (119c <ElementClock_set+0x80>)
    1176:	825a      	strh	r2, [r3, #18]
	clock_master_config.date.millisecond = time.millisecond;
    1178:	2318      	movs	r3, #24
    117a:	18fb      	adds	r3, r7, r3
    117c:	220c      	movs	r2, #12
    117e:	5e9a      	ldrsh	r2, [r3, r2]
    1180:	4b06      	ldr	r3, [pc, #24]	; (119c <ElementClock_set+0x80>)
    1182:	829a      	strh	r2, [r3, #20]
	
	clock_master_config.rtc_val = val;
    1184:	4a05      	ldr	r2, [pc, #20]	; (119c <ElementClock_set+0x80>)
    1186:	683b      	ldr	r3, [r7, #0]
    1188:	687c      	ldr	r4, [r7, #4]
    118a:	6013      	str	r3, [r2, #0]
    118c:	6054      	str	r4, [r2, #4]
	
}
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	46bd      	mov	sp, r7
    1192:	b003      	add	sp, #12
    1194:	bc90      	pop	{r4, r7}
    1196:	bc08      	pop	{r3}
    1198:	b002      	add	sp, #8
    119a:	4718      	bx	r3
    119c:	200004b8 	.word	0x200004b8

000011a0 <ElementClock_get_24_hour>:
	return result_day;
	
}

int16_t ElementClock_get_24_hour()
{
    11a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    11a2:	b085      	sub	sp, #20
    11a4:	af00      	add	r7, sp, #0
	return ((((ElementClock_get_base_delta()/ELEMENTCLOCK_MILLI_IN_SECOND + clock_master_config.date.second) / 
    11a6:	4b1f      	ldr	r3, [pc, #124]	; (1224 <ElementClock_get_24_hour+0x84>)
    11a8:	4798      	blx	r3
    11aa:	4e1f      	ldr	r6, [pc, #124]	; (1228 <ElementClock_get_24_hour+0x88>)
    11ac:	22fa      	movs	r2, #250	; 0xfa
    11ae:	0092      	lsls	r2, r2, #2
    11b0:	2300      	movs	r3, #0
    11b2:	47b0      	blx	r6
    11b4:	0002      	movs	r2, r0
    11b6:	000b      	movs	r3, r1
    11b8:	491c      	ldr	r1, [pc, #112]	; (122c <ElementClock_get_24_hour+0x8c>)
    11ba:	2012      	movs	r0, #18
    11bc:	5e09      	ldrsh	r1, [r1, r0]
    11be:	60b9      	str	r1, [r7, #8]
    11c0:	17c9      	asrs	r1, r1, #31
    11c2:	60f9      	str	r1, [r7, #12]
    11c4:	68b8      	ldr	r0, [r7, #8]
    11c6:	68f9      	ldr	r1, [r7, #12]
    11c8:	1880      	adds	r0, r0, r2
    11ca:	4159      	adcs	r1, r3
    11cc:	4e16      	ldr	r6, [pc, #88]	; (1228 <ElementClock_get_24_hour+0x88>)
    11ce:	223c      	movs	r2, #60	; 0x3c
    11d0:	2300      	movs	r3, #0
    11d2:	47b0      	blx	r6
    11d4:	0002      	movs	r2, r0
    11d6:	000b      	movs	r3, r1
	ELEMENTCLOCK_SECOND_IN_MINUTE + clock_master_config.date.minute) / 
    11d8:	4914      	ldr	r1, [pc, #80]	; (122c <ElementClock_get_24_hour+0x8c>)
    11da:	2010      	movs	r0, #16
    11dc:	5e09      	ldrsh	r1, [r1, r0]
    11de:	6039      	str	r1, [r7, #0]
    11e0:	17c9      	asrs	r1, r1, #31
    11e2:	6079      	str	r1, [r7, #4]
    11e4:	6838      	ldr	r0, [r7, #0]
    11e6:	6879      	ldr	r1, [r7, #4]
    11e8:	1880      	adds	r0, r0, r2
    11ea:	4159      	adcs	r1, r3
    11ec:	4e0e      	ldr	r6, [pc, #56]	; (1228 <ElementClock_get_24_hour+0x88>)
    11ee:	223c      	movs	r2, #60	; 0x3c
    11f0:	2300      	movs	r3, #0
    11f2:	47b0      	blx	r6
    11f4:	0002      	movs	r2, r0
    11f6:	000b      	movs	r3, r1
	ELEMENTCLOCK_MINUTE_IN_HOUR) + clock_master_config.date.hour) % 
    11f8:	490c      	ldr	r1, [pc, #48]	; (122c <ElementClock_get_24_hour+0x8c>)
    11fa:	200e      	movs	r0, #14
    11fc:	5e09      	ldrsh	r1, [r1, r0]
    11fe:	000c      	movs	r4, r1
    1200:	17c9      	asrs	r1, r1, #31
    1202:	000d      	movs	r5, r1
    1204:	1912      	adds	r2, r2, r4
    1206:	416b      	adcs	r3, r5
    1208:	0010      	movs	r0, r2
    120a:	0019      	movs	r1, r3
    120c:	4c06      	ldr	r4, [pc, #24]	; (1228 <ElementClock_get_24_hour+0x88>)
    120e:	2218      	movs	r2, #24
    1210:	2300      	movs	r3, #0
    1212:	47a0      	blx	r4
    1214:	001c      	movs	r4, r3
    1216:	0013      	movs	r3, r2
    1218:	b21b      	sxth	r3, r3
	ELEMENTCLOCK_HOUR_IN_DAY; // Find remainder of hours.	
}
    121a:	0018      	movs	r0, r3
    121c:	46bd      	mov	sp, r7
    121e:	b005      	add	sp, #20
    1220:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1222:	46c0      	nop			; (mov r8, r8)
    1224:	000012a1 	.word	0x000012a1
    1228:	00003189 	.word	0x00003189
    122c:	200004b8 	.word	0x200004b8

00001230 <ElementClock_get_minute>:
{
	return ElementClock_get_24_hour() >= ELEMENTCLOCK_HOUR_IN_HALF_DAY;
}

int16_t ElementClock_get_minute()
{
    1230:	b5f0      	push	{r4, r5, r6, r7, lr}
    1232:	b083      	sub	sp, #12
    1234:	af00      	add	r7, sp, #0
	return ((ElementClock_get_base_delta()/ELEMENTCLOCK_MILLI_IN_SECOND + clock_master_config.date.second) / ELEMENTCLOCK_SECOND_IN_MINUTE + clock_master_config.date.minute) % ELEMENTCLOCK_MINUTE_IN_HOUR;	
    1236:	4b17      	ldr	r3, [pc, #92]	; (1294 <ElementClock_get_minute+0x64>)
    1238:	4798      	blx	r3
    123a:	4e17      	ldr	r6, [pc, #92]	; (1298 <ElementClock_get_minute+0x68>)
    123c:	22fa      	movs	r2, #250	; 0xfa
    123e:	0092      	lsls	r2, r2, #2
    1240:	2300      	movs	r3, #0
    1242:	47b0      	blx	r6
    1244:	0002      	movs	r2, r0
    1246:	000b      	movs	r3, r1
    1248:	4914      	ldr	r1, [pc, #80]	; (129c <ElementClock_get_minute+0x6c>)
    124a:	2012      	movs	r0, #18
    124c:	5e09      	ldrsh	r1, [r1, r0]
    124e:	6039      	str	r1, [r7, #0]
    1250:	17c9      	asrs	r1, r1, #31
    1252:	6079      	str	r1, [r7, #4]
    1254:	6838      	ldr	r0, [r7, #0]
    1256:	6879      	ldr	r1, [r7, #4]
    1258:	1880      	adds	r0, r0, r2
    125a:	4159      	adcs	r1, r3
    125c:	4e0e      	ldr	r6, [pc, #56]	; (1298 <ElementClock_get_minute+0x68>)
    125e:	223c      	movs	r2, #60	; 0x3c
    1260:	2300      	movs	r3, #0
    1262:	47b0      	blx	r6
    1264:	0002      	movs	r2, r0
    1266:	000b      	movs	r3, r1
    1268:	490c      	ldr	r1, [pc, #48]	; (129c <ElementClock_get_minute+0x6c>)
    126a:	2010      	movs	r0, #16
    126c:	5e09      	ldrsh	r1, [r1, r0]
    126e:	000c      	movs	r4, r1
    1270:	17c9      	asrs	r1, r1, #31
    1272:	000d      	movs	r5, r1
    1274:	1912      	adds	r2, r2, r4
    1276:	416b      	adcs	r3, r5
    1278:	0010      	movs	r0, r2
    127a:	0019      	movs	r1, r3
    127c:	4c06      	ldr	r4, [pc, #24]	; (1298 <ElementClock_get_minute+0x68>)
    127e:	223c      	movs	r2, #60	; 0x3c
    1280:	2300      	movs	r3, #0
    1282:	47a0      	blx	r4
    1284:	001c      	movs	r4, r3
    1286:	0013      	movs	r3, r2
    1288:	b21b      	sxth	r3, r3
}
    128a:	0018      	movs	r0, r3
    128c:	46bd      	mov	sp, r7
    128e:	b003      	add	sp, #12
    1290:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1292:	46c0      	nop			; (mov r8, r8)
    1294:	000012a1 	.word	0x000012a1
    1298:	00003189 	.word	0x00003189
    129c:	200004b8 	.word	0x200004b8

000012a0 <ElementClock_get_base_delta>:
{
	return (ElementClock_get_base_delta() + clock_master_config.date.millisecond) % ELEMENTCLOCK_MILLI_IN_SECOND;
}

MorphTimeValue ElementClock_get_base_delta()
{
    12a0:	b5b0      	push	{r4, r5, r7, lr}
    12a2:	af00      	add	r7, sp, #0
	
	return MorphTime_millis() - clock_master_config.rtc_val;
    12a4:	4b07      	ldr	r3, [pc, #28]	; (12c4 <ElementClock_get_base_delta+0x24>)
    12a6:	4798      	blx	r3
    12a8:	000a      	movs	r2, r1
    12aa:	0001      	movs	r1, r0
    12ac:	4b06      	ldr	r3, [pc, #24]	; (12c8 <ElementClock_get_base_delta+0x28>)
    12ae:	685c      	ldr	r4, [r3, #4]
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	1ac9      	subs	r1, r1, r3
    12b4:	41a2      	sbcs	r2, r4
    12b6:	000b      	movs	r3, r1
    12b8:	0014      	movs	r4, r2
	
}
    12ba:	0018      	movs	r0, r3
    12bc:	0021      	movs	r1, r4
    12be:	46bd      	mov	sp, r7
    12c0:	bdb0      	pop	{r4, r5, r7, pc}
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	00002e25 	.word	0x00002e25
    12c8:	200004b8 	.word	0x200004b8

000012cc <MorphUtils_empty_callback>:
static void MorphUtils_empty_callback(){
    12cc:	b580      	push	{r7, lr}
    12ce:	af00      	add	r7, sp, #0
}
    12d0:	46c0      	nop			; (mov r8, r8)
    12d2:	46bd      	mov	sp, r7
    12d4:	bd80      	pop	{r7, pc}
	...

000012d8 <ElementDirectButton_init>:

#include "include/ElementDirectButton.h"


void ElementDirectButton_init()
{
    12d8:	b580      	push	{r7, lr}
    12da:	b092      	sub	sp, #72	; 0x48
    12dc:	af00      	add	r7, sp, #0
	
	// Setup the GPIOs for buttoning
	for(uint8_t i = 0; i < ElementDirectButton_get_count(); i ++)
    12de:	2347      	movs	r3, #71	; 0x47
    12e0:	18fb      	adds	r3, r7, r3
    12e2:	2200      	movs	r2, #0
    12e4:	701a      	strb	r2, [r3, #0]
    12e6:	e023      	b.n	1330 <ElementDirectButton_init+0x58>
	{

		ElementButtonConfigStruct btn_struct = element_button_config_array[i];
    12e8:	2347      	movs	r3, #71	; 0x47
    12ea:	18fb      	adds	r3, r7, r3
    12ec:	781b      	ldrb	r3, [r3, #0]
    12ee:	0039      	movs	r1, r7
    12f0:	4a16      	ldr	r2, [pc, #88]	; (134c <ElementDirectButton_init+0x74>)
    12f2:	019b      	lsls	r3, r3, #6
    12f4:	0008      	movs	r0, r1
    12f6:	18d3      	adds	r3, r2, r3
    12f8:	2240      	movs	r2, #64	; 0x40
    12fa:	0019      	movs	r1, r3
    12fc:	4b14      	ldr	r3, [pc, #80]	; (1350 <ElementDirectButton_init+0x78>)
    12fe:	4798      	blx	r3

		// Make sure they are inputs!		
		MorphGPIO_set_pin_direction(btn_struct.button_pin_number, Input);
    1300:	003b      	movs	r3, r7
    1302:	781b      	ldrb	r3, [r3, #0]
    1304:	b25b      	sxtb	r3, r3
    1306:	2100      	movs	r1, #0
    1308:	0018      	movs	r0, r3
    130a:	4b12      	ldr	r3, [pc, #72]	; (1354 <ElementDirectButton_init+0x7c>)
    130c:	4798      	blx	r3
		
		// Also, set the pull direction.
		MorphGPIO_set_pin_pull_state(btn_struct.button_pin_number, btn_struct.button_default_pull);
    130e:	003b      	movs	r3, r7
    1310:	781b      	ldrb	r3, [r3, #0]
    1312:	b25b      	sxtb	r3, r3
    1314:	001a      	movs	r2, r3
    1316:	003b      	movs	r3, r7
    1318:	789b      	ldrb	r3, [r3, #2]
    131a:	0019      	movs	r1, r3
    131c:	0010      	movs	r0, r2
    131e:	4b0e      	ldr	r3, [pc, #56]	; (1358 <ElementDirectButton_init+0x80>)
    1320:	4798      	blx	r3
	for(uint8_t i = 0; i < ElementDirectButton_get_count(); i ++)
    1322:	2347      	movs	r3, #71	; 0x47
    1324:	18fb      	adds	r3, r7, r3
    1326:	781a      	ldrb	r2, [r3, #0]
    1328:	2347      	movs	r3, #71	; 0x47
    132a:	18fb      	adds	r3, r7, r3
    132c:	3201      	adds	r2, #1
    132e:	701a      	strb	r2, [r3, #0]
    1330:	4b0a      	ldr	r3, [pc, #40]	; (135c <ElementDirectButton_init+0x84>)
    1332:	4798      	blx	r3
    1334:	0003      	movs	r3, r0
    1336:	001a      	movs	r2, r3
    1338:	2347      	movs	r3, #71	; 0x47
    133a:	18fb      	adds	r3, r7, r3
    133c:	781b      	ldrb	r3, [r3, #0]
    133e:	4293      	cmp	r3, r2
    1340:	d3d2      	bcc.n	12e8 <ElementDirectButton_init+0x10>
		
	}
	
}
    1342:	46c0      	nop			; (mov r8, r8)
    1344:	46bd      	mov	sp, r7
    1346:	b012      	add	sp, #72	; 0x48
    1348:	bd80      	pop	{r7, pc}
    134a:	46c0      	nop			; (mov r8, r8)
    134c:	200004e0 	.word	0x200004e0
    1350:	000048e1 	.word	0x000048e1
    1354:	00002dcd 	.word	0x00002dcd
    1358:	00002ddd 	.word	0x00002ddd
    135c:	00001361 	.word	0x00001361

00001360 <ElementDirectButton_get_count>:
	}
    
}

uint8_t ElementDirectButton_get_count()
{
    1360:	b580      	push	{r7, lr}
    1362:	af00      	add	r7, sp, #0
	
	return sizeof(element_button_config_array)/sizeof(element_button_config_array[0]);
    1364:	2305      	movs	r3, #5
	
}
    1366:	0018      	movs	r0, r3
    1368:	46bd      	mov	sp, r7
    136a:	bd80      	pop	{r7, pc}

0000136c <ElementDirectButton_register_callback>:

void ElementDirectButton_register_callback(void (*button_callback)(void), int8_t button_number, enum ElementButtonEvent event)
{
    136c:	b580      	push	{r7, lr}
    136e:	b082      	sub	sp, #8
    1370:	af00      	add	r7, sp, #0
    1372:	6078      	str	r0, [r7, #4]
    1374:	0008      	movs	r0, r1
    1376:	0011      	movs	r1, r2
    1378:	1cfb      	adds	r3, r7, #3
    137a:	1c02      	adds	r2, r0, #0
    137c:	701a      	strb	r2, [r3, #0]
    137e:	1cbb      	adds	r3, r7, #2
    1380:	1c0a      	adds	r2, r1, #0
    1382:	701a      	strb	r2, [r3, #0]
	
	switch(event)
    1384:	1cbb      	adds	r3, r7, #2
    1386:	781b      	ldrb	r3, [r3, #0]
    1388:	2b04      	cmp	r3, #4
    138a:	d867      	bhi.n	145c <ElementDirectButton_register_callback+0xf0>
    138c:	009a      	lsls	r2, r3, #2
    138e:	4b35      	ldr	r3, [pc, #212]	; (1464 <ElementDirectButton_register_callback+0xf8>)
    1390:	18d3      	adds	r3, r2, r3
    1392:	681b      	ldr	r3, [r3, #0]
    1394:	469f      	mov	pc, r3
	{
		
		case ElementButtonEventDown:
		
			element_button_config_array[button_number].button_down_callback = button_callback;	
    1396:	1cfb      	adds	r3, r7, #3
    1398:	781b      	ldrb	r3, [r3, #0]
    139a:	b25b      	sxtb	r3, r3
    139c:	4a32      	ldr	r2, [pc, #200]	; (1468 <ElementDirectButton_register_callback+0xfc>)
    139e:	019b      	lsls	r3, r3, #6
    13a0:	18d3      	adds	r3, r2, r3
    13a2:	3314      	adds	r3, #20
    13a4:	687a      	ldr	r2, [r7, #4]
    13a6:	601a      	str	r2, [r3, #0]
			element_button_config_array[button_number].button_down_callback_reg = true;
    13a8:	1cfb      	adds	r3, r7, #3
    13aa:	781b      	ldrb	r3, [r3, #0]
    13ac:	b25b      	sxtb	r3, r3
    13ae:	4a2e      	ldr	r2, [pc, #184]	; (1468 <ElementDirectButton_register_callback+0xfc>)
    13b0:	019b      	lsls	r3, r3, #6
    13b2:	18d3      	adds	r3, r2, r3
    13b4:	3318      	adds	r3, #24
    13b6:	2201      	movs	r2, #1
    13b8:	701a      	strb	r2, [r3, #0]
		
		break;
    13ba:	e04f      	b.n	145c <ElementDirectButton_register_callback+0xf0>
		
		case ElementButtonEventUp:

			element_button_config_array[button_number].button_up_callback = button_callback;
    13bc:	1cfb      	adds	r3, r7, #3
    13be:	781b      	ldrb	r3, [r3, #0]
    13c0:	b25b      	sxtb	r3, r3
    13c2:	4a29      	ldr	r2, [pc, #164]	; (1468 <ElementDirectButton_register_callback+0xfc>)
    13c4:	019b      	lsls	r3, r3, #6
    13c6:	18d3      	adds	r3, r2, r3
    13c8:	331c      	adds	r3, #28
    13ca:	687a      	ldr	r2, [r7, #4]
    13cc:	601a      	str	r2, [r3, #0]
			element_button_config_array[button_number].button_up_callback_reg = true;
    13ce:	1cfb      	adds	r3, r7, #3
    13d0:	781b      	ldrb	r3, [r3, #0]
    13d2:	b25b      	sxtb	r3, r3
    13d4:	4a24      	ldr	r2, [pc, #144]	; (1468 <ElementDirectButton_register_callback+0xfc>)
    13d6:	2120      	movs	r1, #32
    13d8:	019b      	lsls	r3, r3, #6
    13da:	18d3      	adds	r3, r2, r3
    13dc:	185b      	adds	r3, r3, r1
    13de:	2201      	movs	r2, #1
    13e0:	701a      	strb	r2, [r3, #0]
		
		break;
    13e2:	e03b      	b.n	145c <ElementDirectButton_register_callback+0xf0>
		
		case ElementButtonEventPress:
		
			element_button_config_array[button_number].button_press_callback = button_callback;
    13e4:	1cfb      	adds	r3, r7, #3
    13e6:	781b      	ldrb	r3, [r3, #0]
    13e8:	b25b      	sxtb	r3, r3
    13ea:	4a1f      	ldr	r2, [pc, #124]	; (1468 <ElementDirectButton_register_callback+0xfc>)
    13ec:	019b      	lsls	r3, r3, #6
    13ee:	18d3      	adds	r3, r2, r3
    13f0:	3324      	adds	r3, #36	; 0x24
    13f2:	687a      	ldr	r2, [r7, #4]
    13f4:	601a      	str	r2, [r3, #0]
			element_button_config_array[button_number].button_press_callback_reg = true;
    13f6:	1cfb      	adds	r3, r7, #3
    13f8:	781b      	ldrb	r3, [r3, #0]
    13fa:	b25b      	sxtb	r3, r3
    13fc:	4a1a      	ldr	r2, [pc, #104]	; (1468 <ElementDirectButton_register_callback+0xfc>)
    13fe:	2128      	movs	r1, #40	; 0x28
    1400:	019b      	lsls	r3, r3, #6
    1402:	18d3      	adds	r3, r2, r3
    1404:	185b      	adds	r3, r3, r1
    1406:	2201      	movs	r2, #1
    1408:	701a      	strb	r2, [r3, #0]
		
		break;
    140a:	e027      	b.n	145c <ElementDirectButton_register_callback+0xf0>
		
		case ElementButtonEventShort:

			element_button_config_array[button_number].button_short_callback = button_callback;
    140c:	1cfb      	adds	r3, r7, #3
    140e:	781b      	ldrb	r3, [r3, #0]
    1410:	b25b      	sxtb	r3, r3
    1412:	4a15      	ldr	r2, [pc, #84]	; (1468 <ElementDirectButton_register_callback+0xfc>)
    1414:	019b      	lsls	r3, r3, #6
    1416:	18d3      	adds	r3, r2, r3
    1418:	332c      	adds	r3, #44	; 0x2c
    141a:	687a      	ldr	r2, [r7, #4]
    141c:	601a      	str	r2, [r3, #0]
			element_button_config_array[button_number].button_short_callback_reg = true;
    141e:	1cfb      	adds	r3, r7, #3
    1420:	781b      	ldrb	r3, [r3, #0]
    1422:	b25b      	sxtb	r3, r3
    1424:	4a10      	ldr	r2, [pc, #64]	; (1468 <ElementDirectButton_register_callback+0xfc>)
    1426:	2130      	movs	r1, #48	; 0x30
    1428:	019b      	lsls	r3, r3, #6
    142a:	18d3      	adds	r3, r2, r3
    142c:	185b      	adds	r3, r3, r1
    142e:	2201      	movs	r2, #1
    1430:	701a      	strb	r2, [r3, #0]

		break;
    1432:	e013      	b.n	145c <ElementDirectButton_register_callback+0xf0>
		
		case ElementButtonEventLong:

			element_button_config_array[button_number].button_long_callback = button_callback;
    1434:	1cfb      	adds	r3, r7, #3
    1436:	781b      	ldrb	r3, [r3, #0]
    1438:	b25b      	sxtb	r3, r3
    143a:	4a0b      	ldr	r2, [pc, #44]	; (1468 <ElementDirectButton_register_callback+0xfc>)
    143c:	019b      	lsls	r3, r3, #6
    143e:	18d3      	adds	r3, r2, r3
    1440:	3334      	adds	r3, #52	; 0x34
    1442:	687a      	ldr	r2, [r7, #4]
    1444:	601a      	str	r2, [r3, #0]
			element_button_config_array[button_number].button_long_callback_reg = true;
    1446:	1cfb      	adds	r3, r7, #3
    1448:	781b      	ldrb	r3, [r3, #0]
    144a:	b25b      	sxtb	r3, r3
    144c:	4a06      	ldr	r2, [pc, #24]	; (1468 <ElementDirectButton_register_callback+0xfc>)
    144e:	2138      	movs	r1, #56	; 0x38
    1450:	019b      	lsls	r3, r3, #6
    1452:	18d3      	adds	r3, r2, r3
    1454:	185b      	adds	r3, r3, r1
    1456:	2201      	movs	r2, #1
    1458:	701a      	strb	r2, [r3, #0]

		break;
    145a:	46c0      	nop			; (mov r8, r8)
		
	}
	
}
    145c:	46c0      	nop			; (mov r8, r8)
    145e:	46bd      	mov	sp, r7
    1460:	b002      	add	sp, #8
    1462:	bd80      	pop	{r7, pc}
    1464:	00004b50 	.word	0x00004b50
    1468:	200004e0 	.word	0x200004e0

0000146c <ElementDirectButton_deregister_callback>:

void ElementDirectButton_deregister_callback(int8_t button_number, enum ElementButtonEvent event)
{
    146c:	b580      	push	{r7, lr}
    146e:	b082      	sub	sp, #8
    1470:	af00      	add	r7, sp, #0
    1472:	0002      	movs	r2, r0
    1474:	1dfb      	adds	r3, r7, #7
    1476:	701a      	strb	r2, [r3, #0]
    1478:	1dbb      	adds	r3, r7, #6
    147a:	1c0a      	adds	r2, r1, #0
    147c:	701a      	strb	r2, [r3, #0]
	
		switch(event)
    147e:	1dbb      	adds	r3, r7, #6
    1480:	781b      	ldrb	r3, [r3, #0]
    1482:	2b04      	cmp	r3, #4
    1484:	d867      	bhi.n	1556 <ElementDirectButton_deregister_callback+0xea>
    1486:	009a      	lsls	r2, r3, #2
    1488:	4b35      	ldr	r3, [pc, #212]	; (1560 <ElementDirectButton_deregister_callback+0xf4>)
    148a:	18d3      	adds	r3, r2, r3
    148c:	681b      	ldr	r3, [r3, #0]
    148e:	469f      	mov	pc, r3
		{
			
			case ElementButtonEventDown:
			
			element_button_config_array[button_number].button_down_callback = &MorphUtils_empty_callback;
    1490:	1dfb      	adds	r3, r7, #7
    1492:	781b      	ldrb	r3, [r3, #0]
    1494:	b25b      	sxtb	r3, r3
    1496:	4a33      	ldr	r2, [pc, #204]	; (1564 <ElementDirectButton_deregister_callback+0xf8>)
    1498:	019b      	lsls	r3, r3, #6
    149a:	18d3      	adds	r3, r2, r3
    149c:	3314      	adds	r3, #20
    149e:	4a32      	ldr	r2, [pc, #200]	; (1568 <ElementDirectButton_deregister_callback+0xfc>)
    14a0:	601a      	str	r2, [r3, #0]
			element_button_config_array[button_number].button_down_callback_reg = false;
    14a2:	1dfb      	adds	r3, r7, #7
    14a4:	781b      	ldrb	r3, [r3, #0]
    14a6:	b25b      	sxtb	r3, r3
    14a8:	4a2e      	ldr	r2, [pc, #184]	; (1564 <ElementDirectButton_deregister_callback+0xf8>)
    14aa:	019b      	lsls	r3, r3, #6
    14ac:	18d3      	adds	r3, r2, r3
    14ae:	3318      	adds	r3, #24
    14b0:	2200      	movs	r2, #0
    14b2:	701a      	strb	r2, [r3, #0]
			
			break;
    14b4:	e04f      	b.n	1556 <ElementDirectButton_deregister_callback+0xea>
			
			case ElementButtonEventUp:

			element_button_config_array[button_number].button_up_callback = &MorphUtils_empty_callback;
    14b6:	1dfb      	adds	r3, r7, #7
    14b8:	781b      	ldrb	r3, [r3, #0]
    14ba:	b25b      	sxtb	r3, r3
    14bc:	4a29      	ldr	r2, [pc, #164]	; (1564 <ElementDirectButton_deregister_callback+0xf8>)
    14be:	019b      	lsls	r3, r3, #6
    14c0:	18d3      	adds	r3, r2, r3
    14c2:	331c      	adds	r3, #28
    14c4:	4a28      	ldr	r2, [pc, #160]	; (1568 <ElementDirectButton_deregister_callback+0xfc>)
    14c6:	601a      	str	r2, [r3, #0]
			element_button_config_array[button_number].button_up_callback_reg = false;
    14c8:	1dfb      	adds	r3, r7, #7
    14ca:	781b      	ldrb	r3, [r3, #0]
    14cc:	b25b      	sxtb	r3, r3
    14ce:	4a25      	ldr	r2, [pc, #148]	; (1564 <ElementDirectButton_deregister_callback+0xf8>)
    14d0:	2120      	movs	r1, #32
    14d2:	019b      	lsls	r3, r3, #6
    14d4:	18d3      	adds	r3, r2, r3
    14d6:	185b      	adds	r3, r3, r1
    14d8:	2200      	movs	r2, #0
    14da:	701a      	strb	r2, [r3, #0]
			
			break;
    14dc:	e03b      	b.n	1556 <ElementDirectButton_deregister_callback+0xea>
			
			case ElementButtonEventPress:
			
			element_button_config_array[button_number].button_press_callback = &MorphUtils_empty_callback;
    14de:	1dfb      	adds	r3, r7, #7
    14e0:	781b      	ldrb	r3, [r3, #0]
    14e2:	b25b      	sxtb	r3, r3
    14e4:	4a1f      	ldr	r2, [pc, #124]	; (1564 <ElementDirectButton_deregister_callback+0xf8>)
    14e6:	019b      	lsls	r3, r3, #6
    14e8:	18d3      	adds	r3, r2, r3
    14ea:	3324      	adds	r3, #36	; 0x24
    14ec:	4a1e      	ldr	r2, [pc, #120]	; (1568 <ElementDirectButton_deregister_callback+0xfc>)
    14ee:	601a      	str	r2, [r3, #0]
			element_button_config_array[button_number].button_press_callback_reg = false;
    14f0:	1dfb      	adds	r3, r7, #7
    14f2:	781b      	ldrb	r3, [r3, #0]
    14f4:	b25b      	sxtb	r3, r3
    14f6:	4a1b      	ldr	r2, [pc, #108]	; (1564 <ElementDirectButton_deregister_callback+0xf8>)
    14f8:	2128      	movs	r1, #40	; 0x28
    14fa:	019b      	lsls	r3, r3, #6
    14fc:	18d3      	adds	r3, r2, r3
    14fe:	185b      	adds	r3, r3, r1
    1500:	2200      	movs	r2, #0
    1502:	701a      	strb	r2, [r3, #0]
			
			break;
    1504:	e027      	b.n	1556 <ElementDirectButton_deregister_callback+0xea>
			
			case ElementButtonEventShort:

			element_button_config_array[button_number].button_short_callback = &MorphUtils_empty_callback;
    1506:	1dfb      	adds	r3, r7, #7
    1508:	781b      	ldrb	r3, [r3, #0]
    150a:	b25b      	sxtb	r3, r3
    150c:	4a15      	ldr	r2, [pc, #84]	; (1564 <ElementDirectButton_deregister_callback+0xf8>)
    150e:	019b      	lsls	r3, r3, #6
    1510:	18d3      	adds	r3, r2, r3
    1512:	332c      	adds	r3, #44	; 0x2c
    1514:	4a14      	ldr	r2, [pc, #80]	; (1568 <ElementDirectButton_deregister_callback+0xfc>)
    1516:	601a      	str	r2, [r3, #0]
			element_button_config_array[button_number].button_short_callback_reg = false;
    1518:	1dfb      	adds	r3, r7, #7
    151a:	781b      	ldrb	r3, [r3, #0]
    151c:	b25b      	sxtb	r3, r3
    151e:	4a11      	ldr	r2, [pc, #68]	; (1564 <ElementDirectButton_deregister_callback+0xf8>)
    1520:	2130      	movs	r1, #48	; 0x30
    1522:	019b      	lsls	r3, r3, #6
    1524:	18d3      	adds	r3, r2, r3
    1526:	185b      	adds	r3, r3, r1
    1528:	2200      	movs	r2, #0
    152a:	701a      	strb	r2, [r3, #0]

			break;
    152c:	e013      	b.n	1556 <ElementDirectButton_deregister_callback+0xea>
			
			case ElementButtonEventLong:

			element_button_config_array[button_number].button_long_callback = &MorphUtils_empty_callback;
    152e:	1dfb      	adds	r3, r7, #7
    1530:	781b      	ldrb	r3, [r3, #0]
    1532:	b25b      	sxtb	r3, r3
    1534:	4a0b      	ldr	r2, [pc, #44]	; (1564 <ElementDirectButton_deregister_callback+0xf8>)
    1536:	019b      	lsls	r3, r3, #6
    1538:	18d3      	adds	r3, r2, r3
    153a:	3334      	adds	r3, #52	; 0x34
    153c:	4a0a      	ldr	r2, [pc, #40]	; (1568 <ElementDirectButton_deregister_callback+0xfc>)
    153e:	601a      	str	r2, [r3, #0]
			element_button_config_array[button_number].button_long_callback_reg = false;
    1540:	1dfb      	adds	r3, r7, #7
    1542:	781b      	ldrb	r3, [r3, #0]
    1544:	b25b      	sxtb	r3, r3
    1546:	4a07      	ldr	r2, [pc, #28]	; (1564 <ElementDirectButton_deregister_callback+0xf8>)
    1548:	2138      	movs	r1, #56	; 0x38
    154a:	019b      	lsls	r3, r3, #6
    154c:	18d3      	adds	r3, r2, r3
    154e:	185b      	adds	r3, r3, r1
    1550:	2200      	movs	r2, #0
    1552:	701a      	strb	r2, [r3, #0]

			break;
    1554:	46c0      	nop			; (mov r8, r8)
			
		}
	
}
    1556:	46c0      	nop			; (mov r8, r8)
    1558:	46bd      	mov	sp, r7
    155a:	b002      	add	sp, #8
    155c:	bd80      	pop	{r7, pc}
    155e:	46c0      	nop			; (mov r8, r8)
    1560:	00004b64 	.word	0x00004b64
    1564:	200004e0 	.word	0x200004e0
    1568:	000012cd 	.word	0x000012cd

0000156c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    156c:	b580      	push	{r7, lr}
    156e:	b082      	sub	sp, #8
    1570:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    1572:	4b2f      	ldr	r3, [pc, #188]	; (1630 <Reset_Handler+0xc4>)
    1574:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    1576:	4b2f      	ldr	r3, [pc, #188]	; (1634 <Reset_Handler+0xc8>)
    1578:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    157a:	687a      	ldr	r2, [r7, #4]
    157c:	683b      	ldr	r3, [r7, #0]
    157e:	429a      	cmp	r2, r3
    1580:	d00c      	beq.n	159c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    1582:	e007      	b.n	1594 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    1584:	683b      	ldr	r3, [r7, #0]
    1586:	1d1a      	adds	r2, r3, #4
    1588:	603a      	str	r2, [r7, #0]
    158a:	687a      	ldr	r2, [r7, #4]
    158c:	1d11      	adds	r1, r2, #4
    158e:	6079      	str	r1, [r7, #4]
    1590:	6812      	ldr	r2, [r2, #0]
    1592:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    1594:	683a      	ldr	r2, [r7, #0]
    1596:	4b28      	ldr	r3, [pc, #160]	; (1638 <Reset_Handler+0xcc>)
    1598:	429a      	cmp	r2, r3
    159a:	d3f3      	bcc.n	1584 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    159c:	4b27      	ldr	r3, [pc, #156]	; (163c <Reset_Handler+0xd0>)
    159e:	603b      	str	r3, [r7, #0]
    15a0:	e004      	b.n	15ac <Reset_Handler+0x40>
                *pDest++ = 0;
    15a2:	683b      	ldr	r3, [r7, #0]
    15a4:	1d1a      	adds	r2, r3, #4
    15a6:	603a      	str	r2, [r7, #0]
    15a8:	2200      	movs	r2, #0
    15aa:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    15ac:	683a      	ldr	r2, [r7, #0]
    15ae:	4b24      	ldr	r3, [pc, #144]	; (1640 <Reset_Handler+0xd4>)
    15b0:	429a      	cmp	r2, r3
    15b2:	d3f6      	bcc.n	15a2 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    15b4:	4b23      	ldr	r3, [pc, #140]	; (1644 <Reset_Handler+0xd8>)
    15b6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    15b8:	4b23      	ldr	r3, [pc, #140]	; (1648 <Reset_Handler+0xdc>)
    15ba:	687a      	ldr	r2, [r7, #4]
    15bc:	21ff      	movs	r1, #255	; 0xff
    15be:	438a      	bics	r2, r1
    15c0:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    15c2:	4a22      	ldr	r2, [pc, #136]	; (164c <Reset_Handler+0xe0>)
    15c4:	2390      	movs	r3, #144	; 0x90
    15c6:	005b      	lsls	r3, r3, #1
    15c8:	2102      	movs	r1, #2
    15ca:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    15cc:	4a20      	ldr	r2, [pc, #128]	; (1650 <Reset_Handler+0xe4>)
    15ce:	78d3      	ldrb	r3, [r2, #3]
    15d0:	2103      	movs	r1, #3
    15d2:	438b      	bics	r3, r1
    15d4:	1c19      	adds	r1, r3, #0
    15d6:	2302      	movs	r3, #2
    15d8:	430b      	orrs	r3, r1
    15da:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    15dc:	4a1c      	ldr	r2, [pc, #112]	; (1650 <Reset_Handler+0xe4>)
    15de:	78d3      	ldrb	r3, [r2, #3]
    15e0:	210c      	movs	r1, #12
    15e2:	438b      	bics	r3, r1
    15e4:	1c19      	adds	r1, r3, #0
    15e6:	2308      	movs	r3, #8
    15e8:	430b      	orrs	r3, r1
    15ea:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    15ec:	4a19      	ldr	r2, [pc, #100]	; (1654 <Reset_Handler+0xe8>)
    15ee:	7b93      	ldrb	r3, [r2, #14]
    15f0:	2130      	movs	r1, #48	; 0x30
    15f2:	438b      	bics	r3, r1
    15f4:	1c19      	adds	r1, r3, #0
    15f6:	2320      	movs	r3, #32
    15f8:	430b      	orrs	r3, r1
    15fa:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    15fc:	4a15      	ldr	r2, [pc, #84]	; (1654 <Reset_Handler+0xe8>)
    15fe:	7b93      	ldrb	r3, [r2, #14]
    1600:	210c      	movs	r1, #12
    1602:	438b      	bics	r3, r1
    1604:	1c19      	adds	r1, r3, #0
    1606:	2308      	movs	r3, #8
    1608:	430b      	orrs	r3, r1
    160a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    160c:	4a11      	ldr	r2, [pc, #68]	; (1654 <Reset_Handler+0xe8>)
    160e:	7b93      	ldrb	r3, [r2, #14]
    1610:	2103      	movs	r1, #3
    1612:	438b      	bics	r3, r1
    1614:	1c19      	adds	r1, r3, #0
    1616:	2302      	movs	r3, #2
    1618:	430b      	orrs	r3, r1
    161a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    161c:	4a0e      	ldr	r2, [pc, #56]	; (1658 <Reset_Handler+0xec>)
    161e:	6853      	ldr	r3, [r2, #4]
    1620:	2180      	movs	r1, #128	; 0x80
    1622:	430b      	orrs	r3, r1
    1624:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1626:	4b0d      	ldr	r3, [pc, #52]	; (165c <Reset_Handler+0xf0>)
    1628:	4798      	blx	r3

        /* Branch to main function */
        main();
    162a:	4b0d      	ldr	r3, [pc, #52]	; (1660 <Reset_Handler+0xf4>)
    162c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    162e:	e7fe      	b.n	162e <Reset_Handler+0xc2>
    1630:	00004cd8 	.word	0x00004cd8
    1634:	20000000 	.word	0x20000000
    1638:	20000edc 	.word	0x20000edc
    163c:	20000ee0 	.word	0x20000ee0
    1640:	20000f74 	.word	0x20000f74
    1644:	00000000 	.word	0x00000000
    1648:	e000ed00 	.word	0xe000ed00
    164c:	41007000 	.word	0x41007000
    1650:	41005000 	.word	0x41005000
    1654:	41004800 	.word	0x41004800
    1658:	41004000 	.word	0x41004000
    165c:	00004899 	.word	0x00004899
    1660:	0000199d 	.word	0x0000199d

00001664 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1664:	b580      	push	{r7, lr}
    1666:	af00      	add	r7, sp, #0
        while (1) {
    1668:	e7fe      	b.n	1668 <Dummy_Handler+0x4>
	...

0000166c <SystemInit>:
 *
 * @brief  Setup the microcontroller system.
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
    166c:	b580      	push	{r7, lr}
    166e:	af00      	add	r7, sp, #0
        // Keep the default device state after reset
        SystemCoreClock = __SYSTEM_CLOCK;
    1670:	4b02      	ldr	r3, [pc, #8]	; (167c <SystemInit+0x10>)
    1672:	4a03      	ldr	r2, [pc, #12]	; (1680 <SystemInit+0x14>)
    1674:	601a      	str	r2, [r3, #0]
        return;
    1676:	46c0      	nop			; (mov r8, r8)
}
    1678:	46bd      	mov	sp, r7
    167a:	bd80      	pop	{r7, pc}
    167c:	20000650 	.word	0x20000650
    1680:	000f4240 	.word	0x000f4240

00001684 <MorphUtils_empty_callback>:
static void MorphUtils_empty_callback(){
    1684:	b580      	push	{r7, lr}
    1686:	af00      	add	r7, sp, #0
}
    1688:	46c0      	nop			; (mov r8, r8)
    168a:	46bd      	mov	sp, r7
    168c:	bd80      	pop	{r7, pc}
	...

00001690 <MorphConfig_init>:
void morph_implementation_test();

// Does the configuration during run-time
// Configuration only involves setting function pointer values.
static void MorphConfig_init()
{
    1690:	b580      	push	{r7, lr}
    1692:	af00      	add	r7, sp, #0

	morph_config_init();
    1694:	4b22      	ldr	r3, [pc, #136]	; (1720 <MorphConfig_init+0x90>)
    1696:	4798      	blx	r3

	// GPIO Config

	MorphGPIO_register_set_pin_value_function(&morph_config_gpio_set_pin_value);
    1698:	4b22      	ldr	r3, [pc, #136]	; (1724 <MorphConfig_init+0x94>)
    169a:	0018      	movs	r0, r3
    169c:	4b22      	ldr	r3, [pc, #136]	; (1728 <MorphConfig_init+0x98>)
    169e:	4798      	blx	r3

	MorphGPIO_register_get_pin_value_function(&morph_config_gpio_get_pin_value);
    16a0:	4b22      	ldr	r3, [pc, #136]	; (172c <MorphConfig_init+0x9c>)
    16a2:	0018      	movs	r0, r3
    16a4:	4b22      	ldr	r3, [pc, #136]	; (1730 <MorphConfig_init+0xa0>)
    16a6:	4798      	blx	r3
	
	MorphGPIO_register_set_pin_direction_function(&morph_config_gpio_set_pin_direction);
    16a8:	4b22      	ldr	r3, [pc, #136]	; (1734 <MorphConfig_init+0xa4>)
    16aa:	0018      	movs	r0, r3
    16ac:	4b22      	ldr	r3, [pc, #136]	; (1738 <MorphConfig_init+0xa8>)
    16ae:	4798      	blx	r3
	
	MorphGPIO_register_get_pin_direction_function(&morph_config_gpio_get_pin_direction);
    16b0:	4b22      	ldr	r3, [pc, #136]	; (173c <MorphConfig_init+0xac>)
    16b2:	0018      	movs	r0, r3
    16b4:	4b22      	ldr	r3, [pc, #136]	; (1740 <MorphConfig_init+0xb0>)
    16b6:	4798      	blx	r3

	MorphGPIO_register_set_pin_pull_state_function(&morph_config_gpio_set_pin_pull_state);
    16b8:	4b22      	ldr	r3, [pc, #136]	; (1744 <MorphConfig_init+0xb4>)
    16ba:	0018      	movs	r0, r3
    16bc:	4b22      	ldr	r3, [pc, #136]	; (1748 <MorphConfig_init+0xb8>)
    16be:	4798      	blx	r3
	
	MorphGPIO_register_get_pin_pull_state_function(&morph_config_gpio_get_pin_pull_state);	
    16c0:	4b22      	ldr	r3, [pc, #136]	; (174c <MorphConfig_init+0xbc>)
    16c2:	0018      	movs	r0, r3
    16c4:	4b22      	ldr	r3, [pc, #136]	; (1750 <MorphConfig_init+0xc0>)
    16c6:	4798      	blx	r3
	
	// UART Config
	
	MorphUART_register_setup_channel_function(&morph_config_uart_setup_channel);
    16c8:	4b22      	ldr	r3, [pc, #136]	; (1754 <MorphConfig_init+0xc4>)
    16ca:	0018      	movs	r0, r3
    16cc:	4b22      	ldr	r3, [pc, #136]	; (1758 <MorphConfig_init+0xc8>)
    16ce:	4798      	blx	r3
	
	//MorphUART_register_disable_channel_function
	
	MorphUART_register_send_data_function(&morph_config_uart_send_data);
    16d0:	4b22      	ldr	r3, [pc, #136]	; (175c <MorphConfig_init+0xcc>)
    16d2:	0018      	movs	r0, r3
    16d4:	4b22      	ldr	r3, [pc, #136]	; (1760 <MorphConfig_init+0xd0>)
    16d6:	4798      	blx	r3

	MorphUART_register_read_data_function(&morph_config_uart_read_data);
    16d8:	4b22      	ldr	r3, [pc, #136]	; (1764 <MorphConfig_init+0xd4>)
    16da:	0018      	movs	r0, r3
    16dc:	4b22      	ldr	r3, [pc, #136]	; (1768 <MorphConfig_init+0xd8>)
    16de:	4798      	blx	r3
	
	MorphUART_register_write_data_buffer_function(&morph_config_uart_write_data_buffer);
    16e0:	4b22      	ldr	r3, [pc, #136]	; (176c <MorphConfig_init+0xdc>)
    16e2:	0018      	movs	r0, r3
    16e4:	4b22      	ldr	r3, [pc, #136]	; (1770 <MorphConfig_init+0xe0>)
    16e6:	4798      	blx	r3
	
	MorphUART_register_read_data_buffer_function(&morph_config_uart_read_data_buffer);
    16e8:	4b22      	ldr	r3, [pc, #136]	; (1774 <MorphConfig_init+0xe4>)
    16ea:	0018      	movs	r0, r3
    16ec:	4b22      	ldr	r3, [pc, #136]	; (1778 <MorphConfig_init+0xe8>)
    16ee:	4798      	blx	r3
	
	MorphUART_register_set_tx_pin_function(&morph_config_uart_set_tx_pin);
    16f0:	4b22      	ldr	r3, [pc, #136]	; (177c <MorphConfig_init+0xec>)
    16f2:	0018      	movs	r0, r3
    16f4:	4b22      	ldr	r3, [pc, #136]	; (1780 <MorphConfig_init+0xf0>)
    16f6:	4798      	blx	r3

	MorphUART_register_set_rx_pin_function(&morph_config_uart_set_rx_pin);
    16f8:	4b22      	ldr	r3, [pc, #136]	; (1784 <MorphConfig_init+0xf4>)
    16fa:	0018      	movs	r0, r3
    16fc:	4b22      	ldr	r3, [pc, #136]	; (1788 <MorphConfig_init+0xf8>)
    16fe:	4798      	blx	r3

	MorphTime_register_init_function(&morph_config_time_init);
    1700:	4b22      	ldr	r3, [pc, #136]	; (178c <MorphConfig_init+0xfc>)
    1702:	0018      	movs	r0, r3
    1704:	4b22      	ldr	r3, [pc, #136]	; (1790 <MorphConfig_init+0x100>)
    1706:	4798      	blx	r3
	
	MorphTime_register_init_rtc_function(&morph_config_time_init_rtc);
    1708:	4b22      	ldr	r3, [pc, #136]	; (1794 <MorphConfig_init+0x104>)
    170a:	0018      	movs	r0, r3
    170c:	4b22      	ldr	r3, [pc, #136]	; (1798 <MorphConfig_init+0x108>)
    170e:	4798      	blx	r3
	
	MorphTime_register_millis_function(&morph_config_time_millis);
    1710:	4b22      	ldr	r3, [pc, #136]	; (179c <MorphConfig_init+0x10c>)
    1712:	0018      	movs	r0, r3
    1714:	4b22      	ldr	r3, [pc, #136]	; (17a0 <MorphConfig_init+0x110>)
    1716:	4798      	blx	r3
	
	
}
    1718:	46c0      	nop			; (mov r8, r8)
    171a:	46bd      	mov	sp, r7
    171c:	bd80      	pop	{r7, pc}
    171e:	46c0      	nop			; (mov r8, r8)
    1720:	00002d45 	.word	0x00002d45
    1724:	00001c31 	.word	0x00001c31
    1728:	00002d75 	.word	0x00002d75
    172c:	00001d09 	.word	0x00001d09
    1730:	00002d81 	.word	0x00002d81
    1734:	00001dc1 	.word	0x00001dc1
    1738:	00002d8d 	.word	0x00002d8d
    173c:	00001ee1 	.word	0x00001ee1
    1740:	00002d99 	.word	0x00002d99
    1744:	00001f69 	.word	0x00001f69
    1748:	00002da5 	.word	0x00002da5
    174c:	000020e9 	.word	0x000020e9
    1750:	00002db1 	.word	0x00002db1
    1754:	000023d1 	.word	0x000023d1
    1758:	00002e39 	.word	0x00002e39
    175c:	00002665 	.word	0x00002665
    1760:	00002e45 	.word	0x00002e45
    1764:	000026b5 	.word	0x000026b5
    1768:	00002e51 	.word	0x00002e51
    176c:	000026f1 	.word	0x000026f1
    1770:	00002e5d 	.word	0x00002e5d
    1774:	0000273d 	.word	0x0000273d
    1778:	00002e69 	.word	0x00002e69
    177c:	0000278d 	.word	0x0000278d
    1780:	00002e75 	.word	0x00002e75
    1784:	00002a11 	.word	0x00002a11
    1788:	00002e81 	.word	0x00002e81
    178c:	00002cc9 	.word	0x00002cc9
    1790:	00002df1 	.word	0x00002df1
    1794:	00002ce5 	.word	0x00002ce5
    1798:	00002dfd 	.word	0x00002dfd
    179c:	00002d2d 	.word	0x00002d2d
    17a0:	00002e09 	.word	0x00002e09

000017a4 <print_time_7_seg>:
	},
	0					// We have 0 animations running on this buffer currently.
};

enum ElementAnimationEngineStatus print_time_7_seg(ElementAnimationBufferConfigStruct * buffer)
{
    17a4:	b580      	push	{r7, lr}
    17a6:	b084      	sub	sp, #16
    17a8:	af00      	add	r7, sp, #0
    17aa:	6078      	str	r0, [r7, #4]
	
	uint8_t hour = ElementClock_get_24_hour();
    17ac:	4b33      	ldr	r3, [pc, #204]	; (187c <print_time_7_seg+0xd8>)
    17ae:	4798      	blx	r3
    17b0:	0003      	movs	r3, r0
    17b2:	001a      	movs	r2, r3
    17b4:	230f      	movs	r3, #15
    17b6:	18fb      	adds	r3, r7, r3
    17b8:	701a      	strb	r2, [r3, #0]
	
	uint8_t hour_one = hour / 10 + '0';
    17ba:	230f      	movs	r3, #15
    17bc:	18fb      	adds	r3, r7, r3
    17be:	781a      	ldrb	r2, [r3, #0]
    17c0:	4b2f      	ldr	r3, [pc, #188]	; (1880 <print_time_7_seg+0xdc>)
    17c2:	210a      	movs	r1, #10
    17c4:	0010      	movs	r0, r2
    17c6:	4798      	blx	r3
    17c8:	0003      	movs	r3, r0
    17ca:	b2da      	uxtb	r2, r3
    17cc:	230e      	movs	r3, #14
    17ce:	18fb      	adds	r3, r7, r3
    17d0:	3230      	adds	r2, #48	; 0x30
    17d2:	701a      	strb	r2, [r3, #0]
	uint8_t hour_two = hour % 10 + '0';
    17d4:	230f      	movs	r3, #15
    17d6:	18fb      	adds	r3, r7, r3
    17d8:	781a      	ldrb	r2, [r3, #0]
    17da:	4b2a      	ldr	r3, [pc, #168]	; (1884 <print_time_7_seg+0xe0>)
    17dc:	210a      	movs	r1, #10
    17de:	0010      	movs	r0, r2
    17e0:	4798      	blx	r3
    17e2:	000b      	movs	r3, r1
    17e4:	b2da      	uxtb	r2, r3
    17e6:	230d      	movs	r3, #13
    17e8:	18fb      	adds	r3, r7, r3
    17ea:	3230      	adds	r2, #48	; 0x30
    17ec:	701a      	strb	r2, [r3, #0]

	uint8_t minute = ElementClock_get_minute();
    17ee:	4b26      	ldr	r3, [pc, #152]	; (1888 <print_time_7_seg+0xe4>)
    17f0:	4798      	blx	r3
    17f2:	0003      	movs	r3, r0
    17f4:	001a      	movs	r2, r3
    17f6:	230c      	movs	r3, #12
    17f8:	18fb      	adds	r3, r7, r3
    17fa:	701a      	strb	r2, [r3, #0]
	
	uint8_t minute_one = minute / 10 + '0';
    17fc:	230c      	movs	r3, #12
    17fe:	18fb      	adds	r3, r7, r3
    1800:	781a      	ldrb	r2, [r3, #0]
    1802:	4b1f      	ldr	r3, [pc, #124]	; (1880 <print_time_7_seg+0xdc>)
    1804:	210a      	movs	r1, #10
    1806:	0010      	movs	r0, r2
    1808:	4798      	blx	r3
    180a:	0003      	movs	r3, r0
    180c:	b2da      	uxtb	r2, r3
    180e:	230b      	movs	r3, #11
    1810:	18fb      	adds	r3, r7, r3
    1812:	3230      	adds	r2, #48	; 0x30
    1814:	701a      	strb	r2, [r3, #0]
	uint8_t minute_two = minute % 10 + '0';
    1816:	230c      	movs	r3, #12
    1818:	18fb      	adds	r3, r7, r3
    181a:	781a      	ldrb	r2, [r3, #0]
    181c:	4b19      	ldr	r3, [pc, #100]	; (1884 <print_time_7_seg+0xe0>)
    181e:	210a      	movs	r1, #10
    1820:	0010      	movs	r0, r2
    1822:	4798      	blx	r3
    1824:	000b      	movs	r3, r1
    1826:	b2da      	uxtb	r2, r3
    1828:	230a      	movs	r3, #10
    182a:	18fb      	adds	r3, r7, r3
    182c:	3230      	adds	r2, #48	; 0x30
    182e:	701a      	strb	r2, [r3, #0]

	Element7Seg_write_character(buffer, 0, hour_one);
    1830:	230e      	movs	r3, #14
    1832:	18fb      	adds	r3, r7, r3
    1834:	781a      	ldrb	r2, [r3, #0]
    1836:	687b      	ldr	r3, [r7, #4]
    1838:	2100      	movs	r1, #0
    183a:	0018      	movs	r0, r3
    183c:	4b13      	ldr	r3, [pc, #76]	; (188c <print_time_7_seg+0xe8>)
    183e:	4798      	blx	r3
	Element7Seg_write_character(buffer, 1, hour_two);
    1840:	230d      	movs	r3, #13
    1842:	18fb      	adds	r3, r7, r3
    1844:	781a      	ldrb	r2, [r3, #0]
    1846:	687b      	ldr	r3, [r7, #4]
    1848:	2101      	movs	r1, #1
    184a:	0018      	movs	r0, r3
    184c:	4b0f      	ldr	r3, [pc, #60]	; (188c <print_time_7_seg+0xe8>)
    184e:	4798      	blx	r3
	
	Element7Seg_write_character(buffer, 2, minute_one);
    1850:	230b      	movs	r3, #11
    1852:	18fb      	adds	r3, r7, r3
    1854:	781a      	ldrb	r2, [r3, #0]
    1856:	687b      	ldr	r3, [r7, #4]
    1858:	2102      	movs	r1, #2
    185a:	0018      	movs	r0, r3
    185c:	4b0b      	ldr	r3, [pc, #44]	; (188c <print_time_7_seg+0xe8>)
    185e:	4798      	blx	r3
	Element7Seg_write_character(buffer, 3, minute_two);	
    1860:	230a      	movs	r3, #10
    1862:	18fb      	adds	r3, r7, r3
    1864:	781a      	ldrb	r2, [r3, #0]
    1866:	687b      	ldr	r3, [r7, #4]
    1868:	2103      	movs	r1, #3
    186a:	0018      	movs	r0, r3
    186c:	4b07      	ldr	r3, [pc, #28]	; (188c <print_time_7_seg+0xe8>)
    186e:	4798      	blx	r3

	return Animation_Engine_Success;
    1870:	2300      	movs	r3, #0
	
}
    1872:	0018      	movs	r0, r3
    1874:	46bd      	mov	sp, r7
    1876:	b004      	add	sp, #16
    1878:	bd80      	pop	{r7, pc}
    187a:	46c0      	nop			; (mov r8, r8)
    187c:	000011a1 	.word	0x000011a1
    1880:	00002e9d 	.word	0x00002e9d
    1884:	00002fa9 	.word	0x00002fa9
    1888:	00001231 	.word	0x00001231
    188c:	00000121 	.word	0x00000121

00001890 <print_name>:
	NULL,
	&print_7_seg_time_anim_func
};

enum ElementAnimationEngineStatus print_name(ElementAnimationBufferConfigStruct * buffer)
{
    1890:	b5b0      	push	{r4, r5, r7, lr}
    1892:	b086      	sub	sp, #24
    1894:	af00      	add	r7, sp, #0
    1896:	60f8      	str	r0, [r7, #12]
	
	int8_t string_len = 11;
    1898:	230f      	movs	r3, #15
    189a:	2208      	movs	r2, #8
    189c:	4694      	mov	ip, r2
    189e:	44bc      	add	ip, r7
    18a0:	4463      	add	r3, ip
    18a2:	220b      	movs	r2, #11
    18a4:	701a      	strb	r2, [r3, #0]
	
	Element7Seg_write_string(buffer, "Hello there", string_len, ((MorphTime_millis() / 500) % (string_len + 3)) - 3);
    18a6:	230f      	movs	r3, #15
    18a8:	2208      	movs	r2, #8
    18aa:	4694      	mov	ip, r2
    18ac:	44bc      	add	ip, r7
    18ae:	4463      	add	r3, ip
    18b0:	781d      	ldrb	r5, [r3, #0]
    18b2:	4b15      	ldr	r3, [pc, #84]	; (1908 <print_name+0x78>)
    18b4:	4798      	blx	r3
    18b6:	4c15      	ldr	r4, [pc, #84]	; (190c <print_name+0x7c>)
    18b8:	22fa      	movs	r2, #250	; 0xfa
    18ba:	0052      	lsls	r2, r2, #1
    18bc:	2300      	movs	r3, #0
    18be:	47a0      	blx	r4
    18c0:	0003      	movs	r3, r0
    18c2:	000c      	movs	r4, r1
    18c4:	0018      	movs	r0, r3
    18c6:	0021      	movs	r1, r4
    18c8:	230f      	movs	r3, #15
    18ca:	2208      	movs	r2, #8
    18cc:	4694      	mov	ip, r2
    18ce:	44bc      	add	ip, r7
    18d0:	4463      	add	r3, ip
    18d2:	781b      	ldrb	r3, [r3, #0]
    18d4:	b25b      	sxtb	r3, r3
    18d6:	3303      	adds	r3, #3
    18d8:	603b      	str	r3, [r7, #0]
    18da:	17db      	asrs	r3, r3, #31
    18dc:	607b      	str	r3, [r7, #4]
    18de:	4c0b      	ldr	r4, [pc, #44]	; (190c <print_name+0x7c>)
    18e0:	683a      	ldr	r2, [r7, #0]
    18e2:	687b      	ldr	r3, [r7, #4]
    18e4:	47a0      	blx	r4
    18e6:	001c      	movs	r4, r3
    18e8:	0013      	movs	r3, r2
    18ea:	b2db      	uxtb	r3, r3
    18ec:	3b03      	subs	r3, #3
    18ee:	b2db      	uxtb	r3, r3
    18f0:	b25b      	sxtb	r3, r3
    18f2:	4907      	ldr	r1, [pc, #28]	; (1910 <print_name+0x80>)
    18f4:	68f8      	ldr	r0, [r7, #12]
    18f6:	002a      	movs	r2, r5
    18f8:	4c06      	ldr	r4, [pc, #24]	; (1914 <print_name+0x84>)
    18fa:	47a0      	blx	r4

	return Animation_Engine_Success;
    18fc:	2300      	movs	r3, #0
	
}
    18fe:	0018      	movs	r0, r3
    1900:	46bd      	mov	sp, r7
    1902:	b006      	add	sp, #24
    1904:	bdb0      	pop	{r4, r5, r7, pc}
    1906:	46c0      	nop			; (mov r8, r8)
    1908:	00002e25 	.word	0x00002e25
    190c:	00003189 	.word	0x00003189
    1910:	00004b78 	.word	0x00004b78
    1914:	00000171 	.word	0x00000171

00001918 <button_down_test>:
#include <MorphTime.h>

#include "app.h"

void button_down_test()
{
    1918:	b580      	push	{r7, lr}
    191a:	af00      	add	r7, sp, #0
	
	MorphUART_send_data(0, blink.cal_anim->bit_depth);
    191c:	4b05      	ldr	r3, [pc, #20]	; (1934 <button_down_test+0x1c>)
    191e:	685b      	ldr	r3, [r3, #4]
    1920:	7e1b      	ldrb	r3, [r3, #24]
    1922:	b29b      	uxth	r3, r3
    1924:	0019      	movs	r1, r3
    1926:	2000      	movs	r0, #0
    1928:	4b03      	ldr	r3, [pc, #12]	; (1938 <button_down_test+0x20>)
    192a:	4798      	blx	r3
	
}
    192c:	46c0      	nop			; (mov r8, r8)
    192e:	46bd      	mov	sp, r7
    1930:	bd80      	pop	{r7, pc}
    1932:	46c0      	nop			; (mov r8, r8)
    1934:	20000808 	.word	0x20000808
    1938:	00002e8d 	.word	0x00002e8d

0000193c <button_up_test>:

void button_up_test()
{
    193c:	b580      	push	{r7, lr}
    193e:	af00      	add	r7, sp, #0
	
	MorphUART_send_data(0, 'u');
    1940:	2175      	movs	r1, #117	; 0x75
    1942:	2000      	movs	r0, #0
    1944:	4b02      	ldr	r3, [pc, #8]	; (1950 <button_up_test+0x14>)
    1946:	4798      	blx	r3
	
}
    1948:	46c0      	nop			; (mov r8, r8)
    194a:	46bd      	mov	sp, r7
    194c:	bd80      	pop	{r7, pc}
    194e:	46c0      	nop			; (mov r8, r8)
    1950:	00002e8d 	.word	0x00002e8d

00001954 <button_press_test>:

void button_press_test()
{
    1954:	b580      	push	{r7, lr}
    1956:	af00      	add	r7, sp, #0
	
	MorphUART_send_data(0, 'p');
    1958:	2170      	movs	r1, #112	; 0x70
    195a:	2000      	movs	r0, #0
    195c:	4b02      	ldr	r3, [pc, #8]	; (1968 <button_press_test+0x14>)
    195e:	4798      	blx	r3
	
}
    1960:	46c0      	nop			; (mov r8, r8)
    1962:	46bd      	mov	sp, r7
    1964:	bd80      	pop	{r7, pc}
    1966:	46c0      	nop			; (mov r8, r8)
    1968:	00002e8d 	.word	0x00002e8d

0000196c <button_short_test>:

void button_short_test()
{
    196c:	b580      	push	{r7, lr}
    196e:	af00      	add	r7, sp, #0
	
	MorphUART_send_data(0, 's');
    1970:	2173      	movs	r1, #115	; 0x73
    1972:	2000      	movs	r0, #0
    1974:	4b02      	ldr	r3, [pc, #8]	; (1980 <button_short_test+0x14>)
    1976:	4798      	blx	r3
	
}
    1978:	46c0      	nop			; (mov r8, r8)
    197a:	46bd      	mov	sp, r7
    197c:	bd80      	pop	{r7, pc}
    197e:	46c0      	nop			; (mov r8, r8)
    1980:	00002e8d 	.word	0x00002e8d

00001984 <button_long_test>:

void button_long_test()
{
    1984:	b580      	push	{r7, lr}
    1986:	af00      	add	r7, sp, #0
	
	MorphUART_send_data(0, 'l');
    1988:	216c      	movs	r1, #108	; 0x6c
    198a:	2000      	movs	r0, #0
    198c:	4b02      	ldr	r3, [pc, #8]	; (1998 <button_long_test+0x14>)
    198e:	4798      	blx	r3
	
}
    1990:	46c0      	nop			; (mov r8, r8)
    1992:	46bd      	mov	sp, r7
    1994:	bd80      	pop	{r7, pc}
    1996:	46c0      	nop			; (mov r8, r8)
    1998:	00002e8d 	.word	0x00002e8d

0000199c <main>:


int main(void)
{
    199c:	b5b0      	push	{r4, r5, r7, lr}
    199e:	b09c      	sub	sp, #112	; 0x70
    19a0:	af02      	add	r7, sp, #8
    /* Initialize the SAM system */
    SystemInit();
    19a2:	4b46      	ldr	r3, [pc, #280]	; (1abc <main+0x120>)
    19a4:	4798      	blx	r3
	
	MorphConfig_init();
    19a6:	4b46      	ldr	r3, [pc, #280]	; (1ac0 <main+0x124>)
    19a8:	4798      	blx	r3
//	MorphUART_set_tx_pin(0, 19);
//	MorphUART_set_rx_pin(0, 20);
	
//	MorphUART_setup_channel(0, 9600, 8, MorphNoParity, 1);

	MorphTime_init_rtc();
    19aa:	4b46      	ldr	r3, [pc, #280]	; (1ac4 <main+0x128>)
    19ac:	4798      	blx	r3

	uint8_t count = 0;
    19ae:	2367      	movs	r3, #103	; 0x67
    19b0:	18fb      	adds	r3, r7, r3
    19b2:	2200      	movs	r2, #0
    19b4:	701a      	strb	r2, [r3, #0]

	uint16_t data[10] = {0};
    19b6:	2350      	movs	r3, #80	; 0x50
    19b8:	18fb      	adds	r3, r7, r3
    19ba:	0018      	movs	r0, r3
    19bc:	2314      	movs	r3, #20
    19be:	001a      	movs	r2, r3
    19c0:	2100      	movs	r1, #0
    19c2:	4b41      	ldr	r3, [pc, #260]	; (1ac8 <main+0x12c>)
    19c4:	4798      	blx	r3
		
	ElementDirectButton_init();
    19c6:	4b41      	ldr	r3, [pc, #260]	; (1acc <main+0x130>)
    19c8:	4798      	blx	r3

	ElementDirectButton_register_callback(&button_down_test, 0, ElementButtonEventDown);
    19ca:	4b41      	ldr	r3, [pc, #260]	; (1ad0 <main+0x134>)
    19cc:	2200      	movs	r2, #0
    19ce:	2100      	movs	r1, #0
    19d0:	0018      	movs	r0, r3
    19d2:	4b40      	ldr	r3, [pc, #256]	; (1ad4 <main+0x138>)
    19d4:	4798      	blx	r3
	ElementDirectButton_register_callback(&button_up_test, 0, ElementButtonEventUp);
    19d6:	4b40      	ldr	r3, [pc, #256]	; (1ad8 <main+0x13c>)
    19d8:	2201      	movs	r2, #1
    19da:	2100      	movs	r1, #0
    19dc:	0018      	movs	r0, r3
    19de:	4b3d      	ldr	r3, [pc, #244]	; (1ad4 <main+0x138>)
    19e0:	4798      	blx	r3
	ElementDirectButton_register_callback(&button_press_test, 0, ElementButtonEventPress);
    19e2:	4b3e      	ldr	r3, [pc, #248]	; (1adc <main+0x140>)
    19e4:	2202      	movs	r2, #2
    19e6:	2100      	movs	r1, #0
    19e8:	0018      	movs	r0, r3
    19ea:	4b3a      	ldr	r3, [pc, #232]	; (1ad4 <main+0x138>)
    19ec:	4798      	blx	r3
	ElementDirectButton_register_callback(&button_short_test, 0, ElementButtonEventShort);
    19ee:	4b3c      	ldr	r3, [pc, #240]	; (1ae0 <main+0x144>)
    19f0:	2203      	movs	r2, #3
    19f2:	2100      	movs	r1, #0
    19f4:	0018      	movs	r0, r3
    19f6:	4b37      	ldr	r3, [pc, #220]	; (1ad4 <main+0x138>)
    19f8:	4798      	blx	r3
	ElementDirectButton_register_callback(&button_long_test, 0, ElementButtonEventLong);		
    19fa:	4b3a      	ldr	r3, [pc, #232]	; (1ae4 <main+0x148>)
    19fc:	2204      	movs	r2, #4
    19fe:	2100      	movs	r1, #0
    1a00:	0018      	movs	r0, r3
    1a02:	4b34      	ldr	r3, [pc, #208]	; (1ad4 <main+0x138>)
    1a04:	4798      	blx	r3

	// Give the animation engine the LED buffer.
	ElementAnimationEngine_add_buffer(&led_buffer);
    1a06:	4b38      	ldr	r3, [pc, #224]	; (1ae8 <main+0x14c>)
    1a08:	0018      	movs	r0, r3
    1a0a:	4b38      	ldr	r3, [pc, #224]	; (1aec <main+0x150>)
    1a0c:	4798      	blx	r3

	// Push the blink animation onto the blink animation stack.
	ElementAnimationEngine_push_animation(&led_buffer, &blink);
    1a0e:	4a38      	ldr	r2, [pc, #224]	; (1af0 <main+0x154>)
    1a10:	4b35      	ldr	r3, [pc, #212]	; (1ae8 <main+0x14c>)
    1a12:	0011      	movs	r1, r2
    1a14:	0018      	movs	r0, r3
    1a16:	4b37      	ldr	r3, [pc, #220]	; (1af4 <main+0x158>)
    1a18:	4798      	blx	r3

	// Give the animation engine the seven segment buffer.
	ElementAnimationEngine_add_buffer(&seven_seg_buffer);
    1a1a:	4b37      	ldr	r3, [pc, #220]	; (1af8 <main+0x15c>)
    1a1c:	0018      	movs	r0, r3
    1a1e:	4b33      	ldr	r3, [pc, #204]	; (1aec <main+0x150>)
    1a20:	4798      	blx	r3

	// Push the time animation onto the seven segment buffer stack.
//	ElementAnimationEngine_push_animation(&seven_seg_buffer, &print_7_seg_time_anim);

	ElementAnimationEngine_push_animation(&seven_seg_buffer, &print_name_anim);
    1a22:	4a36      	ldr	r2, [pc, #216]	; (1afc <main+0x160>)
    1a24:	4b34      	ldr	r3, [pc, #208]	; (1af8 <main+0x15c>)
    1a26:	0011      	movs	r1, r2
    1a28:	0018      	movs	r0, r3
    1a2a:	4b32      	ldr	r3, [pc, #200]	; (1af4 <main+0x158>)
    1a2c:	4798      	blx	r3


								//     a, b, c, d, e, f, g, period
	MorphPinNumber seven_seg_pins[] = {20, 19, 31, 18, 17, 32, 41, 15};
    1a2e:	2348      	movs	r3, #72	; 0x48
    1a30:	18fb      	adds	r3, r7, r3
    1a32:	4a33      	ldr	r2, [pc, #204]	; (1b00 <main+0x164>)
    1a34:	ca03      	ldmia	r2!, {r0, r1}
    1a36:	c303      	stmia	r3!, {r0, r1}

	MorphPinNumber seven_seg_mux_pins[] = {16, 37, 35};
    1a38:	2344      	movs	r3, #68	; 0x44
    1a3a:	18fb      	adds	r3, r7, r3
    1a3c:	4a31      	ldr	r2, [pc, #196]	; (1b04 <main+0x168>)
    1a3e:	8811      	ldrh	r1, [r2, #0]
    1a40:	8019      	strh	r1, [r3, #0]
    1a42:	7892      	ldrb	r2, [r2, #2]
    1a44:	709a      	strb	r2, [r3, #2]

	Element7SegGPIODriver_init(&seven_seg_pins, 8, &seven_seg_mux_pins, 3, &seven_seg_buffer);
    1a46:	2344      	movs	r3, #68	; 0x44
    1a48:	18fa      	adds	r2, r7, r3
    1a4a:	2348      	movs	r3, #72	; 0x48
    1a4c:	18f8      	adds	r0, r7, r3
    1a4e:	4b2a      	ldr	r3, [pc, #168]	; (1af8 <main+0x15c>)
    1a50:	9300      	str	r3, [sp, #0]
    1a52:	2303      	movs	r3, #3
    1a54:	2108      	movs	r1, #8
    1a56:	4c2c      	ldr	r4, [pc, #176]	; (1b08 <main+0x16c>)
    1a58:	47a0      	blx	r4

	ElementDateTime cur_date;

	cur_date.year = 2019;	
    1a5a:	2334      	movs	r3, #52	; 0x34
    1a5c:	18fb      	adds	r3, r7, r3
    1a5e:	4a2b      	ldr	r2, [pc, #172]	; (1b0c <main+0x170>)
    1a60:	801a      	strh	r2, [r3, #0]
	cur_date.month = 0;	
    1a62:	2334      	movs	r3, #52	; 0x34
    1a64:	18fb      	adds	r3, r7, r3
    1a66:	2200      	movs	r2, #0
    1a68:	805a      	strh	r2, [r3, #2]
	cur_date.day = 1;
    1a6a:	2334      	movs	r3, #52	; 0x34
    1a6c:	18fb      	adds	r3, r7, r3
    1a6e:	2201      	movs	r2, #1
    1a70:	809a      	strh	r2, [r3, #4]

	cur_date.hour = 12;
    1a72:	2334      	movs	r3, #52	; 0x34
    1a74:	18fb      	adds	r3, r7, r3
    1a76:	220c      	movs	r2, #12
    1a78:	80da      	strh	r2, [r3, #6]
	cur_date.minute = 00;
    1a7a:	2334      	movs	r3, #52	; 0x34
    1a7c:	18fb      	adds	r3, r7, r3
    1a7e:	2200      	movs	r2, #0
    1a80:	811a      	strh	r2, [r3, #8]
	cur_date.second = 0;
    1a82:	2334      	movs	r3, #52	; 0x34
    1a84:	18fb      	adds	r3, r7, r3
    1a86:	2200      	movs	r2, #0
    1a88:	815a      	strh	r2, [r3, #10]

	ElementClock_set(MorphTime_millis(), cur_date);
    1a8a:	4b21      	ldr	r3, [pc, #132]	; (1b10 <main+0x174>)
    1a8c:	4798      	blx	r3
    1a8e:	0004      	movs	r4, r0
    1a90:	000d      	movs	r5, r1
    1a92:	2334      	movs	r3, #52	; 0x34
    1a94:	18fb      	adds	r3, r7, r3
    1a96:	466a      	mov	r2, sp
    1a98:	0011      	movs	r1, r2
    1a9a:	001a      	movs	r2, r3
    1a9c:	3208      	adds	r2, #8
    1a9e:	6810      	ldr	r0, [r2, #0]
    1aa0:	6008      	str	r0, [r1, #0]
    1aa2:	8892      	ldrh	r2, [r2, #4]
    1aa4:	808a      	strh	r2, [r1, #4]
    1aa6:	681a      	ldr	r2, [r3, #0]
    1aa8:	685b      	ldr	r3, [r3, #4]
    1aaa:	0020      	movs	r0, r4
    1aac:	0029      	movs	r1, r5
    1aae:	4c19      	ldr	r4, [pc, #100]	; (1b14 <main+0x178>)
    1ab0:	47a0      	blx	r4

		MorphUART_send_data(0, year_one);
		MorphUART_send_data(0, year_two);
		MorphUART_send_data(0, '\n');*/
		
		Element7SegGPIODriver_update();
    1ab2:	4b19      	ldr	r3, [pc, #100]	; (1b18 <main+0x17c>)
    1ab4:	4798      	blx	r3
				
		ElementAnimationEngine_update();
    1ab6:	4b19      	ldr	r3, [pc, #100]	; (1b1c <main+0x180>)
    1ab8:	4798      	blx	r3
    {
    1aba:	e7fa      	b.n	1ab2 <main+0x116>
    1abc:	0000166d 	.word	0x0000166d
    1ac0:	00001691 	.word	0x00001691
    1ac4:	00002e15 	.word	0x00002e15
    1ac8:	00004965 	.word	0x00004965
    1acc:	000012d9 	.word	0x000012d9
    1ad0:	00001919 	.word	0x00001919
    1ad4:	0000136d 	.word	0x0000136d
    1ad8:	0000193d 	.word	0x0000193d
    1adc:	00001955 	.word	0x00001955
    1ae0:	0000196d 	.word	0x0000196d
    1ae4:	00001985 	.word	0x00001985
    1ae8:	20000814 	.word	0x20000814
    1aec:	00000fdd 	.word	0x00000fdd
    1af0:	20000808 	.word	0x20000808
    1af4:	0000102d 	.word	0x0000102d
    1af8:	20000848 	.word	0x20000848
    1afc:	20000890 	.word	0x20000890
    1b00:	00004b84 	.word	0x00004b84
    1b04:	00004b8c 	.word	0x00004b8c
    1b08:	00000305 	.word	0x00000305
    1b0c:	000007e3 	.word	0x000007e3
    1b10:	00002e25 	.word	0x00002e25
    1b14:	0000111d 	.word	0x0000111d
    1b18:	000004a1 	.word	0x000004a1
    1b1c:	00001069 	.word	0x00001069

00001b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1b20:	b580      	push	{r7, lr}
    1b22:	b082      	sub	sp, #8
    1b24:	af00      	add	r7, sp, #0
    1b26:	0002      	movs	r2, r0
    1b28:	1dfb      	adds	r3, r7, #7
    1b2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    1b2c:	1dfb      	adds	r3, r7, #7
    1b2e:	781b      	ldrb	r3, [r3, #0]
    1b30:	2b7f      	cmp	r3, #127	; 0x7f
    1b32:	d809      	bhi.n	1b48 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1b34:	4b06      	ldr	r3, [pc, #24]	; (1b50 <__NVIC_EnableIRQ+0x30>)
    1b36:	1dfa      	adds	r2, r7, #7
    1b38:	7812      	ldrb	r2, [r2, #0]
    1b3a:	0011      	movs	r1, r2
    1b3c:	221f      	movs	r2, #31
    1b3e:	400a      	ands	r2, r1
    1b40:	2101      	movs	r1, #1
    1b42:	4091      	lsls	r1, r2
    1b44:	000a      	movs	r2, r1
    1b46:	601a      	str	r2, [r3, #0]
  }
}
    1b48:	46c0      	nop			; (mov r8, r8)
    1b4a:	46bd      	mov	sp, r7
    1b4c:	b002      	add	sp, #8
    1b4e:	bd80      	pop	{r7, pc}
    1b50:	e000e100 	.word	0xe000e100

00001b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1b54:	b5b0      	push	{r4, r5, r7, lr}
    1b56:	b082      	sub	sp, #8
    1b58:	af00      	add	r7, sp, #0
    1b5a:	0002      	movs	r2, r0
    1b5c:	6039      	str	r1, [r7, #0]
    1b5e:	1dfb      	adds	r3, r7, #7
    1b60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    1b62:	1dfb      	adds	r3, r7, #7
    1b64:	781b      	ldrb	r3, [r3, #0]
    1b66:	2b7f      	cmp	r3, #127	; 0x7f
    1b68:	d828      	bhi.n	1bbc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1b6a:	4c2f      	ldr	r4, [pc, #188]	; (1c28 <__NVIC_SetPriority+0xd4>)
    1b6c:	1dfb      	adds	r3, r7, #7
    1b6e:	781b      	ldrb	r3, [r3, #0]
    1b70:	b25b      	sxtb	r3, r3
    1b72:	089b      	lsrs	r3, r3, #2
    1b74:	492c      	ldr	r1, [pc, #176]	; (1c28 <__NVIC_SetPriority+0xd4>)
    1b76:	1dfa      	adds	r2, r7, #7
    1b78:	7812      	ldrb	r2, [r2, #0]
    1b7a:	b252      	sxtb	r2, r2
    1b7c:	0892      	lsrs	r2, r2, #2
    1b7e:	32c0      	adds	r2, #192	; 0xc0
    1b80:	0092      	lsls	r2, r2, #2
    1b82:	5852      	ldr	r2, [r2, r1]
    1b84:	1df9      	adds	r1, r7, #7
    1b86:	7809      	ldrb	r1, [r1, #0]
    1b88:	0008      	movs	r0, r1
    1b8a:	2103      	movs	r1, #3
    1b8c:	4001      	ands	r1, r0
    1b8e:	00c9      	lsls	r1, r1, #3
    1b90:	20ff      	movs	r0, #255	; 0xff
    1b92:	4088      	lsls	r0, r1
    1b94:	0001      	movs	r1, r0
    1b96:	43c9      	mvns	r1, r1
    1b98:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    1b9a:	683a      	ldr	r2, [r7, #0]
    1b9c:	0192      	lsls	r2, r2, #6
    1b9e:	20ff      	movs	r0, #255	; 0xff
    1ba0:	4010      	ands	r0, r2
    1ba2:	1dfa      	adds	r2, r7, #7
    1ba4:	7812      	ldrb	r2, [r2, #0]
    1ba6:	0015      	movs	r5, r2
    1ba8:	2203      	movs	r2, #3
    1baa:	402a      	ands	r2, r5
    1bac:	00d2      	lsls	r2, r2, #3
    1bae:	4090      	lsls	r0, r2
    1bb0:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1bb2:	430a      	orrs	r2, r1
    1bb4:	33c0      	adds	r3, #192	; 0xc0
    1bb6:	009b      	lsls	r3, r3, #2
    1bb8:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
    1bba:	e031      	b.n	1c20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1bbc:	4c1b      	ldr	r4, [pc, #108]	; (1c2c <__NVIC_SetPriority+0xd8>)
    1bbe:	1dfb      	adds	r3, r7, #7
    1bc0:	781b      	ldrb	r3, [r3, #0]
    1bc2:	001a      	movs	r2, r3
    1bc4:	230f      	movs	r3, #15
    1bc6:	4013      	ands	r3, r2
    1bc8:	3b08      	subs	r3, #8
    1bca:	0899      	lsrs	r1, r3, #2
    1bcc:	4a17      	ldr	r2, [pc, #92]	; (1c2c <__NVIC_SetPriority+0xd8>)
    1bce:	1dfb      	adds	r3, r7, #7
    1bd0:	781b      	ldrb	r3, [r3, #0]
    1bd2:	0018      	movs	r0, r3
    1bd4:	230f      	movs	r3, #15
    1bd6:	4003      	ands	r3, r0
    1bd8:	3b08      	subs	r3, #8
    1bda:	089b      	lsrs	r3, r3, #2
    1bdc:	3306      	adds	r3, #6
    1bde:	009b      	lsls	r3, r3, #2
    1be0:	18d3      	adds	r3, r2, r3
    1be2:	3304      	adds	r3, #4
    1be4:	681b      	ldr	r3, [r3, #0]
    1be6:	1dfa      	adds	r2, r7, #7
    1be8:	7812      	ldrb	r2, [r2, #0]
    1bea:	0010      	movs	r0, r2
    1bec:	2203      	movs	r2, #3
    1bee:	4002      	ands	r2, r0
    1bf0:	00d2      	lsls	r2, r2, #3
    1bf2:	20ff      	movs	r0, #255	; 0xff
    1bf4:	4090      	lsls	r0, r2
    1bf6:	0002      	movs	r2, r0
    1bf8:	43d2      	mvns	r2, r2
    1bfa:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    1bfc:	683b      	ldr	r3, [r7, #0]
    1bfe:	019b      	lsls	r3, r3, #6
    1c00:	20ff      	movs	r0, #255	; 0xff
    1c02:	4018      	ands	r0, r3
    1c04:	1dfb      	adds	r3, r7, #7
    1c06:	781b      	ldrb	r3, [r3, #0]
    1c08:	001d      	movs	r5, r3
    1c0a:	2303      	movs	r3, #3
    1c0c:	402b      	ands	r3, r5
    1c0e:	00db      	lsls	r3, r3, #3
    1c10:	4098      	lsls	r0, r3
    1c12:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1c14:	431a      	orrs	r2, r3
    1c16:	1d8b      	adds	r3, r1, #6
    1c18:	009b      	lsls	r3, r3, #2
    1c1a:	18e3      	adds	r3, r4, r3
    1c1c:	3304      	adds	r3, #4
    1c1e:	601a      	str	r2, [r3, #0]
}
    1c20:	46c0      	nop			; (mov r8, r8)
    1c22:	46bd      	mov	sp, r7
    1c24:	b002      	add	sp, #8
    1c26:	bdb0      	pop	{r4, r5, r7, pc}
    1c28:	e000e100 	.word	0xe000e100
    1c2c:	e000ed00 	.word	0xe000ed00

00001c30 <morph_config_gpio_set_pin_value>:
};

enum PMUXTypes {EIC_PMUX = 0, ADC_PMUX = 1, SERCOM_PMUX = 2, SERCOM_ALT_PMUX = 3, TC_PMUX=4, TCC_PMUX=5, COM_PMUX = 6, GCLK_PMUX = 7};

void morph_config_gpio_set_pin_value(MorphPinNumber pn, enum MorphPinValue pv)
{
    1c30:	b580      	push	{r7, lr}
    1c32:	b084      	sub	sp, #16
    1c34:	af00      	add	r7, sp, #0
    1c36:	0002      	movs	r2, r0
    1c38:	1dfb      	adds	r3, r7, #7
    1c3a:	701a      	strb	r2, [r3, #0]
    1c3c:	1dbb      	adds	r3, r7, #6
    1c3e:	1c0a      	adds	r2, r1, #0
    1c40:	701a      	strb	r2, [r3, #0]
	
	uint8_t value = (pv == High ? 1 : 0);
    1c42:	1dbb      	adds	r3, r7, #6
    1c44:	781b      	ldrb	r3, [r3, #0]
    1c46:	3b01      	subs	r3, #1
    1c48:	425a      	negs	r2, r3
    1c4a:	4153      	adcs	r3, r2
    1c4c:	b2da      	uxtb	r2, r3
    1c4e:	230f      	movs	r3, #15
    1c50:	18fb      	adds	r3, r7, r3
    1c52:	701a      	strb	r2, [r3, #0]
	
	if(pn >= 1 && pn <= PIN_COUNT)
    1c54:	1dfb      	adds	r3, r7, #7
    1c56:	781b      	ldrb	r3, [r3, #0]
    1c58:	b25b      	sxtb	r3, r3
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	dd4b      	ble.n	1cf6 <morph_config_gpio_set_pin_value+0xc6>
    1c5e:	1dfb      	adds	r3, r7, #7
    1c60:	781b      	ldrb	r3, [r3, #0]
    1c62:	b25b      	sxtb	r3, r3
    1c64:	2b40      	cmp	r3, #64	; 0x40
    1c66:	dc46      	bgt.n	1cf6 <morph_config_gpio_set_pin_value+0xc6>
	{
	
		int8_t pin_group = pin_defs[pn - 1].pinGroup;
    1c68:	1dfb      	adds	r3, r7, #7
    1c6a:	781b      	ldrb	r3, [r3, #0]
    1c6c:	b25b      	sxtb	r3, r3
    1c6e:	1e5a      	subs	r2, r3, #1
    1c70:	230e      	movs	r3, #14
    1c72:	18f9      	adds	r1, r7, r3
    1c74:	4822      	ldr	r0, [pc, #136]	; (1d00 <morph_config_gpio_set_pin_value+0xd0>)
    1c76:	0013      	movs	r3, r2
    1c78:	005b      	lsls	r3, r3, #1
    1c7a:	189b      	adds	r3, r3, r2
    1c7c:	005b      	lsls	r3, r3, #1
    1c7e:	5c1b      	ldrb	r3, [r3, r0]
    1c80:	700b      	strb	r3, [r1, #0]
		int8_t pin_num = pin_defs[pn - 1].pinNumInGroup;
    1c82:	1dfb      	adds	r3, r7, #7
    1c84:	781b      	ldrb	r3, [r3, #0]
    1c86:	b25b      	sxtb	r3, r3
    1c88:	1e5a      	subs	r2, r3, #1
    1c8a:	230d      	movs	r3, #13
    1c8c:	18f9      	adds	r1, r7, r3
    1c8e:	481c      	ldr	r0, [pc, #112]	; (1d00 <morph_config_gpio_set_pin_value+0xd0>)
    1c90:	0013      	movs	r3, r2
    1c92:	005b      	lsls	r3, r3, #1
    1c94:	189b      	adds	r3, r3, r2
    1c96:	005b      	lsls	r3, r3, #1
    1c98:	18c3      	adds	r3, r0, r3
    1c9a:	3301      	adds	r3, #1
    1c9c:	781b      	ldrb	r3, [r3, #0]
    1c9e:	700b      	strb	r3, [r1, #0]
	
		if(pin_group >= 0)
    1ca0:	230e      	movs	r3, #14
    1ca2:	18fb      	adds	r3, r7, r3
    1ca4:	781b      	ldrb	r3, [r3, #0]
    1ca6:	2b7f      	cmp	r3, #127	; 0x7f
    1ca8:	d825      	bhi.n	1cf6 <morph_config_gpio_set_pin_value+0xc6>
		{
	
			if(value == 1)
    1caa:	230f      	movs	r3, #15
    1cac:	18fb      	adds	r3, r7, r3
    1cae:	781b      	ldrb	r3, [r3, #0]
    1cb0:	2b01      	cmp	r3, #1
    1cb2:	d110      	bne.n	1cd6 <morph_config_gpio_set_pin_value+0xa6>
			{
				PORT->Group[pin_group].OUTSET.reg = (1ul << pin_num);	
    1cb4:	4913      	ldr	r1, [pc, #76]	; (1d04 <morph_config_gpio_set_pin_value+0xd4>)
    1cb6:	230e      	movs	r3, #14
    1cb8:	18fb      	adds	r3, r7, r3
    1cba:	781b      	ldrb	r3, [r3, #0]
    1cbc:	b25b      	sxtb	r3, r3
    1cbe:	220d      	movs	r2, #13
    1cc0:	18ba      	adds	r2, r7, r2
    1cc2:	7812      	ldrb	r2, [r2, #0]
    1cc4:	b252      	sxtb	r2, r2
    1cc6:	2001      	movs	r0, #1
    1cc8:	4090      	lsls	r0, r2
    1cca:	0002      	movs	r2, r0
    1ccc:	01db      	lsls	r3, r3, #7
    1cce:	18cb      	adds	r3, r1, r3
    1cd0:	3318      	adds	r3, #24
    1cd2:	601a      	str	r2, [r3, #0]
		
		}
		
	}
	
}
    1cd4:	e00f      	b.n	1cf6 <morph_config_gpio_set_pin_value+0xc6>
				PORT->Group[pin_group].OUTCLR.reg = (1ul << pin_num);
    1cd6:	490b      	ldr	r1, [pc, #44]	; (1d04 <morph_config_gpio_set_pin_value+0xd4>)
    1cd8:	230e      	movs	r3, #14
    1cda:	18fb      	adds	r3, r7, r3
    1cdc:	781b      	ldrb	r3, [r3, #0]
    1cde:	b25b      	sxtb	r3, r3
    1ce0:	220d      	movs	r2, #13
    1ce2:	18ba      	adds	r2, r7, r2
    1ce4:	7812      	ldrb	r2, [r2, #0]
    1ce6:	b252      	sxtb	r2, r2
    1ce8:	2001      	movs	r0, #1
    1cea:	4090      	lsls	r0, r2
    1cec:	0002      	movs	r2, r0
    1cee:	01db      	lsls	r3, r3, #7
    1cf0:	18cb      	adds	r3, r1, r3
    1cf2:	3314      	adds	r3, #20
    1cf4:	601a      	str	r2, [r3, #0]
}
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	46bd      	mov	sp, r7
    1cfa:	b004      	add	sp, #16
    1cfc:	bd80      	pop	{r7, pc}
    1cfe:	46c0      	nop			; (mov r8, r8)
    1d00:	2000089c 	.word	0x2000089c
    1d04:	41004400 	.word	0x41004400

00001d08 <morph_config_gpio_get_pin_value>:

enum MorphPinValue morph_config_gpio_get_pin_value(MorphPinNumber pn)
{
    1d08:	b580      	push	{r7, lr}
    1d0a:	b084      	sub	sp, #16
    1d0c:	af00      	add	r7, sp, #0
    1d0e:	0002      	movs	r2, r0
    1d10:	1dfb      	adds	r3, r7, #7
    1d12:	701a      	strb	r2, [r3, #0]
	
	int8_t pin_group = pin_defs[pn - 1].pinGroup;
    1d14:	1dfb      	adds	r3, r7, #7
    1d16:	781b      	ldrb	r3, [r3, #0]
    1d18:	b25b      	sxtb	r3, r3
    1d1a:	1e5a      	subs	r2, r3, #1
    1d1c:	230f      	movs	r3, #15
    1d1e:	18f9      	adds	r1, r7, r3
    1d20:	4825      	ldr	r0, [pc, #148]	; (1db8 <morph_config_gpio_get_pin_value+0xb0>)
    1d22:	0013      	movs	r3, r2
    1d24:	005b      	lsls	r3, r3, #1
    1d26:	189b      	adds	r3, r3, r2
    1d28:	005b      	lsls	r3, r3, #1
    1d2a:	5c1b      	ldrb	r3, [r3, r0]
    1d2c:	700b      	strb	r3, [r1, #0]
	int8_t pin_num = pin_defs[pn - 1].pinNumInGroup;
    1d2e:	1dfb      	adds	r3, r7, #7
    1d30:	781b      	ldrb	r3, [r3, #0]
    1d32:	b25b      	sxtb	r3, r3
    1d34:	1e5a      	subs	r2, r3, #1
    1d36:	230e      	movs	r3, #14
    1d38:	18f9      	adds	r1, r7, r3
    1d3a:	481f      	ldr	r0, [pc, #124]	; (1db8 <morph_config_gpio_get_pin_value+0xb0>)
    1d3c:	0013      	movs	r3, r2
    1d3e:	005b      	lsls	r3, r3, #1
    1d40:	189b      	adds	r3, r3, r2
    1d42:	005b      	lsls	r3, r3, #1
    1d44:	18c3      	adds	r3, r0, r3
    1d46:	3301      	adds	r3, #1
    1d48:	781b      	ldrb	r3, [r3, #0]
    1d4a:	700b      	strb	r3, [r1, #0]
	
	
	if (pin_defs[pn].pinGroup >= 0)
    1d4c:	1dfb      	adds	r3, r7, #7
    1d4e:	2200      	movs	r2, #0
    1d50:	569a      	ldrsb	r2, [r3, r2]
    1d52:	4919      	ldr	r1, [pc, #100]	; (1db8 <morph_config_gpio_get_pin_value+0xb0>)
    1d54:	0013      	movs	r3, r2
    1d56:	005b      	lsls	r3, r3, #1
    1d58:	189b      	adds	r3, r3, r2
    1d5a:	005b      	lsls	r3, r3, #1
    1d5c:	565b      	ldrsb	r3, [r3, r1]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	db25      	blt.n	1dae <morph_config_gpio_get_pin_value+0xa6>
	{
		
		// Verify the input enable has been enabled
		PORT->Group[pin_group].PINCFG[pin_num].bit.INEN = 1;
    1d62:	4816      	ldr	r0, [pc, #88]	; (1dbc <morph_config_gpio_get_pin_value+0xb4>)
    1d64:	230f      	movs	r3, #15
    1d66:	18fb      	adds	r3, r7, r3
    1d68:	2200      	movs	r2, #0
    1d6a:	569a      	ldrsb	r2, [r3, r2]
    1d6c:	230e      	movs	r3, #14
    1d6e:	18fb      	adds	r3, r7, r3
    1d70:	781b      	ldrb	r3, [r3, #0]
    1d72:	b25b      	sxtb	r3, r3
    1d74:	2140      	movs	r1, #64	; 0x40
    1d76:	01d2      	lsls	r2, r2, #7
    1d78:	1882      	adds	r2, r0, r2
    1d7a:	18d3      	adds	r3, r2, r3
    1d7c:	185a      	adds	r2, r3, r1
    1d7e:	7813      	ldrb	r3, [r2, #0]
    1d80:	2102      	movs	r1, #2
    1d82:	430b      	orrs	r3, r1
    1d84:	7013      	strb	r3, [r2, #0]
		
		if((PORT->Group[pin_group].IN.reg >> pin_num) & 0x1 == 1)
    1d86:	4a0d      	ldr	r2, [pc, #52]	; (1dbc <morph_config_gpio_get_pin_value+0xb4>)
    1d88:	230f      	movs	r3, #15
    1d8a:	18fb      	adds	r3, r7, r3
    1d8c:	781b      	ldrb	r3, [r3, #0]
    1d8e:	b25b      	sxtb	r3, r3
    1d90:	01db      	lsls	r3, r3, #7
    1d92:	18d3      	adds	r3, r2, r3
    1d94:	3320      	adds	r3, #32
    1d96:	681a      	ldr	r2, [r3, #0]
    1d98:	230e      	movs	r3, #14
    1d9a:	18fb      	adds	r3, r7, r3
    1d9c:	781b      	ldrb	r3, [r3, #0]
    1d9e:	b25b      	sxtb	r3, r3
    1da0:	40da      	lsrs	r2, r3
    1da2:	0013      	movs	r3, r2
    1da4:	2201      	movs	r2, #1
    1da6:	4013      	ands	r3, r2
    1da8:	d001      	beq.n	1dae <morph_config_gpio_get_pin_value+0xa6>
			return High;
    1daa:	2301      	movs	r3, #1
    1dac:	e000      	b.n	1db0 <morph_config_gpio_get_pin_value+0xa8>
		
	}
	
	return Low;
    1dae:	2300      	movs	r3, #0
	
}
    1db0:	0018      	movs	r0, r3
    1db2:	46bd      	mov	sp, r7
    1db4:	b004      	add	sp, #16
    1db6:	bd80      	pop	{r7, pc}
    1db8:	2000089c 	.word	0x2000089c
    1dbc:	41004400 	.word	0x41004400

00001dc0 <morph_config_gpio_set_pin_direction>:

void morph_config_gpio_set_pin_direction(MorphPinNumber pn, enum MorphPinDirection pd)
{
    1dc0:	b580      	push	{r7, lr}
    1dc2:	b084      	sub	sp, #16
    1dc4:	af00      	add	r7, sp, #0
    1dc6:	0002      	movs	r2, r0
    1dc8:	1dfb      	adds	r3, r7, #7
    1dca:	701a      	strb	r2, [r3, #0]
    1dcc:	1dbb      	adds	r3, r7, #6
    1dce:	1c0a      	adds	r2, r1, #0
    1dd0:	701a      	strb	r2, [r3, #0]
	
	uint8_t value = (pd == Output ? 1 : 0);
    1dd2:	1dbb      	adds	r3, r7, #6
    1dd4:	781b      	ldrb	r3, [r3, #0]
    1dd6:	3b01      	subs	r3, #1
    1dd8:	425a      	negs	r2, r3
    1dda:	4153      	adcs	r3, r2
    1ddc:	b2da      	uxtb	r2, r3
    1dde:	230f      	movs	r3, #15
    1de0:	18fb      	adds	r3, r7, r3
    1de2:	701a      	strb	r2, [r3, #0]
	
	if(pn >= 1 && pn <= PIN_COUNT)
    1de4:	1dfb      	adds	r3, r7, #7
    1de6:	781b      	ldrb	r3, [r3, #0]
    1de8:	b25b      	sxtb	r3, r3
    1dea:	2b00      	cmp	r3, #0
    1dec:	dd6f      	ble.n	1ece <morph_config_gpio_set_pin_direction+0x10e>
    1dee:	1dfb      	adds	r3, r7, #7
    1df0:	781b      	ldrb	r3, [r3, #0]
    1df2:	b25b      	sxtb	r3, r3
    1df4:	2b40      	cmp	r3, #64	; 0x40
    1df6:	dc6a      	bgt.n	1ece <morph_config_gpio_set_pin_direction+0x10e>
	{
		
		int8_t pin_group = pin_defs[pn - 1].pinGroup;
    1df8:	1dfb      	adds	r3, r7, #7
    1dfa:	781b      	ldrb	r3, [r3, #0]
    1dfc:	b25b      	sxtb	r3, r3
    1dfe:	1e5a      	subs	r2, r3, #1
    1e00:	230e      	movs	r3, #14
    1e02:	18f9      	adds	r1, r7, r3
    1e04:	4834      	ldr	r0, [pc, #208]	; (1ed8 <morph_config_gpio_set_pin_direction+0x118>)
    1e06:	0013      	movs	r3, r2
    1e08:	005b      	lsls	r3, r3, #1
    1e0a:	189b      	adds	r3, r3, r2
    1e0c:	005b      	lsls	r3, r3, #1
    1e0e:	5c1b      	ldrb	r3, [r3, r0]
    1e10:	700b      	strb	r3, [r1, #0]
		int8_t pin_num = pin_defs[pn - 1].pinNumInGroup;
    1e12:	1dfb      	adds	r3, r7, #7
    1e14:	781b      	ldrb	r3, [r3, #0]
    1e16:	b25b      	sxtb	r3, r3
    1e18:	1e5a      	subs	r2, r3, #1
    1e1a:	230d      	movs	r3, #13
    1e1c:	18f9      	adds	r1, r7, r3
    1e1e:	482e      	ldr	r0, [pc, #184]	; (1ed8 <morph_config_gpio_set_pin_direction+0x118>)
    1e20:	0013      	movs	r3, r2
    1e22:	005b      	lsls	r3, r3, #1
    1e24:	189b      	adds	r3, r3, r2
    1e26:	005b      	lsls	r3, r3, #1
    1e28:	18c3      	adds	r3, r0, r3
    1e2a:	3301      	adds	r3, #1
    1e2c:	781b      	ldrb	r3, [r3, #0]
    1e2e:	700b      	strb	r3, [r1, #0]
		
		if(pin_group >= 0)
    1e30:	230e      	movs	r3, #14
    1e32:	18fb      	adds	r3, r7, r3
    1e34:	781b      	ldrb	r3, [r3, #0]
    1e36:	2b7f      	cmp	r3, #127	; 0x7f
    1e38:	d849      	bhi.n	1ece <morph_config_gpio_set_pin_direction+0x10e>
		{
			
			if(value == 1)
    1e3a:	230f      	movs	r3, #15
    1e3c:	18fb      	adds	r3, r7, r3
    1e3e:	781b      	ldrb	r3, [r3, #0]
    1e40:	2b01      	cmp	r3, #1
    1e42:	d122      	bne.n	1e8a <morph_config_gpio_set_pin_direction+0xca>
			{
				PORT->Group[pin_group].DIRSET.reg = (1ul << pin_num);
    1e44:	4925      	ldr	r1, [pc, #148]	; (1edc <morph_config_gpio_set_pin_direction+0x11c>)
    1e46:	230e      	movs	r3, #14
    1e48:	18fb      	adds	r3, r7, r3
    1e4a:	781b      	ldrb	r3, [r3, #0]
    1e4c:	b25b      	sxtb	r3, r3
    1e4e:	220d      	movs	r2, #13
    1e50:	18ba      	adds	r2, r7, r2
    1e52:	7812      	ldrb	r2, [r2, #0]
    1e54:	b252      	sxtb	r2, r2
    1e56:	2001      	movs	r0, #1
    1e58:	4090      	lsls	r0, r2
    1e5a:	0002      	movs	r2, r0
    1e5c:	01db      	lsls	r3, r3, #7
    1e5e:	18cb      	adds	r3, r1, r3
    1e60:	3308      	adds	r3, #8
    1e62:	601a      	str	r2, [r3, #0]
				
				// We probably won't need input enabled at this time.
				// Disable it.
				// Input reading ensures it is on if that is ever called.
				PORT->Group[pin_group].PINCFG[pin_num].bit.INEN = 0;
    1e64:	481d      	ldr	r0, [pc, #116]	; (1edc <morph_config_gpio_set_pin_direction+0x11c>)
    1e66:	230e      	movs	r3, #14
    1e68:	18fb      	adds	r3, r7, r3
    1e6a:	2200      	movs	r2, #0
    1e6c:	569a      	ldrsb	r2, [r3, r2]
    1e6e:	230d      	movs	r3, #13
    1e70:	18fb      	adds	r3, r7, r3
    1e72:	781b      	ldrb	r3, [r3, #0]
    1e74:	b25b      	sxtb	r3, r3
    1e76:	2140      	movs	r1, #64	; 0x40
    1e78:	01d2      	lsls	r2, r2, #7
    1e7a:	1882      	adds	r2, r0, r2
    1e7c:	18d3      	adds	r3, r2, r3
    1e7e:	185a      	adds	r2, r3, r1
    1e80:	7813      	ldrb	r3, [r2, #0]
    1e82:	2102      	movs	r1, #2
    1e84:	438b      	bics	r3, r1
    1e86:	7013      	strb	r3, [r2, #0]
			
		}
		
	}

}
    1e88:	e021      	b.n	1ece <morph_config_gpio_set_pin_direction+0x10e>
				PORT->Group[pin_group].DIRCLR.reg = (1ul << pin_num);
    1e8a:	4914      	ldr	r1, [pc, #80]	; (1edc <morph_config_gpio_set_pin_direction+0x11c>)
    1e8c:	230e      	movs	r3, #14
    1e8e:	18fb      	adds	r3, r7, r3
    1e90:	781b      	ldrb	r3, [r3, #0]
    1e92:	b25b      	sxtb	r3, r3
    1e94:	220d      	movs	r2, #13
    1e96:	18ba      	adds	r2, r7, r2
    1e98:	7812      	ldrb	r2, [r2, #0]
    1e9a:	b252      	sxtb	r2, r2
    1e9c:	2001      	movs	r0, #1
    1e9e:	4090      	lsls	r0, r2
    1ea0:	0002      	movs	r2, r0
    1ea2:	01db      	lsls	r3, r3, #7
    1ea4:	18cb      	adds	r3, r1, r3
    1ea6:	3304      	adds	r3, #4
    1ea8:	601a      	str	r2, [r3, #0]
				PORT->Group[pin_group].PINCFG[pin_num].bit.INEN = 1;
    1eaa:	480c      	ldr	r0, [pc, #48]	; (1edc <morph_config_gpio_set_pin_direction+0x11c>)
    1eac:	230e      	movs	r3, #14
    1eae:	18fb      	adds	r3, r7, r3
    1eb0:	2200      	movs	r2, #0
    1eb2:	569a      	ldrsb	r2, [r3, r2]
    1eb4:	230d      	movs	r3, #13
    1eb6:	18fb      	adds	r3, r7, r3
    1eb8:	781b      	ldrb	r3, [r3, #0]
    1eba:	b25b      	sxtb	r3, r3
    1ebc:	2140      	movs	r1, #64	; 0x40
    1ebe:	01d2      	lsls	r2, r2, #7
    1ec0:	1882      	adds	r2, r0, r2
    1ec2:	18d3      	adds	r3, r2, r3
    1ec4:	185a      	adds	r2, r3, r1
    1ec6:	7813      	ldrb	r3, [r2, #0]
    1ec8:	2102      	movs	r1, #2
    1eca:	430b      	orrs	r3, r1
    1ecc:	7013      	strb	r3, [r2, #0]
}
    1ece:	46c0      	nop			; (mov r8, r8)
    1ed0:	46bd      	mov	sp, r7
    1ed2:	b004      	add	sp, #16
    1ed4:	bd80      	pop	{r7, pc}
    1ed6:	46c0      	nop			; (mov r8, r8)
    1ed8:	2000089c 	.word	0x2000089c
    1edc:	41004400 	.word	0x41004400

00001ee0 <morph_config_gpio_get_pin_direction>:

enum MorphPinDirection morph_config_gpio_get_pin_direction(MorphPinNumber pn)
{
    1ee0:	b580      	push	{r7, lr}
    1ee2:	b084      	sub	sp, #16
    1ee4:	af00      	add	r7, sp, #0
    1ee6:	0002      	movs	r2, r0
    1ee8:	1dfb      	adds	r3, r7, #7
    1eea:	701a      	strb	r2, [r3, #0]

	if(pn >= 1 && pn <= PIN_COUNT)
    1eec:	1dfb      	adds	r3, r7, #7
    1eee:	781b      	ldrb	r3, [r3, #0]
    1ef0:	b25b      	sxtb	r3, r3
    1ef2:	2b00      	cmp	r3, #0
    1ef4:	dd2e      	ble.n	1f54 <morph_config_gpio_get_pin_direction+0x74>
    1ef6:	1dfb      	adds	r3, r7, #7
    1ef8:	781b      	ldrb	r3, [r3, #0]
    1efa:	b25b      	sxtb	r3, r3
    1efc:	2b40      	cmp	r3, #64	; 0x40
    1efe:	dc29      	bgt.n	1f54 <morph_config_gpio_get_pin_direction+0x74>
	{
		
		int8_t pin_group = pin_defs[pn - 1].pinGroup;
    1f00:	1dfb      	adds	r3, r7, #7
    1f02:	781b      	ldrb	r3, [r3, #0]
    1f04:	b25b      	sxtb	r3, r3
    1f06:	1e5a      	subs	r2, r3, #1
    1f08:	230f      	movs	r3, #15
    1f0a:	18f9      	adds	r1, r7, r3
    1f0c:	4814      	ldr	r0, [pc, #80]	; (1f60 <morph_config_gpio_get_pin_direction+0x80>)
    1f0e:	0013      	movs	r3, r2
    1f10:	005b      	lsls	r3, r3, #1
    1f12:	189b      	adds	r3, r3, r2
    1f14:	005b      	lsls	r3, r3, #1
    1f16:	5c1b      	ldrb	r3, [r3, r0]
    1f18:	700b      	strb	r3, [r1, #0]
		int8_t pin_num = pin_defs[pn - 1].pinNumInGroup;
    1f1a:	1dfb      	adds	r3, r7, #7
    1f1c:	781b      	ldrb	r3, [r3, #0]
    1f1e:	b25b      	sxtb	r3, r3
    1f20:	1e5a      	subs	r2, r3, #1
    1f22:	230e      	movs	r3, #14
    1f24:	18f9      	adds	r1, r7, r3
    1f26:	480e      	ldr	r0, [pc, #56]	; (1f60 <morph_config_gpio_get_pin_direction+0x80>)
    1f28:	0013      	movs	r3, r2
    1f2a:	005b      	lsls	r3, r3, #1
    1f2c:	189b      	adds	r3, r3, r2
    1f2e:	005b      	lsls	r3, r3, #1
    1f30:	18c3      	adds	r3, r0, r3
    1f32:	3301      	adds	r3, #1
    1f34:	781b      	ldrb	r3, [r3, #0]
    1f36:	700b      	strb	r3, [r1, #0]
		
		if(pin_group >= 0)
    1f38:	230f      	movs	r3, #15
    1f3a:	18fb      	adds	r3, r7, r3
    1f3c:	781b      	ldrb	r3, [r3, #0]
    1f3e:	2b7f      	cmp	r3, #127	; 0x7f
    1f40:	d808      	bhi.n	1f54 <morph_config_gpio_get_pin_direction+0x74>
		{
			
			return PORT->Group[pin_group].DIR.reg >> pin_num & 0x1 == 0 ? Input : Output;
    1f42:	4a08      	ldr	r2, [pc, #32]	; (1f64 <morph_config_gpio_get_pin_direction+0x84>)
    1f44:	230f      	movs	r3, #15
    1f46:	18fb      	adds	r3, r7, r3
    1f48:	781b      	ldrb	r3, [r3, #0]
    1f4a:	b25b      	sxtb	r3, r3
    1f4c:	01db      	lsls	r3, r3, #7
    1f4e:	589b      	ldr	r3, [r3, r2]
    1f50:	2301      	movs	r3, #1
    1f52:	e000      	b.n	1f56 <morph_config_gpio_get_pin_direction+0x76>
			
		}
		
	}
	
	return Input;
    1f54:	2300      	movs	r3, #0
	
}
    1f56:	0018      	movs	r0, r3
    1f58:	46bd      	mov	sp, r7
    1f5a:	b004      	add	sp, #16
    1f5c:	bd80      	pop	{r7, pc}
    1f5e:	46c0      	nop			; (mov r8, r8)
    1f60:	2000089c 	.word	0x2000089c
    1f64:	41004400 	.word	0x41004400

00001f68 <morph_config_gpio_set_pin_pull_state>:

void morph_config_gpio_set_pin_pull_state(MorphPinNumber pn, enum MorphPinPullState ps)
{
    1f68:	b580      	push	{r7, lr}
    1f6a:	b084      	sub	sp, #16
    1f6c:	af00      	add	r7, sp, #0
    1f6e:	0002      	movs	r2, r0
    1f70:	1dfb      	adds	r3, r7, #7
    1f72:	701a      	strb	r2, [r3, #0]
    1f74:	1dbb      	adds	r3, r7, #6
    1f76:	1c0a      	adds	r2, r1, #0
    1f78:	701a      	strb	r2, [r3, #0]
	
	if(pn >= 1 && pn <= PIN_COUNT)
    1f7a:	1dfb      	adds	r3, r7, #7
    1f7c:	781b      	ldrb	r3, [r3, #0]
    1f7e:	b25b      	sxtb	r3, r3
    1f80:	2b00      	cmp	r3, #0
    1f82:	dc00      	bgt.n	1f86 <morph_config_gpio_set_pin_pull_state+0x1e>
    1f84:	e0a7      	b.n	20d6 <STACK_SIZE+0xd6>
    1f86:	1dfb      	adds	r3, r7, #7
    1f88:	781b      	ldrb	r3, [r3, #0]
    1f8a:	b25b      	sxtb	r3, r3
    1f8c:	2b40      	cmp	r3, #64	; 0x40
    1f8e:	dd00      	ble.n	1f92 <morph_config_gpio_set_pin_pull_state+0x2a>
    1f90:	e0a1      	b.n	20d6 <STACK_SIZE+0xd6>
	{
			
		int8_t pin_group = pin_defs[pn - 1].pinGroup;
    1f92:	1dfb      	adds	r3, r7, #7
    1f94:	781b      	ldrb	r3, [r3, #0]
    1f96:	b25b      	sxtb	r3, r3
    1f98:	1e5a      	subs	r2, r3, #1
    1f9a:	230f      	movs	r3, #15
    1f9c:	18f9      	adds	r1, r7, r3
    1f9e:	4850      	ldr	r0, [pc, #320]	; (20e0 <STACK_SIZE+0xe0>)
    1fa0:	0013      	movs	r3, r2
    1fa2:	005b      	lsls	r3, r3, #1
    1fa4:	189b      	adds	r3, r3, r2
    1fa6:	005b      	lsls	r3, r3, #1
    1fa8:	5c1b      	ldrb	r3, [r3, r0]
    1faa:	700b      	strb	r3, [r1, #0]
		int8_t pin_num = pin_defs[pn - 1].pinNumInGroup;
    1fac:	1dfb      	adds	r3, r7, #7
    1fae:	781b      	ldrb	r3, [r3, #0]
    1fb0:	b25b      	sxtb	r3, r3
    1fb2:	1e5a      	subs	r2, r3, #1
    1fb4:	230e      	movs	r3, #14
    1fb6:	18f9      	adds	r1, r7, r3
    1fb8:	4849      	ldr	r0, [pc, #292]	; (20e0 <STACK_SIZE+0xe0>)
    1fba:	0013      	movs	r3, r2
    1fbc:	005b      	lsls	r3, r3, #1
    1fbe:	189b      	adds	r3, r3, r2
    1fc0:	005b      	lsls	r3, r3, #1
    1fc2:	18c3      	adds	r3, r0, r3
    1fc4:	3301      	adds	r3, #1
    1fc6:	781b      	ldrb	r3, [r3, #0]
    1fc8:	700b      	strb	r3, [r1, #0]
			
		if(pin_group >= 0)
    1fca:	230f      	movs	r3, #15
    1fcc:	18fb      	adds	r3, r7, r3
    1fce:	781b      	ldrb	r3, [r3, #0]
    1fd0:	2b7f      	cmp	r3, #127	; 0x7f
    1fd2:	d900      	bls.n	1fd6 <morph_config_gpio_set_pin_pull_state+0x6e>
    1fd4:	e07f      	b.n	20d6 <STACK_SIZE+0xd6>
		{

			// These all need the input set
			// This will set the port for input.
			PORT->Group[pin_group].DIRCLR.reg = (1ul << pin_num);
    1fd6:	4943      	ldr	r1, [pc, #268]	; (20e4 <STACK_SIZE+0xe4>)
    1fd8:	230f      	movs	r3, #15
    1fda:	18fb      	adds	r3, r7, r3
    1fdc:	781b      	ldrb	r3, [r3, #0]
    1fde:	b25b      	sxtb	r3, r3
    1fe0:	220e      	movs	r2, #14
    1fe2:	18ba      	adds	r2, r7, r2
    1fe4:	7812      	ldrb	r2, [r2, #0]
    1fe6:	b252      	sxtb	r2, r2
    1fe8:	2001      	movs	r0, #1
    1fea:	4090      	lsls	r0, r2
    1fec:	0002      	movs	r2, r0
    1fee:	01db      	lsls	r3, r3, #7
    1ff0:	18cb      	adds	r3, r1, r3
    1ff2:	3304      	adds	r3, #4
    1ff4:	601a      	str	r2, [r3, #0]
				
			switch(ps)
    1ff6:	1dbb      	adds	r3, r7, #6
    1ff8:	781b      	ldrb	r3, [r3, #0]
    1ffa:	2b01      	cmp	r3, #1
    1ffc:	d002      	beq.n	2004 <STACK_SIZE+0x4>
    1ffe:	2b02      	cmp	r3, #2
    2000:	d023      	beq.n	204a <STACK_SIZE+0x4a>
    2002:	e045      	b.n	2090 <STACK_SIZE+0x90>
				case PullHigh:
				
					// Ensure the pullups are enabled.
					
					// First, set output to the correct value (1 in this case).
					PORT->Group[pin_group].OUTSET.reg = (1ul << pin_num);
    2004:	4937      	ldr	r1, [pc, #220]	; (20e4 <STACK_SIZE+0xe4>)
    2006:	230f      	movs	r3, #15
    2008:	18fb      	adds	r3, r7, r3
    200a:	781b      	ldrb	r3, [r3, #0]
    200c:	b25b      	sxtb	r3, r3
    200e:	220e      	movs	r2, #14
    2010:	18ba      	adds	r2, r7, r2
    2012:	7812      	ldrb	r2, [r2, #0]
    2014:	b252      	sxtb	r2, r2
    2016:	2001      	movs	r0, #1
    2018:	4090      	lsls	r0, r2
    201a:	0002      	movs	r2, r0
    201c:	01db      	lsls	r3, r3, #7
    201e:	18cb      	adds	r3, r1, r3
    2020:	3318      	adds	r3, #24
    2022:	601a      	str	r2, [r3, #0]

					// Next, pull enable!
					PORT->Group[pin_group].PINCFG[pin_num].bit.PULLEN = 1;
    2024:	482f      	ldr	r0, [pc, #188]	; (20e4 <STACK_SIZE+0xe4>)
    2026:	230f      	movs	r3, #15
    2028:	18fb      	adds	r3, r7, r3
    202a:	2200      	movs	r2, #0
    202c:	569a      	ldrsb	r2, [r3, r2]
    202e:	230e      	movs	r3, #14
    2030:	18fb      	adds	r3, r7, r3
    2032:	781b      	ldrb	r3, [r3, #0]
    2034:	b25b      	sxtb	r3, r3
    2036:	2140      	movs	r1, #64	; 0x40
    2038:	01d2      	lsls	r2, r2, #7
    203a:	1882      	adds	r2, r0, r2
    203c:	18d3      	adds	r3, r2, r3
    203e:	185a      	adds	r2, r3, r1
    2040:	7813      	ldrb	r3, [r2, #0]
    2042:	2104      	movs	r1, #4
    2044:	430b      	orrs	r3, r1
    2046:	7013      	strb	r3, [r2, #0]
				
					break;
    2048:	e045      	b.n	20d6 <STACK_SIZE+0xd6>
				case PullLow:

					// Ensure the pulldowns are enabled.

					// First, set output to the correct value (1 in this case).
					PORT->Group[pin_group].OUTCLR.reg = (1ul << pin_num);
    204a:	4926      	ldr	r1, [pc, #152]	; (20e4 <STACK_SIZE+0xe4>)
    204c:	230f      	movs	r3, #15
    204e:	18fb      	adds	r3, r7, r3
    2050:	781b      	ldrb	r3, [r3, #0]
    2052:	b25b      	sxtb	r3, r3
    2054:	220e      	movs	r2, #14
    2056:	18ba      	adds	r2, r7, r2
    2058:	7812      	ldrb	r2, [r2, #0]
    205a:	b252      	sxtb	r2, r2
    205c:	2001      	movs	r0, #1
    205e:	4090      	lsls	r0, r2
    2060:	0002      	movs	r2, r0
    2062:	01db      	lsls	r3, r3, #7
    2064:	18cb      	adds	r3, r1, r3
    2066:	3314      	adds	r3, #20
    2068:	601a      	str	r2, [r3, #0]

					// Next, pull enable!
					PORT->Group[pin_group].PINCFG[pin_num].bit.PULLEN = 1;
    206a:	481e      	ldr	r0, [pc, #120]	; (20e4 <STACK_SIZE+0xe4>)
    206c:	230f      	movs	r3, #15
    206e:	18fb      	adds	r3, r7, r3
    2070:	2200      	movs	r2, #0
    2072:	569a      	ldrsb	r2, [r3, r2]
    2074:	230e      	movs	r3, #14
    2076:	18fb      	adds	r3, r7, r3
    2078:	781b      	ldrb	r3, [r3, #0]
    207a:	b25b      	sxtb	r3, r3
    207c:	2140      	movs	r1, #64	; 0x40
    207e:	01d2      	lsls	r2, r2, #7
    2080:	1882      	adds	r2, r0, r2
    2082:	18d3      	adds	r3, r2, r3
    2084:	185a      	adds	r2, r3, r1
    2086:	7813      	ldrb	r3, [r2, #0]
    2088:	2104      	movs	r1, #4
    208a:	430b      	orrs	r3, r1
    208c:	7013      	strb	r3, [r2, #0]
									
					break;
    208e:	e022      	b.n	20d6 <STACK_SIZE+0xd6>
				
				case PullNone:
				default:
				
					//Disable pulling in either direction.
					PORT->Group[pin_group].PINCFG[pin_num].bit.PULLEN = 0;
    2090:	4814      	ldr	r0, [pc, #80]	; (20e4 <STACK_SIZE+0xe4>)
    2092:	230f      	movs	r3, #15
    2094:	18fb      	adds	r3, r7, r3
    2096:	2200      	movs	r2, #0
    2098:	569a      	ldrsb	r2, [r3, r2]
    209a:	230e      	movs	r3, #14
    209c:	18fb      	adds	r3, r7, r3
    209e:	781b      	ldrb	r3, [r3, #0]
    20a0:	b25b      	sxtb	r3, r3
    20a2:	2140      	movs	r1, #64	; 0x40
    20a4:	01d2      	lsls	r2, r2, #7
    20a6:	1882      	adds	r2, r0, r2
    20a8:	18d3      	adds	r3, r2, r3
    20aa:	185a      	adds	r2, r3, r1
    20ac:	7813      	ldrb	r3, [r2, #0]
    20ae:	2104      	movs	r1, #4
    20b0:	438b      	bics	r3, r1
    20b2:	7013      	strb	r3, [r2, #0]
					// Also clear output just in case.
					PORT->Group[pin_group].OUTCLR.reg = (1ul << pin_num);
    20b4:	490b      	ldr	r1, [pc, #44]	; (20e4 <STACK_SIZE+0xe4>)
    20b6:	230f      	movs	r3, #15
    20b8:	18fb      	adds	r3, r7, r3
    20ba:	781b      	ldrb	r3, [r3, #0]
    20bc:	b25b      	sxtb	r3, r3
    20be:	220e      	movs	r2, #14
    20c0:	18ba      	adds	r2, r7, r2
    20c2:	7812      	ldrb	r2, [r2, #0]
    20c4:	b252      	sxtb	r2, r2
    20c6:	2001      	movs	r0, #1
    20c8:	4090      	lsls	r0, r2
    20ca:	0002      	movs	r2, r0
    20cc:	01db      	lsls	r3, r3, #7
    20ce:	18cb      	adds	r3, r1, r3
    20d0:	3314      	adds	r3, #20
    20d2:	601a      	str	r2, [r3, #0]
	
		}
			
	}

}
    20d4:	e7ff      	b.n	20d6 <STACK_SIZE+0xd6>
    20d6:	46c0      	nop			; (mov r8, r8)
    20d8:	46bd      	mov	sp, r7
    20da:	b004      	add	sp, #16
    20dc:	bd80      	pop	{r7, pc}
    20de:	46c0      	nop			; (mov r8, r8)
    20e0:	2000089c 	.word	0x2000089c
    20e4:	41004400 	.word	0x41004400

000020e8 <morph_config_gpio_get_pin_pull_state>:

enum MorphPinPullState morph_config_gpio_get_pin_pull_state(MorphPinNumber pn)
{
    20e8:	b580      	push	{r7, lr}
    20ea:	b084      	sub	sp, #16
    20ec:	af00      	add	r7, sp, #0
    20ee:	0002      	movs	r2, r0
    20f0:	1dfb      	adds	r3, r7, #7
    20f2:	701a      	strb	r2, [r3, #0]
	
	if(pn >= 1 && pn <= PIN_COUNT)
    20f4:	1dfb      	adds	r3, r7, #7
    20f6:	781b      	ldrb	r3, [r3, #0]
    20f8:	b25b      	sxtb	r3, r3
    20fa:	2b00      	cmp	r3, #0
    20fc:	dd3b      	ble.n	2176 <morph_config_gpio_get_pin_pull_state+0x8e>
    20fe:	1dfb      	adds	r3, r7, #7
    2100:	781b      	ldrb	r3, [r3, #0]
    2102:	b25b      	sxtb	r3, r3
    2104:	2b40      	cmp	r3, #64	; 0x40
    2106:	dc36      	bgt.n	2176 <morph_config_gpio_get_pin_pull_state+0x8e>
	{
	
		int8_t pin_group = pin_defs[pn - 1].pinGroup;
    2108:	1dfb      	adds	r3, r7, #7
    210a:	781b      	ldrb	r3, [r3, #0]
    210c:	b25b      	sxtb	r3, r3
    210e:	1e5a      	subs	r2, r3, #1
    2110:	230f      	movs	r3, #15
    2112:	18f9      	adds	r1, r7, r3
    2114:	481a      	ldr	r0, [pc, #104]	; (2180 <morph_config_gpio_get_pin_pull_state+0x98>)
    2116:	0013      	movs	r3, r2
    2118:	005b      	lsls	r3, r3, #1
    211a:	189b      	adds	r3, r3, r2
    211c:	005b      	lsls	r3, r3, #1
    211e:	5c1b      	ldrb	r3, [r3, r0]
    2120:	700b      	strb	r3, [r1, #0]
		int8_t pin_num = pin_defs[pn - 1].pinNumInGroup;
    2122:	1dfb      	adds	r3, r7, #7
    2124:	781b      	ldrb	r3, [r3, #0]
    2126:	b25b      	sxtb	r3, r3
    2128:	1e5a      	subs	r2, r3, #1
    212a:	230e      	movs	r3, #14
    212c:	18f9      	adds	r1, r7, r3
    212e:	4814      	ldr	r0, [pc, #80]	; (2180 <morph_config_gpio_get_pin_pull_state+0x98>)
    2130:	0013      	movs	r3, r2
    2132:	005b      	lsls	r3, r3, #1
    2134:	189b      	adds	r3, r3, r2
    2136:	005b      	lsls	r3, r3, #1
    2138:	18c3      	adds	r3, r0, r3
    213a:	3301      	adds	r3, #1
    213c:	781b      	ldrb	r3, [r3, #0]
    213e:	700b      	strb	r3, [r1, #0]
	
		if(PORT->Group[pin_group].PINCFG[pin_num].bit.PULLEN == 1 && PORT->Group[pin_group].DIR.reg >> pin_num & 0x1 == 0)
    2140:	4810      	ldr	r0, [pc, #64]	; (2184 <morph_config_gpio_get_pin_pull_state+0x9c>)
    2142:	230f      	movs	r3, #15
    2144:	18fb      	adds	r3, r7, r3
    2146:	2200      	movs	r2, #0
    2148:	569a      	ldrsb	r2, [r3, r2]
    214a:	230e      	movs	r3, #14
    214c:	18fb      	adds	r3, r7, r3
    214e:	781b      	ldrb	r3, [r3, #0]
    2150:	b25b      	sxtb	r3, r3
    2152:	2140      	movs	r1, #64	; 0x40
    2154:	01d2      	lsls	r2, r2, #7
    2156:	1882      	adds	r2, r0, r2
    2158:	18d3      	adds	r3, r2, r3
    215a:	185b      	adds	r3, r3, r1
    215c:	781b      	ldrb	r3, [r3, #0]
    215e:	075b      	lsls	r3, r3, #29
    2160:	0fdb      	lsrs	r3, r3, #31
    2162:	b2db      	uxtb	r3, r3
    2164:	2b01      	cmp	r3, #1
    2166:	d106      	bne.n	2176 <morph_config_gpio_get_pin_pull_state+0x8e>
    2168:	4a06      	ldr	r2, [pc, #24]	; (2184 <morph_config_gpio_get_pin_pull_state+0x9c>)
    216a:	230f      	movs	r3, #15
    216c:	18fb      	adds	r3, r7, r3
    216e:	781b      	ldrb	r3, [r3, #0]
    2170:	b25b      	sxtb	r3, r3
    2172:	01db      	lsls	r3, r3, #7
    2174:	589b      	ldr	r3, [r3, r2]

			
		}
	}
	
	return PullNone;
    2176:	2300      	movs	r3, #0
	
}
    2178:	0018      	movs	r0, r3
    217a:	46bd      	mov	sp, r7
    217c:	b004      	add	sp, #16
    217e:	bd80      	pop	{r7, pc}
    2180:	2000089c 	.word	0x2000089c
    2184:	41004400 	.word	0x41004400

00002188 <set_mux_group_config>:

void set_mux_group_config(enum PMUXTypes t, uint8_t group, uint8_t pin)
{
    2188:	b590      	push	{r4, r7, lr}
    218a:	b083      	sub	sp, #12
    218c:	af00      	add	r7, sp, #0
    218e:	0004      	movs	r4, r0
    2190:	0008      	movs	r0, r1
    2192:	0011      	movs	r1, r2
    2194:	1dfb      	adds	r3, r7, #7
    2196:	1c22      	adds	r2, r4, #0
    2198:	701a      	strb	r2, [r3, #0]
    219a:	1dbb      	adds	r3, r7, #6
    219c:	1c02      	adds	r2, r0, #0
    219e:	701a      	strb	r2, [r3, #0]
    21a0:	1d7b      	adds	r3, r7, #5
    21a2:	1c0a      	adds	r2, r1, #0
    21a4:	701a      	strb	r2, [r3, #0]
	
	// Is this an even or odd pin?
	if(pin % 2 == 0)
    21a6:	1d7b      	adds	r3, r7, #5
    21a8:	781b      	ldrb	r3, [r3, #0]
    21aa:	2201      	movs	r2, #1
    21ac:	4013      	ands	r3, r2
    21ae:	b2db      	uxtb	r3, r3
    21b0:	2b00      	cmp	r3, #0
    21b2:	d11b      	bne.n	21ec <set_mux_group_config+0x64>
	{
		//It's an even pin.
		//Enable the PMUX 
		PORT->Group[group].PMUX[pin/2].bit.PMUXE = t;
    21b4:	481c      	ldr	r0, [pc, #112]	; (2228 <set_mux_group_config+0xa0>)
    21b6:	1dbb      	adds	r3, r7, #6
    21b8:	781b      	ldrb	r3, [r3, #0]
    21ba:	1d7a      	adds	r2, r7, #5
    21bc:	7812      	ldrb	r2, [r2, #0]
    21be:	0852      	lsrs	r2, r2, #1
    21c0:	b2d2      	uxtb	r2, r2
    21c2:	0014      	movs	r4, r2
    21c4:	1dfa      	adds	r2, r7, #7
    21c6:	7812      	ldrb	r2, [r2, #0]
    21c8:	210f      	movs	r1, #15
    21ca:	400a      	ands	r2, r1
    21cc:	b2d1      	uxtb	r1, r2
    21ce:	2230      	movs	r2, #48	; 0x30
    21d0:	01db      	lsls	r3, r3, #7
    21d2:	18c3      	adds	r3, r0, r3
    21d4:	191b      	adds	r3, r3, r4
    21d6:	189a      	adds	r2, r3, r2
    21d8:	7813      	ldrb	r3, [r2, #0]
    21da:	200f      	movs	r0, #15
    21dc:	4008      	ands	r0, r1
    21de:	210f      	movs	r1, #15
    21e0:	438b      	bics	r3, r1
    21e2:	1c19      	adds	r1, r3, #0
    21e4:	1c03      	adds	r3, r0, #0
    21e6:	430b      	orrs	r3, r1
    21e8:	7013      	strb	r3, [r2, #0]
		//Enable the PMUX.
		PORT->Group[group].PMUX[pin/2].bit.PMUXO = t;
	}	
	
	
}
    21ea:	e019      	b.n	2220 <set_mux_group_config+0x98>
		PORT->Group[group].PMUX[pin/2].bit.PMUXO = t;
    21ec:	480e      	ldr	r0, [pc, #56]	; (2228 <set_mux_group_config+0xa0>)
    21ee:	1dbb      	adds	r3, r7, #6
    21f0:	781b      	ldrb	r3, [r3, #0]
    21f2:	1d7a      	adds	r2, r7, #5
    21f4:	7812      	ldrb	r2, [r2, #0]
    21f6:	0852      	lsrs	r2, r2, #1
    21f8:	b2d2      	uxtb	r2, r2
    21fa:	0014      	movs	r4, r2
    21fc:	1dfa      	adds	r2, r7, #7
    21fe:	7812      	ldrb	r2, [r2, #0]
    2200:	210f      	movs	r1, #15
    2202:	400a      	ands	r2, r1
    2204:	b2d1      	uxtb	r1, r2
    2206:	2230      	movs	r2, #48	; 0x30
    2208:	01db      	lsls	r3, r3, #7
    220a:	18c3      	adds	r3, r0, r3
    220c:	191b      	adds	r3, r3, r4
    220e:	189a      	adds	r2, r3, r2
    2210:	7813      	ldrb	r3, [r2, #0]
    2212:	0108      	lsls	r0, r1, #4
    2214:	210f      	movs	r1, #15
    2216:	400b      	ands	r3, r1
    2218:	1c19      	adds	r1, r3, #0
    221a:	1c03      	adds	r3, r0, #0
    221c:	430b      	orrs	r3, r1
    221e:	7013      	strb	r3, [r2, #0]
}
    2220:	46c0      	nop			; (mov r8, r8)
    2222:	46bd      	mov	sp, r7
    2224:	b003      	add	sp, #12
    2226:	bd90      	pop	{r4, r7, pc}
    2228:	41004400 	.word	0x41004400

0000222c <get_sercom_channel_ptr>:

Sercom * get_sercom_channel_ptr(uint8_t c)
{
    222c:	b580      	push	{r7, lr}
    222e:	b082      	sub	sp, #8
    2230:	af00      	add	r7, sp, #0
    2232:	0002      	movs	r2, r0
    2234:	1dfb      	adds	r3, r7, #7
    2236:	701a      	strb	r2, [r3, #0]
	
	switch(c)
    2238:	1dfb      	adds	r3, r7, #7
    223a:	781b      	ldrb	r3, [r3, #0]
    223c:	2b05      	cmp	r3, #5
    223e:	d810      	bhi.n	2262 <get_sercom_channel_ptr+0x36>
    2240:	009a      	lsls	r2, r3, #2
    2242:	4b0a      	ldr	r3, [pc, #40]	; (226c <get_sercom_channel_ptr+0x40>)
    2244:	18d3      	adds	r3, r2, r3
    2246:	681b      	ldr	r3, [r3, #0]
    2248:	469f      	mov	pc, r3
	{
		case 0:
			return SERCOM0;
    224a:	4b09      	ldr	r3, [pc, #36]	; (2270 <get_sercom_channel_ptr+0x44>)
    224c:	e00a      	b.n	2264 <get_sercom_channel_ptr+0x38>
		case 1:
			return SERCOM1;
    224e:	4b09      	ldr	r3, [pc, #36]	; (2274 <get_sercom_channel_ptr+0x48>)
    2250:	e008      	b.n	2264 <get_sercom_channel_ptr+0x38>
		case 2:
			return SERCOM2;
    2252:	4b09      	ldr	r3, [pc, #36]	; (2278 <get_sercom_channel_ptr+0x4c>)
    2254:	e006      	b.n	2264 <get_sercom_channel_ptr+0x38>
		case 3:
			return SERCOM3;
    2256:	4b09      	ldr	r3, [pc, #36]	; (227c <get_sercom_channel_ptr+0x50>)
    2258:	e004      	b.n	2264 <get_sercom_channel_ptr+0x38>
		case 4:
			return SERCOM4;
    225a:	4b09      	ldr	r3, [pc, #36]	; (2280 <get_sercom_channel_ptr+0x54>)
    225c:	e002      	b.n	2264 <get_sercom_channel_ptr+0x38>
		case 5:
			return SERCOM5;
    225e:	4b09      	ldr	r3, [pc, #36]	; (2284 <get_sercom_channel_ptr+0x58>)
    2260:	e000      	b.n	2264 <get_sercom_channel_ptr+0x38>
		default:
			return SERCOM0;
    2262:	4b03      	ldr	r3, [pc, #12]	; (2270 <get_sercom_channel_ptr+0x44>)
	}
	
}
    2264:	0018      	movs	r0, r3
    2266:	46bd      	mov	sp, r7
    2268:	b002      	add	sp, #8
    226a:	bd80      	pop	{r7, pc}
    226c:	00004b90 	.word	0x00004b90
    2270:	42000800 	.word	0x42000800
    2274:	42000c00 	.word	0x42000c00
    2278:	42001000 	.word	0x42001000
    227c:	42001400 	.word	0x42001400
    2280:	42001800 	.word	0x42001800
    2284:	42001c00 	.word	0x42001c00

00002288 <initClockNVIC>:
};

#define MAX_SERIAL_BUFFER 250

void initClockNVIC( int8_t sercom_channel )
{
    2288:	b580      	push	{r7, lr}
    228a:	b084      	sub	sp, #16
    228c:	af00      	add	r7, sp, #0
    228e:	0002      	movs	r2, r0
    2290:	1dfb      	adds	r3, r7, #7
    2292:	701a      	strb	r2, [r3, #0]
	uint8_t clockId = 0;
    2294:	230f      	movs	r3, #15
    2296:	18fb      	adds	r3, r7, r3
    2298:	2200      	movs	r2, #0
    229a:	701a      	strb	r2, [r3, #0]
	IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later
    229c:	230e      	movs	r3, #14
    229e:	18fb      	adds	r3, r7, r3
    22a0:	22fe      	movs	r2, #254	; 0xfe
    22a2:	701a      	strb	r2, [r3, #0]

	Sercom * sercom = get_sercom_channel_ptr(sercom_channel);
    22a4:	1dfb      	adds	r3, r7, #7
    22a6:	781b      	ldrb	r3, [r3, #0]
    22a8:	0018      	movs	r0, r3
    22aa:	4b3f      	ldr	r3, [pc, #252]	; (23a8 <initClockNVIC+0x120>)
    22ac:	4798      	blx	r3
    22ae:	0003      	movs	r3, r0
    22b0:	60bb      	str	r3, [r7, #8]

	if(sercom == SERCOM0)
    22b2:	68bb      	ldr	r3, [r7, #8]
    22b4:	4a3d      	ldr	r2, [pc, #244]	; (23ac <initClockNVIC+0x124>)
    22b6:	4293      	cmp	r3, r2
    22b8:	d108      	bne.n	22cc <initClockNVIC+0x44>
	{
		clockId = 0x14U;
    22ba:	230f      	movs	r3, #15
    22bc:	18fb      	adds	r3, r7, r3
    22be:	2214      	movs	r2, #20
    22c0:	701a      	strb	r2, [r3, #0]
		IdNvic = SERCOM0_IRQn;
    22c2:	230e      	movs	r3, #14
    22c4:	18fb      	adds	r3, r7, r3
    22c6:	2209      	movs	r2, #9
    22c8:	701a      	strb	r2, [r3, #0]
    22ca:	e03f      	b.n	234c <initClockNVIC+0xc4>
	}
	else if(sercom == SERCOM1)
    22cc:	68bb      	ldr	r3, [r7, #8]
    22ce:	4a38      	ldr	r2, [pc, #224]	; (23b0 <initClockNVIC+0x128>)
    22d0:	4293      	cmp	r3, r2
    22d2:	d108      	bne.n	22e6 <initClockNVIC+0x5e>
	{
		clockId = 0x15U;
    22d4:	230f      	movs	r3, #15
    22d6:	18fb      	adds	r3, r7, r3
    22d8:	2215      	movs	r2, #21
    22da:	701a      	strb	r2, [r3, #0]
		IdNvic = SERCOM1_IRQn;
    22dc:	230e      	movs	r3, #14
    22de:	18fb      	adds	r3, r7, r3
    22e0:	220a      	movs	r2, #10
    22e2:	701a      	strb	r2, [r3, #0]
    22e4:	e032      	b.n	234c <initClockNVIC+0xc4>
	}
	else if(sercom == SERCOM2)
    22e6:	68bb      	ldr	r3, [r7, #8]
    22e8:	4a32      	ldr	r2, [pc, #200]	; (23b4 <initClockNVIC+0x12c>)
    22ea:	4293      	cmp	r3, r2
    22ec:	d108      	bne.n	2300 <initClockNVIC+0x78>
	{
		clockId = 0x16U;
    22ee:	230f      	movs	r3, #15
    22f0:	18fb      	adds	r3, r7, r3
    22f2:	2216      	movs	r2, #22
    22f4:	701a      	strb	r2, [r3, #0]
		IdNvic = SERCOM2_IRQn;
    22f6:	230e      	movs	r3, #14
    22f8:	18fb      	adds	r3, r7, r3
    22fa:	220b      	movs	r2, #11
    22fc:	701a      	strb	r2, [r3, #0]
    22fe:	e025      	b.n	234c <initClockNVIC+0xc4>
	}
	else if(sercom == SERCOM3)
    2300:	68bb      	ldr	r3, [r7, #8]
    2302:	4a2d      	ldr	r2, [pc, #180]	; (23b8 <initClockNVIC+0x130>)
    2304:	4293      	cmp	r3, r2
    2306:	d108      	bne.n	231a <initClockNVIC+0x92>
	{
		clockId = 0x17U;
    2308:	230f      	movs	r3, #15
    230a:	18fb      	adds	r3, r7, r3
    230c:	2217      	movs	r2, #23
    230e:	701a      	strb	r2, [r3, #0]
		IdNvic = SERCOM3_IRQn;
    2310:	230e      	movs	r3, #14
    2312:	18fb      	adds	r3, r7, r3
    2314:	220c      	movs	r2, #12
    2316:	701a      	strb	r2, [r3, #0]
    2318:	e018      	b.n	234c <initClockNVIC+0xc4>
	}
	#if defined(SERCOM4)
	else if(sercom == SERCOM4)
    231a:	68bb      	ldr	r3, [r7, #8]
    231c:	4a27      	ldr	r2, [pc, #156]	; (23bc <initClockNVIC+0x134>)
    231e:	4293      	cmp	r3, r2
    2320:	d108      	bne.n	2334 <initClockNVIC+0xac>
	{
		clockId = 0x18U;
    2322:	230f      	movs	r3, #15
    2324:	18fb      	adds	r3, r7, r3
    2326:	2218      	movs	r2, #24
    2328:	701a      	strb	r2, [r3, #0]
		IdNvic = SERCOM4_IRQn;
    232a:	230e      	movs	r3, #14
    232c:	18fb      	adds	r3, r7, r3
    232e:	220d      	movs	r2, #13
    2330:	701a      	strb	r2, [r3, #0]
    2332:	e00b      	b.n	234c <initClockNVIC+0xc4>
	}
	#endif // SERCOM4
	#if defined(SERCOM5)
	else if(sercom == SERCOM5)
    2334:	68bb      	ldr	r3, [r7, #8]
    2336:	4a22      	ldr	r2, [pc, #136]	; (23c0 <initClockNVIC+0x138>)
    2338:	4293      	cmp	r3, r2
    233a:	d107      	bne.n	234c <initClockNVIC+0xc4>
	{
		clockId = 0x19U;
    233c:	230f      	movs	r3, #15
    233e:	18fb      	adds	r3, r7, r3
    2340:	2219      	movs	r2, #25
    2342:	701a      	strb	r2, [r3, #0]
		IdNvic = SERCOM5_IRQn;
    2344:	230e      	movs	r3, #14
    2346:	18fb      	adds	r3, r7, r3
    2348:	220e      	movs	r2, #14
    234a:	701a      	strb	r2, [r3, #0]
	}
	#endif // SERCOM5

	if ( IdNvic == PendSV_IRQn )
    234c:	230e      	movs	r3, #14
    234e:	18fb      	adds	r3, r7, r3
    2350:	781b      	ldrb	r3, [r3, #0]
    2352:	b25b      	sxtb	r3, r3
    2354:	3302      	adds	r3, #2
    2356:	d023      	beq.n	23a0 <initClockNVIC+0x118>
		// We got a problem here
		return ;
	}

	// Setting NVIC
	NVIC_EnableIRQ(IdNvic);
    2358:	230e      	movs	r3, #14
    235a:	18fb      	adds	r3, r7, r3
    235c:	781b      	ldrb	r3, [r3, #0]
    235e:	b25b      	sxtb	r3, r3
    2360:	0018      	movs	r0, r3
    2362:	4b18      	ldr	r3, [pc, #96]	; (23c4 <initClockNVIC+0x13c>)
    2364:	4798      	blx	r3
	NVIC_SetPriority (IdNvic, ((1<<__NVIC_PRIO_BITS) - 1));  /* set Priority */
    2366:	230e      	movs	r3, #14
    2368:	18fb      	adds	r3, r7, r3
    236a:	781b      	ldrb	r3, [r3, #0]
    236c:	b25b      	sxtb	r3, r3
    236e:	2103      	movs	r1, #3
    2370:	0018      	movs	r0, r3
    2372:	4b15      	ldr	r3, [pc, #84]	; (23c8 <initClockNVIC+0x140>)
    2374:	4798      	blx	r3

	//Setting clock
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    2376:	4915      	ldr	r1, [pc, #84]	; (23cc <initClockNVIC+0x144>)
    2378:	230f      	movs	r3, #15
    237a:	18fb      	adds	r3, r7, r3
    237c:	781b      	ldrb	r3, [r3, #0]
    237e:	b29b      	uxth	r3, r3
    2380:	223f      	movs	r2, #63	; 0x3f
    2382:	4013      	ands	r3, r2
    2384:	b29b      	uxth	r3, r3
	GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    2386:	2280      	movs	r2, #128	; 0x80
    2388:	01d2      	lsls	r2, r2, #7
    238a:	4313      	orrs	r3, r2
    238c:	b29b      	uxth	r3, r3
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    238e:	804b      	strh	r3, [r1, #2]
	GCLK_CLKCTRL_CLKEN ;

	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    2390:	46c0      	nop			; (mov r8, r8)
    2392:	4b0e      	ldr	r3, [pc, #56]	; (23cc <initClockNVIC+0x144>)
    2394:	785b      	ldrb	r3, [r3, #1]
    2396:	b2db      	uxtb	r3, r3
    2398:	b25b      	sxtb	r3, r3
    239a:	2b00      	cmp	r3, #0
    239c:	dbf9      	blt.n	2392 <initClockNVIC+0x10a>
    239e:	e000      	b.n	23a2 <initClockNVIC+0x11a>
		return ;
    23a0:	46c0      	nop			; (mov r8, r8)
	{
		/* Wait for synchronization */
	}
}
    23a2:	46bd      	mov	sp, r7
    23a4:	b004      	add	sp, #16
    23a6:	bd80      	pop	{r7, pc}
    23a8:	0000222d 	.word	0x0000222d
    23ac:	42000800 	.word	0x42000800
    23b0:	42000c00 	.word	0x42000c00
    23b4:	42001000 	.word	0x42001000
    23b8:	42001400 	.word	0x42001400
    23bc:	42001800 	.word	0x42001800
    23c0:	42001c00 	.word	0x42001c00
    23c4:	00001b21 	.word	0x00001b21
    23c8:	00001b55 	.word	0x00001b55
    23cc:	40000c00 	.word	0x40000c00

000023d0 <morph_config_uart_setup_channel>:


void morph_config_uart_setup_channel(MorphUARTChannel c, MorphUARTBaudRate br, MorphUARTByteSize bs, enum MorphUARTParity pc, MorphUARTStopBits sb)
{
    23d0:	b590      	push	{r4, r7, lr}
    23d2:	b087      	sub	sp, #28
    23d4:	af00      	add	r7, sp, #0
    23d6:	0004      	movs	r4, r0
    23d8:	6039      	str	r1, [r7, #0]
    23da:	0010      	movs	r0, r2
    23dc:	0019      	movs	r1, r3
    23de:	1dfb      	adds	r3, r7, #7
    23e0:	1c22      	adds	r2, r4, #0
    23e2:	701a      	strb	r2, [r3, #0]
    23e4:	1dbb      	adds	r3, r7, #6
    23e6:	1c02      	adds	r2, r0, #0
    23e8:	701a      	strb	r2, [r3, #0]
    23ea:	1d7b      	adds	r3, r7, #5
    23ec:	1c0a      	adds	r2, r1, #0
    23ee:	701a      	strb	r2, [r3, #0]

	if(c < 0 || c > 5)
    23f0:	1dfb      	adds	r3, r7, #7
    23f2:	781b      	ldrb	r3, [r3, #0]
    23f4:	2b05      	cmp	r3, #5
    23f6:	d900      	bls.n	23fa <morph_config_uart_setup_channel+0x2a>
    23f8:	e119      	b.n	262e <morph_config_uart_setup_channel+0x25e>
		return; //Begone!
	
	initClockNVIC(c);
    23fa:	1dfb      	adds	r3, r7, #7
    23fc:	781b      	ldrb	r3, [r3, #0]
    23fe:	b25b      	sxtb	r3, r3
    2400:	0018      	movs	r0, r3
    2402:	4b8d      	ldr	r3, [pc, #564]	; (2638 <morph_config_uart_setup_channel+0x268>)
    2404:	4798      	blx	r3
	
	// The "Channel" in this case will refer to a SERCOM channel.
	Sercom * sercom_ptr = get_sercom_channel_ptr(c);
    2406:	1dfb      	adds	r3, r7, #7
    2408:	781b      	ldrb	r3, [r3, #0]
    240a:	0018      	movs	r0, r3
    240c:	4b8b      	ldr	r3, [pc, #556]	; (263c <morph_config_uart_setup_channel+0x26c>)
    240e:	4798      	blx	r3
    2410:	0003      	movs	r3, r0
    2412:	617b      	str	r3, [r7, #20]
	
	
	// Start the Software Reset
	sercom_ptr->USART.CTRLA.bit.SWRST = 1 ;
    2414:	697b      	ldr	r3, [r7, #20]
    2416:	681a      	ldr	r2, [r3, #0]
    2418:	2101      	movs	r1, #1
    241a:	430a      	orrs	r2, r1
    241c:	601a      	str	r2, [r3, #0]

	while ( sercom_ptr->USART.CTRLA.bit.SWRST || sercom_ptr->USART.SYNCBUSY.bit.SWRST )
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	697b      	ldr	r3, [r7, #20]
    2422:	681b      	ldr	r3, [r3, #0]
    2424:	07db      	lsls	r3, r3, #31
    2426:	0fdb      	lsrs	r3, r3, #31
    2428:	b2db      	uxtb	r3, r3
    242a:	2b00      	cmp	r3, #0
    242c:	d1f8      	bne.n	2420 <morph_config_uart_setup_channel+0x50>
    242e:	697b      	ldr	r3, [r7, #20]
    2430:	69db      	ldr	r3, [r3, #28]
    2432:	07db      	lsls	r3, r3, #31
    2434:	0fdb      	lsrs	r3, r3, #31
    2436:	b2db      	uxtb	r3, r3
    2438:	2b00      	cmp	r3, #0
    243a:	d1f1      	bne.n	2420 <morph_config_uart_setup_channel+0x50>
	{
		// Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
	}
	
	// We are doing 16x oversampling
	uint8_t sample_rate = 16;
    243c:	2313      	movs	r3, #19
    243e:	18fb      	adds	r3, r7, r3
    2440:	2210      	movs	r2, #16
    2442:	701a      	strb	r2, [r3, #0]
	
	// First, setup the muxing on the pins.
	uint8_t def_rx_pin = uart_default_defs[c].rx_pin_num;
    2444:	1dfb      	adds	r3, r7, #7
    2446:	781b      	ldrb	r3, [r3, #0]
    2448:	4a7d      	ldr	r2, [pc, #500]	; (2640 <morph_config_uart_setup_channel+0x270>)
    244a:	005b      	lsls	r3, r3, #1
    244c:	18d3      	adds	r3, r2, r3
    244e:	3301      	adds	r3, #1
    2450:	2200      	movs	r2, #0
    2452:	569a      	ldrsb	r2, [r3, r2]
    2454:	2312      	movs	r3, #18
    2456:	18fb      	adds	r3, r7, r3
    2458:	701a      	strb	r2, [r3, #0]
	uint8_t def_tx_pin = uart_default_defs[c].tx_pin_num;
    245a:	1dfb      	adds	r3, r7, #7
    245c:	781a      	ldrb	r2, [r3, #0]
    245e:	4b78      	ldr	r3, [pc, #480]	; (2640 <morph_config_uart_setup_channel+0x270>)
    2460:	0052      	lsls	r2, r2, #1
    2462:	56d2      	ldrsb	r2, [r2, r3]
    2464:	2311      	movs	r3, #17
    2466:	18fb      	adds	r3, r7, r3
    2468:	701a      	strb	r2, [r3, #0]

	uint8_t cur_rx_pin = uart_current_defs[c].rx_pin_num;
    246a:	1dfb      	adds	r3, r7, #7
    246c:	781b      	ldrb	r3, [r3, #0]
    246e:	4a75      	ldr	r2, [pc, #468]	; (2644 <morph_config_uart_setup_channel+0x274>)
    2470:	005b      	lsls	r3, r3, #1
    2472:	18d3      	adds	r3, r2, r3
    2474:	3301      	adds	r3, #1
    2476:	2200      	movs	r2, #0
    2478:	569a      	ldrsb	r2, [r3, r2]
    247a:	2310      	movs	r3, #16
    247c:	18fb      	adds	r3, r7, r3
    247e:	701a      	strb	r2, [r3, #0]
	uint8_t cur_tx_pin = uart_current_defs[c].tx_pin_num;
    2480:	1dfb      	adds	r3, r7, #7
    2482:	781a      	ldrb	r2, [r3, #0]
    2484:	4b6f      	ldr	r3, [pc, #444]	; (2644 <morph_config_uart_setup_channel+0x274>)
    2486:	0052      	lsls	r2, r2, #1
    2488:	56d2      	ldrsb	r2, [r2, r3]
    248a:	230f      	movs	r3, #15
    248c:	18fb      	adds	r3, r7, r3
    248e:	701a      	strb	r2, [r3, #0]
	{
		morph_config_uart_set_rx_pin(c, def_rx_pin);
	}
	else
	{
		morph_config_uart_set_rx_pin(c, cur_rx_pin);
    2490:	2310      	movs	r3, #16
    2492:	18fb      	adds	r3, r7, r3
    2494:	2200      	movs	r2, #0
    2496:	569a      	ldrsb	r2, [r3, r2]
    2498:	1dfb      	adds	r3, r7, #7
    249a:	781b      	ldrb	r3, [r3, #0]
    249c:	0011      	movs	r1, r2
    249e:	0018      	movs	r0, r3
    24a0:	4b69      	ldr	r3, [pc, #420]	; (2648 <morph_config_uart_setup_channel+0x278>)
    24a2:	4798      	blx	r3
	{
		morph_config_uart_set_tx_pin(c, def_tx_pin);
	}
	else
	{
		morph_config_uart_set_tx_pin(c, cur_tx_pin);
    24a4:	230f      	movs	r3, #15
    24a6:	18fb      	adds	r3, r7, r3
    24a8:	2200      	movs	r2, #0
    24aa:	569a      	ldrsb	r2, [r3, r2]
    24ac:	1dfb      	adds	r3, r7, #7
    24ae:	781b      	ldrb	r3, [r3, #0]
    24b0:	0011      	movs	r1, r2
    24b2:	0018      	movs	r0, r3
    24b4:	4b65      	ldr	r3, [pc, #404]	; (264c <morph_config_uart_setup_channel+0x27c>)
    24b6:	4798      	blx	r3
	}

	// Pins configured!
	
	// Setting SERCOM mode to UART on internal clock
	sercom_ptr->USART.CTRLA.bit.MODE = SERCOM_USART_CTRLA_MODE_USART_INT_CLK_Val;
    24b8:	697b      	ldr	r3, [r7, #20]
    24ba:	681a      	ldr	r2, [r3, #0]
    24bc:	211c      	movs	r1, #28
    24be:	438a      	bics	r2, r1
    24c0:	2104      	movs	r1, #4
    24c2:	430a      	orrs	r2, r1
    24c4:	601a      	str	r2, [r3, #0]
	
	// 16x over-sampling using fractional baud rate generation.
	sercom_ptr->USART.CTRLA.bit.SAMPR = 0x1;
    24c6:	697b      	ldr	r3, [r7, #20]
    24c8:	681a      	ldr	r2, [r3, #0]
    24ca:	4961      	ldr	r1, [pc, #388]	; (2650 <morph_config_uart_setup_channel+0x280>)
    24cc:	400a      	ands	r2, r1
    24ce:	2180      	movs	r1, #128	; 0x80
    24d0:	0189      	lsls	r1, r1, #6
    24d2:	430a      	orrs	r2, r1
    24d4:	601a      	str	r2, [r3, #0]
	
    // Asynchronous fractional mode (Table 24-2 in datasheet)
    //   BAUD = fref / (sampleRateValue * fbaud)
    // (multiply by 8, to calculate fractional piece)
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sample_rate * br);
    24d6:	4b5f      	ldr	r3, [pc, #380]	; (2654 <morph_config_uart_setup_channel+0x284>)
    24d8:	681b      	ldr	r3, [r3, #0]
    24da:	00d8      	lsls	r0, r3, #3
    24dc:	2313      	movs	r3, #19
    24de:	18fb      	adds	r3, r7, r3
    24e0:	781b      	ldrb	r3, [r3, #0]
    24e2:	683a      	ldr	r2, [r7, #0]
    24e4:	435a      	muls	r2, r3
    24e6:	4b5c      	ldr	r3, [pc, #368]	; (2658 <morph_config_uart_setup_channel+0x288>)
    24e8:	0011      	movs	r1, r2
    24ea:	4798      	blx	r3
    24ec:	0003      	movs	r3, r0
    24ee:	60bb      	str	r3, [r7, #8]

    sercom_ptr->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    24f0:	68bb      	ldr	r3, [r7, #8]
    24f2:	b2db      	uxtb	r3, r3
    24f4:	1c1a      	adds	r2, r3, #0
    24f6:	2307      	movs	r3, #7
    24f8:	4013      	ands	r3, r2
    24fa:	b2d9      	uxtb	r1, r3
    24fc:	697a      	ldr	r2, [r7, #20]
    24fe:	8993      	ldrh	r3, [r2, #12]
    2500:	0348      	lsls	r0, r1, #13
    2502:	04db      	lsls	r3, r3, #19
    2504:	0cdb      	lsrs	r3, r3, #19
    2506:	1c19      	adds	r1, r3, #0
    2508:	1c03      	adds	r3, r0, #0
    250a:	430b      	orrs	r3, r1
    250c:	8193      	strh	r3, [r2, #12]
    sercom_ptr->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    250e:	68bb      	ldr	r3, [r7, #8]
    2510:	08db      	lsrs	r3, r3, #3
    2512:	b29b      	uxth	r3, r3
    2514:	04db      	lsls	r3, r3, #19
    2516:	0cdb      	lsrs	r3, r3, #19
    2518:	b299      	uxth	r1, r3
    251a:	697a      	ldr	r2, [r7, #20]
    251c:	8993      	ldrh	r3, [r2, #12]
    251e:	04c9      	lsls	r1, r1, #19
    2520:	0cc8      	lsrs	r0, r1, #19
    2522:	0b5b      	lsrs	r3, r3, #13
    2524:	035b      	lsls	r3, r3, #13
    2526:	1c19      	adds	r1, r3, #0
    2528:	1c03      	adds	r3, r0, #0
    252a:	430b      	orrs	r3, r1
    252c:	8193      	strh	r3, [r2, #12]
	
	// Now for frame stuff.
	
	// Determine if we need parity or not.
	sercom_ptr->USART.CTRLA.bit.FORM = pc == MorphNoParity ? 0 : 1;
    252e:	1d7b      	adds	r3, r7, #5
    2530:	781b      	ldrb	r3, [r3, #0]
    2532:	3b02      	subs	r3, #2
    2534:	1e5a      	subs	r2, r3, #1
    2536:	4193      	sbcs	r3, r2
    2538:	b2db      	uxtb	r3, r3
    253a:	1c1a      	adds	r2, r3, #0
    253c:	230f      	movs	r3, #15
    253e:	4013      	ands	r3, r2
    2540:	b2d9      	uxtb	r1, r3
    2542:	697b      	ldr	r3, [r7, #20]
    2544:	681a      	ldr	r2, [r3, #0]
    2546:	200f      	movs	r0, #15
    2548:	4001      	ands	r1, r0
    254a:	0609      	lsls	r1, r1, #24
    254c:	4843      	ldr	r0, [pc, #268]	; (265c <morph_config_uart_setup_channel+0x28c>)
    254e:	4002      	ands	r2, r0
    2550:	430a      	orrs	r2, r1
    2552:	601a      	str	r2, [r3, #0]
	
	if(pc != MorphNoParity)
    2554:	1d7b      	adds	r3, r7, #5
    2556:	781b      	ldrb	r3, [r3, #0]
    2558:	2b02      	cmp	r3, #2
    255a:	d00d      	beq.n	2578 <morph_config_uart_setup_channel+0x1a8>
	{
		// If we have parity, determine if it is even or odd.
		sercom_ptr->USART.CTRLB.bit.PMODE = pc == MorphEvenParity ? 0 : 1;
    255c:	1d7b      	adds	r3, r7, #5
    255e:	781b      	ldrb	r3, [r3, #0]
    2560:	1e5a      	subs	r2, r3, #1
    2562:	4193      	sbcs	r3, r2
    2564:	b2d9      	uxtb	r1, r3
    2566:	697b      	ldr	r3, [r7, #20]
    2568:	685a      	ldr	r2, [r3, #4]
    256a:	2001      	movs	r0, #1
    256c:	4001      	ands	r1, r0
    256e:	0349      	lsls	r1, r1, #13
    2570:	483b      	ldr	r0, [pc, #236]	; (2660 <morph_config_uart_setup_channel+0x290>)
    2572:	4002      	ands	r2, r0
    2574:	430a      	orrs	r2, r1
    2576:	605a      	str	r2, [r3, #4]
	}
	
	// Force data order to be LSB first 
	sercom_ptr->USART.CTRLA.bit.DORD = 1;
    2578:	697b      	ldr	r3, [r7, #20]
    257a:	681a      	ldr	r2, [r3, #0]
    257c:	2180      	movs	r1, #128	; 0x80
    257e:	05c9      	lsls	r1, r1, #23
    2580:	430a      	orrs	r2, r1
    2582:	601a      	str	r2, [r3, #0]
	
	// Setting the character size.
	switch(bs)
    2584:	1dbb      	adds	r3, r7, #6
    2586:	781b      	ldrb	r3, [r3, #0]
    2588:	2b08      	cmp	r3, #8
    258a:	d00d      	beq.n	25a8 <morph_config_uart_setup_channel+0x1d8>
    258c:	dc02      	bgt.n	2594 <morph_config_uart_setup_channel+0x1c4>
    258e:	2b05      	cmp	r3, #5
    2590:	db1e      	blt.n	25d0 <morph_config_uart_setup_channel+0x200>
    2592:	e00f      	b.n	25b4 <morph_config_uart_setup_channel+0x1e4>
    2594:	2b09      	cmp	r3, #9
    2596:	d11b      	bne.n	25d0 <morph_config_uart_setup_channel+0x200>
	{
		case 9:
		
			sercom_ptr->USART.CTRLB.bit.CHSIZE = 0x1;
    2598:	697b      	ldr	r3, [r7, #20]
    259a:	685a      	ldr	r2, [r3, #4]
    259c:	2107      	movs	r1, #7
    259e:	438a      	bics	r2, r1
    25a0:	2101      	movs	r1, #1
    25a2:	430a      	orrs	r2, r1
    25a4:	605a      	str	r2, [r3, #4]
	
			break;
    25a6:	e018      	b.n	25da <morph_config_uart_setup_channel+0x20a>
		
		case 8:

			sercom_ptr->USART.CTRLB.bit.CHSIZE = 0x0;
    25a8:	697b      	ldr	r3, [r7, #20]
    25aa:	685a      	ldr	r2, [r3, #4]
    25ac:	2107      	movs	r1, #7
    25ae:	438a      	bics	r2, r1
    25b0:	605a      	str	r2, [r3, #4]
			
			break;
    25b2:	e012      	b.n	25da <morph_config_uart_setup_channel+0x20a>
		
		case 5:
		case 6:
		case 7:

			sercom_ptr->USART.CTRLB.bit.CHSIZE = bs;
    25b4:	1dbb      	adds	r3, r7, #6
    25b6:	781b      	ldrb	r3, [r3, #0]
    25b8:	2207      	movs	r2, #7
    25ba:	4013      	ands	r3, r2
    25bc:	b2d9      	uxtb	r1, r3
    25be:	697b      	ldr	r3, [r7, #20]
    25c0:	685a      	ldr	r2, [r3, #4]
    25c2:	2007      	movs	r0, #7
    25c4:	4001      	ands	r1, r0
    25c6:	2007      	movs	r0, #7
    25c8:	4382      	bics	r2, r0
    25ca:	430a      	orrs	r2, r1
    25cc:	605a      	str	r2, [r3, #4]
					
			break;
    25ce:	e004      	b.n	25da <morph_config_uart_setup_channel+0x20a>

		default:
			sercom_ptr->USART.CTRLB.bit.CHSIZE = 0x0;
    25d0:	697b      	ldr	r3, [r7, #20]
    25d2:	685a      	ldr	r2, [r3, #4]
    25d4:	2107      	movs	r1, #7
    25d6:	438a      	bics	r2, r1
    25d8:	605a      	str	r2, [r3, #4]
		
	}
	
	// Setting stop bits.
	sercom_ptr->USART.CTRLB.bit.SBMODE = sb == 1 ? 0 : 1;
    25da:	2328      	movs	r3, #40	; 0x28
    25dc:	18fb      	adds	r3, r7, r3
    25de:	781b      	ldrb	r3, [r3, #0]
    25e0:	3b01      	subs	r3, #1
    25e2:	1e5a      	subs	r2, r3, #1
    25e4:	4193      	sbcs	r3, r2
    25e6:	b2d9      	uxtb	r1, r3
    25e8:	697b      	ldr	r3, [r7, #20]
    25ea:	685a      	ldr	r2, [r3, #4]
    25ec:	2001      	movs	r0, #1
    25ee:	4001      	ands	r1, r0
    25f0:	0189      	lsls	r1, r1, #6
    25f2:	2040      	movs	r0, #64	; 0x40
    25f4:	4382      	bics	r2, r0
    25f6:	430a      	orrs	r2, r1
    25f8:	605a      	str	r2, [r3, #4]
	
	
	// Enable transmitting and receiving!
	sercom_ptr->USART.CTRLB.bit.TXEN = 0x1;
    25fa:	697b      	ldr	r3, [r7, #20]
    25fc:	685a      	ldr	r2, [r3, #4]
    25fe:	2180      	movs	r1, #128	; 0x80
    2600:	0249      	lsls	r1, r1, #9
    2602:	430a      	orrs	r2, r1
    2604:	605a      	str	r2, [r3, #4]
	sercom_ptr->USART.CTRLB.bit.RXEN = 0x1;
    2606:	697b      	ldr	r3, [r7, #20]
    2608:	685a      	ldr	r2, [r3, #4]
    260a:	2180      	movs	r1, #128	; 0x80
    260c:	0289      	lsls	r1, r1, #10
    260e:	430a      	orrs	r2, r1
    2610:	605a      	str	r2, [r3, #4]
	
	// Enable the SERCOM!
	sercom_ptr->USART.CTRLA.bit.ENABLE = 0x1u;
    2612:	697b      	ldr	r3, [r7, #20]
    2614:	681a      	ldr	r2, [r3, #0]
    2616:	2102      	movs	r1, #2
    2618:	430a      	orrs	r2, r1
    261a:	601a      	str	r2, [r3, #0]

	//Wait for SYNCBUSY
	while(sercom_ptr->USART.SYNCBUSY.bit.ENABLE);
    261c:	46c0      	nop			; (mov r8, r8)
    261e:	697b      	ldr	r3, [r7, #20]
    2620:	69db      	ldr	r3, [r3, #28]
    2622:	079b      	lsls	r3, r3, #30
    2624:	0fdb      	lsrs	r3, r3, #31
    2626:	b2db      	uxtb	r3, r3
    2628:	2b00      	cmp	r3, #0
    262a:	d1f8      	bne.n	261e <morph_config_uart_setup_channel+0x24e>
    262c:	e000      	b.n	2630 <morph_config_uart_setup_channel+0x260>
		return; //Begone!
    262e:	46c0      	nop			; (mov r8, r8)
	
}
    2630:	46bd      	mov	sp, r7
    2632:	b007      	add	sp, #28
    2634:	bd90      	pop	{r4, r7, pc}
    2636:	46c0      	nop			; (mov r8, r8)
    2638:	00002289 	.word	0x00002289
    263c:	0000222d 	.word	0x0000222d
    2640:	20000a30 	.word	0x20000a30
    2644:	20000a3c 	.word	0x20000a3c
    2648:	00002a11 	.word	0x00002a11
    264c:	0000278d 	.word	0x0000278d
    2650:	ffff1fff 	.word	0xffff1fff
    2654:	20000650 	.word	0x20000650
    2658:	00002e9d 	.word	0x00002e9d
    265c:	f0ffffff 	.word	0xf0ffffff
    2660:	ffffdfff 	.word	0xffffdfff

00002664 <morph_config_uart_send_data>:

void morph_config_uart_send_data(MorphUARTChannel c, MorphUARTData data)
{
    2664:	b580      	push	{r7, lr}
    2666:	b084      	sub	sp, #16
    2668:	af00      	add	r7, sp, #0
    266a:	0002      	movs	r2, r0
    266c:	1dfb      	adds	r3, r7, #7
    266e:	701a      	strb	r2, [r3, #0]
    2670:	1d3b      	adds	r3, r7, #4
    2672:	1c0a      	adds	r2, r1, #0
    2674:	801a      	strh	r2, [r3, #0]
	if(c < 0 || c > 5)
    2676:	1dfb      	adds	r3, r7, #7
    2678:	781b      	ldrb	r3, [r3, #0]
    267a:	2b05      	cmp	r3, #5
    267c:	d813      	bhi.n	26a6 <morph_config_uart_send_data+0x42>
		return; //Begone!
		
	Sercom * sercom_ptr = get_sercom_channel_ptr(c);
    267e:	1dfb      	adds	r3, r7, #7
    2680:	781b      	ldrb	r3, [r3, #0]
    2682:	0018      	movs	r0, r3
    2684:	4b0a      	ldr	r3, [pc, #40]	; (26b0 <morph_config_uart_send_data+0x4c>)
    2686:	4798      	blx	r3
    2688:	0003      	movs	r3, r0
    268a:	60fb      	str	r3, [r7, #12]
	
	// Wait for the data register to be empty.
	while(!sercom_ptr->USART.INTFLAG.bit.DRE);
    268c:	46c0      	nop			; (mov r8, r8)
    268e:	68fb      	ldr	r3, [r7, #12]
    2690:	7e1b      	ldrb	r3, [r3, #24]
    2692:	07db      	lsls	r3, r3, #31
    2694:	0fdb      	lsrs	r3, r3, #31
    2696:	b2db      	uxtb	r3, r3
    2698:	2b00      	cmp	r3, #0
    269a:	d0f8      	beq.n	268e <morph_config_uart_send_data+0x2a>
	
	// Now write the data!
	sercom_ptr->USART.DATA.reg = data;
    269c:	68fb      	ldr	r3, [r7, #12]
    269e:	1d3a      	adds	r2, r7, #4
    26a0:	8812      	ldrh	r2, [r2, #0]
    26a2:	851a      	strh	r2, [r3, #40]	; 0x28
    26a4:	e000      	b.n	26a8 <morph_config_uart_send_data+0x44>
		return; //Begone!
    26a6:	46c0      	nop			; (mov r8, r8)
	
}
    26a8:	46bd      	mov	sp, r7
    26aa:	b004      	add	sp, #16
    26ac:	bd80      	pop	{r7, pc}
    26ae:	46c0      	nop			; (mov r8, r8)
    26b0:	0000222d 	.word	0x0000222d

000026b4 <morph_config_uart_read_data>:

MorphUARTData morph_config_uart_read_data(MorphUARTChannel c)
{
    26b4:	b580      	push	{r7, lr}
    26b6:	b084      	sub	sp, #16
    26b8:	af00      	add	r7, sp, #0
    26ba:	0002      	movs	r2, r0
    26bc:	1dfb      	adds	r3, r7, #7
    26be:	701a      	strb	r2, [r3, #0]

	Sercom * sercom_ptr = get_sercom_channel_ptr(c);
    26c0:	1dfb      	adds	r3, r7, #7
    26c2:	781b      	ldrb	r3, [r3, #0]
    26c4:	0018      	movs	r0, r3
    26c6:	4b09      	ldr	r3, [pc, #36]	; (26ec <morph_config_uart_read_data+0x38>)
    26c8:	4798      	blx	r3
    26ca:	0003      	movs	r3, r0
    26cc:	60fb      	str	r3, [r7, #12]
		
	// The register should be read only when the Receive Complete Interrupt Flag bit in the 
	// Interrupt Flag Status and Clear register (INTFLAG.RXC) is set.
	// (per datasheet section 26.8.10)
	while(!sercom_ptr->USART.INTFLAG.bit.RXC);	
    26ce:	46c0      	nop			; (mov r8, r8)
    26d0:	68fb      	ldr	r3, [r7, #12]
    26d2:	7e1b      	ldrb	r3, [r3, #24]
    26d4:	075b      	lsls	r3, r3, #29
    26d6:	0fdb      	lsrs	r3, r3, #31
    26d8:	b2db      	uxtb	r3, r3
    26da:	2b00      	cmp	r3, #0
    26dc:	d0f8      	beq.n	26d0 <morph_config_uart_read_data+0x1c>
	
	return sercom_ptr->USART.DATA.reg;	
    26de:	68fb      	ldr	r3, [r7, #12]
    26e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    26e2:	b29b      	uxth	r3, r3
	
}
    26e4:	0018      	movs	r0, r3
    26e6:	46bd      	mov	sp, r7
    26e8:	b004      	add	sp, #16
    26ea:	bd80      	pop	{r7, pc}
    26ec:	0000222d 	.word	0x0000222d

000026f0 <morph_config_uart_write_data_buffer>:

void morph_config_uart_write_data_buffer(MorphUARTChannel c, MorphUARTData * buffer, size_t length)
{
    26f0:	b580      	push	{r7, lr}
    26f2:	b086      	sub	sp, #24
    26f4:	af00      	add	r7, sp, #0
    26f6:	60b9      	str	r1, [r7, #8]
    26f8:	607a      	str	r2, [r7, #4]
    26fa:	230f      	movs	r3, #15
    26fc:	18fb      	adds	r3, r7, r3
    26fe:	1c02      	adds	r2, r0, #0
    2700:	701a      	strb	r2, [r3, #0]
	
	for(size_t i = 0; i < length; i ++)
    2702:	2300      	movs	r3, #0
    2704:	617b      	str	r3, [r7, #20]
    2706:	e00e      	b.n	2726 <morph_config_uart_write_data_buffer+0x36>
	{
		
		morph_config_uart_send_data(c, (uint16_t)buffer[i]);
    2708:	697b      	ldr	r3, [r7, #20]
    270a:	005b      	lsls	r3, r3, #1
    270c:	68ba      	ldr	r2, [r7, #8]
    270e:	18d3      	adds	r3, r2, r3
    2710:	881a      	ldrh	r2, [r3, #0]
    2712:	230f      	movs	r3, #15
    2714:	18fb      	adds	r3, r7, r3
    2716:	781b      	ldrb	r3, [r3, #0]
    2718:	0011      	movs	r1, r2
    271a:	0018      	movs	r0, r3
    271c:	4b06      	ldr	r3, [pc, #24]	; (2738 <morph_config_uart_write_data_buffer+0x48>)
    271e:	4798      	blx	r3
	for(size_t i = 0; i < length; i ++)
    2720:	697b      	ldr	r3, [r7, #20]
    2722:	3301      	adds	r3, #1
    2724:	617b      	str	r3, [r7, #20]
    2726:	697a      	ldr	r2, [r7, #20]
    2728:	687b      	ldr	r3, [r7, #4]
    272a:	429a      	cmp	r2, r3
    272c:	d3ec      	bcc.n	2708 <morph_config_uart_write_data_buffer+0x18>
		
	}
	
}
    272e:	46c0      	nop			; (mov r8, r8)
    2730:	46bd      	mov	sp, r7
    2732:	b006      	add	sp, #24
    2734:	bd80      	pop	{r7, pc}
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	00002665 	.word	0x00002665

0000273c <morph_config_uart_read_data_buffer>:

enum MorphUARTErrors morph_config_uart_read_data_buffer(MorphUARTChannel c, MorphUARTData * buffer, size_t length, MorphUARTTimeout timeout)
{
    273c:	b590      	push	{r4, r7, lr}
    273e:	b087      	sub	sp, #28
    2740:	af00      	add	r7, sp, #0
    2742:	60b9      	str	r1, [r7, #8]
    2744:	607a      	str	r2, [r7, #4]
    2746:	603b      	str	r3, [r7, #0]
    2748:	230f      	movs	r3, #15
    274a:	18fb      	adds	r3, r7, r3
    274c:	1c02      	adds	r2, r0, #0
    274e:	701a      	strb	r2, [r3, #0]

	//TODO: timeout.

	for(size_t i = 0; i < length; i ++)
    2750:	2300      	movs	r3, #0
    2752:	617b      	str	r3, [r7, #20]
    2754:	e00e      	b.n	2774 <morph_config_uart_read_data_buffer+0x38>
	{
		
		buffer[i] = morph_config_uart_read_data(c);
    2756:	697b      	ldr	r3, [r7, #20]
    2758:	005b      	lsls	r3, r3, #1
    275a:	68ba      	ldr	r2, [r7, #8]
    275c:	18d4      	adds	r4, r2, r3
    275e:	230f      	movs	r3, #15
    2760:	18fb      	adds	r3, r7, r3
    2762:	781b      	ldrb	r3, [r3, #0]
    2764:	0018      	movs	r0, r3
    2766:	4b08      	ldr	r3, [pc, #32]	; (2788 <morph_config_uart_read_data_buffer+0x4c>)
    2768:	4798      	blx	r3
    276a:	0003      	movs	r3, r0
    276c:	8023      	strh	r3, [r4, #0]
	for(size_t i = 0; i < length; i ++)
    276e:	697b      	ldr	r3, [r7, #20]
    2770:	3301      	adds	r3, #1
    2772:	617b      	str	r3, [r7, #20]
    2774:	697a      	ldr	r2, [r7, #20]
    2776:	687b      	ldr	r3, [r7, #4]
    2778:	429a      	cmp	r2, r3
    277a:	d3ec      	bcc.n	2756 <morph_config_uart_read_data_buffer+0x1a>
		
	}	
	
	return MORPH_UART_SUCCESS;
    277c:	2300      	movs	r3, #0

}
    277e:	0018      	movs	r0, r3
    2780:	46bd      	mov	sp, r7
    2782:	b007      	add	sp, #28
    2784:	bd90      	pop	{r4, r7, pc}
    2786:	46c0      	nop			; (mov r8, r8)
    2788:	000026b5 	.word	0x000026b5

0000278c <morph_config_uart_set_tx_pin>:

void morph_config_uart_set_tx_pin(MorphUARTChannel c, MorphPinNumber p_tx)
{
    278c:	b580      	push	{r7, lr}
    278e:	b086      	sub	sp, #24
    2790:	af00      	add	r7, sp, #0
    2792:	0002      	movs	r2, r0
    2794:	1dfb      	adds	r3, r7, #7
    2796:	701a      	strb	r2, [r3, #0]
    2798:	1dbb      	adds	r3, r7, #6
    279a:	1c0a      	adds	r2, r1, #0
    279c:	701a      	strb	r2, [r3, #0]
	// Determine if such a configuration is even possible.

	if(c < 0 || c > 5)
    279e:	1dfb      	adds	r3, r7, #7
    27a0:	781b      	ldrb	r3, [r3, #0]
    27a2:	2b05      	cmp	r3, #5
    27a4:	d900      	bls.n	27a8 <morph_config_uart_set_tx_pin+0x1c>
    27a6:	e121      	b.n	29ec <morph_config_uart_set_tx_pin+0x260>
		return; //Begone!

	Sercom * sercom_ptr = get_sercom_channel_ptr(c);
    27a8:	1dfb      	adds	r3, r7, #7
    27aa:	781b      	ldrb	r3, [r3, #0]
    27ac:	0018      	movs	r0, r3
    27ae:	4b91      	ldr	r3, [pc, #580]	; (29f4 <morph_config_uart_set_tx_pin+0x268>)
    27b0:	4798      	blx	r3
    27b2:	0003      	movs	r3, r0
    27b4:	60fb      	str	r3, [r7, #12]

	int8_t pin_group = pin_defs[p_tx - 1].pinGroup;
    27b6:	1dbb      	adds	r3, r7, #6
    27b8:	781b      	ldrb	r3, [r3, #0]
    27ba:	b25b      	sxtb	r3, r3
    27bc:	1e5a      	subs	r2, r3, #1
    27be:	230b      	movs	r3, #11
    27c0:	18f9      	adds	r1, r7, r3
    27c2:	488d      	ldr	r0, [pc, #564]	; (29f8 <morph_config_uart_set_tx_pin+0x26c>)
    27c4:	0013      	movs	r3, r2
    27c6:	005b      	lsls	r3, r3, #1
    27c8:	189b      	adds	r3, r3, r2
    27ca:	005b      	lsls	r3, r3, #1
    27cc:	5c1b      	ldrb	r3, [r3, r0]
    27ce:	700b      	strb	r3, [r1, #0]
	int8_t pin_num = pin_defs[p_tx - 1].pinNumInGroup;
    27d0:	1dbb      	adds	r3, r7, #6
    27d2:	781b      	ldrb	r3, [r3, #0]
    27d4:	b25b      	sxtb	r3, r3
    27d6:	1e5a      	subs	r2, r3, #1
    27d8:	230a      	movs	r3, #10
    27da:	18f9      	adds	r1, r7, r3
    27dc:	4886      	ldr	r0, [pc, #536]	; (29f8 <morph_config_uart_set_tx_pin+0x26c>)
    27de:	0013      	movs	r3, r2
    27e0:	005b      	lsls	r3, r3, #1
    27e2:	189b      	adds	r3, r3, r2
    27e4:	005b      	lsls	r3, r3, #1
    27e6:	18c3      	adds	r3, r0, r3
    27e8:	3301      	adds	r3, #1
    27ea:	781b      	ldrb	r3, [r3, #0]
    27ec:	700b      	strb	r3, [r1, #0]

	uint8_t txpo_reg_val = 0x0;
    27ee:	2317      	movs	r3, #23
    27f0:	18fb      	adds	r3, r7, r3
    27f2:	2200      	movs	r2, #0
    27f4:	701a      	strb	r2, [r3, #0]

	bool do_config = false;
    27f6:	2316      	movs	r3, #22
    27f8:	18fb      	adds	r3, r7, r3
    27fa:	2200      	movs	r2, #0
    27fc:	701a      	strb	r2, [r3, #0]
	bool use_config_alt = false;			
    27fe:	2315      	movs	r3, #21
    2800:	18fb      	adds	r3, r7, r3
    2802:	2200      	movs	r2, #0
    2804:	701a      	strb	r2, [r3, #0]
	
	if(pin_defs[p_tx].sercomUnit == c)
    2806:	1dbb      	adds	r3, r7, #6
    2808:	2200      	movs	r2, #0
    280a:	569a      	ldrsb	r2, [r3, r2]
    280c:	497a      	ldr	r1, [pc, #488]	; (29f8 <morph_config_uart_set_tx_pin+0x26c>)
    280e:	0013      	movs	r3, r2
    2810:	005b      	lsls	r3, r3, #1
    2812:	189b      	adds	r3, r3, r2
    2814:	005b      	lsls	r3, r3, #1
    2816:	18cb      	adds	r3, r1, r3
    2818:	3302      	adds	r3, #2
    281a:	781b      	ldrb	r3, [r3, #0]
    281c:	b25b      	sxtb	r3, r3
    281e:	001a      	movs	r2, r3
    2820:	1dfb      	adds	r3, r7, #7
    2822:	781b      	ldrb	r3, [r3, #0]
    2824:	429a      	cmp	r2, r3
    2826:	d144      	bne.n	28b2 <morph_config_uart_set_tx_pin+0x126>
	{
		uint8_t cur_sercom_pad = pin_defs[p_tx - 1].sercomPad;
    2828:	1dbb      	adds	r3, r7, #6
    282a:	781b      	ldrb	r3, [r3, #0]
    282c:	b25b      	sxtb	r3, r3
    282e:	1e5a      	subs	r2, r3, #1
    2830:	4971      	ldr	r1, [pc, #452]	; (29f8 <morph_config_uart_set_tx_pin+0x26c>)
    2832:	0013      	movs	r3, r2
    2834:	005b      	lsls	r3, r3, #1
    2836:	189b      	adds	r3, r3, r2
    2838:	005b      	lsls	r3, r3, #1
    283a:	18cb      	adds	r3, r1, r3
    283c:	3303      	adds	r3, #3
    283e:	2200      	movs	r2, #0
    2840:	569a      	ldrsb	r2, [r3, r2]
    2842:	2309      	movs	r3, #9
    2844:	18fb      	adds	r3, r7, r3
    2846:	701a      	strb	r2, [r3, #0]
	
		// This pin has the correct sercom unit on it!
		// Does this pin line-up with a correct pad?
		for(uint8_t i = 0; i < sizeof(uart_tx_defs) / sizeof(uart_tx_defs[0]); i++)
    2848:	2314      	movs	r3, #20
    284a:	18fb      	adds	r3, r7, r3
    284c:	2200      	movs	r2, #0
    284e:	701a      	strb	r2, [r3, #0]
    2850:	e029      	b.n	28a6 <morph_config_uart_set_tx_pin+0x11a>
		{
			
			if(uart_tx_defs[i].tx_pad_num == cur_sercom_pad)
    2852:	2314      	movs	r3, #20
    2854:	18fb      	adds	r3, r7, r3
    2856:	781a      	ldrb	r2, [r3, #0]
    2858:	4968      	ldr	r1, [pc, #416]	; (29fc <morph_config_uart_set_tx_pin+0x270>)
    285a:	0013      	movs	r3, r2
    285c:	009b      	lsls	r3, r3, #2
    285e:	189b      	adds	r3, r3, r2
    2860:	565b      	ldrsb	r3, [r3, r1]
    2862:	001a      	movs	r2, r3
    2864:	2309      	movs	r3, #9
    2866:	18fb      	adds	r3, r7, r3
    2868:	781b      	ldrb	r3, [r3, #0]
    286a:	429a      	cmp	r2, r3
    286c:	d114      	bne.n	2898 <morph_config_uart_set_tx_pin+0x10c>
			{
				// This tx configuration works!
				// Configure to use this tx pin.	
				do_config = true;
    286e:	2316      	movs	r3, #22
    2870:	18fb      	adds	r3, r7, r3
    2872:	2201      	movs	r2, #1
    2874:	701a      	strb	r2, [r3, #0]
				use_config_alt = false;
    2876:	2315      	movs	r3, #21
    2878:	18fb      	adds	r3, r7, r3
    287a:	2200      	movs	r2, #0
    287c:	701a      	strb	r2, [r3, #0]
				txpo_reg_val = uart_tx_defs[i].txpo_reg_val;
    287e:	2314      	movs	r3, #20
    2880:	18fb      	adds	r3, r7, r3
    2882:	781a      	ldrb	r2, [r3, #0]
    2884:	2317      	movs	r3, #23
    2886:	18f9      	adds	r1, r7, r3
    2888:	485c      	ldr	r0, [pc, #368]	; (29fc <morph_config_uart_set_tx_pin+0x270>)
    288a:	0013      	movs	r3, r2
    288c:	009b      	lsls	r3, r3, #2
    288e:	189b      	adds	r3, r3, r2
    2890:	18c3      	adds	r3, r0, r3
    2892:	3304      	adds	r3, #4
    2894:	781b      	ldrb	r3, [r3, #0]
    2896:	700b      	strb	r3, [r1, #0]
		for(uint8_t i = 0; i < sizeof(uart_tx_defs) / sizeof(uart_tx_defs[0]); i++)
    2898:	2314      	movs	r3, #20
    289a:	18fb      	adds	r3, r7, r3
    289c:	781a      	ldrb	r2, [r3, #0]
    289e:	2314      	movs	r3, #20
    28a0:	18fb      	adds	r3, r7, r3
    28a2:	3201      	adds	r2, #1
    28a4:	701a      	strb	r2, [r3, #0]
    28a6:	2314      	movs	r3, #20
    28a8:	18fb      	adds	r3, r7, r3
    28aa:	781b      	ldrb	r3, [r3, #0]
    28ac:	2b03      	cmp	r3, #3
    28ae:	d9d0      	bls.n	2852 <morph_config_uart_set_tx_pin+0xc6>
    28b0:	e054      	b.n	295c <morph_config_uart_set_tx_pin+0x1d0>
			}
			
		}
	}
	else if(pin_defs[p_tx].sercomAltUnit == c)
    28b2:	1dbb      	adds	r3, r7, #6
    28b4:	2200      	movs	r2, #0
    28b6:	569a      	ldrsb	r2, [r3, r2]
    28b8:	494f      	ldr	r1, [pc, #316]	; (29f8 <morph_config_uart_set_tx_pin+0x26c>)
    28ba:	0013      	movs	r3, r2
    28bc:	005b      	lsls	r3, r3, #1
    28be:	189b      	adds	r3, r3, r2
    28c0:	005b      	lsls	r3, r3, #1
    28c2:	18cb      	adds	r3, r1, r3
    28c4:	3304      	adds	r3, #4
    28c6:	781b      	ldrb	r3, [r3, #0]
    28c8:	b25b      	sxtb	r3, r3
    28ca:	001a      	movs	r2, r3
    28cc:	1dfb      	adds	r3, r7, #7
    28ce:	781b      	ldrb	r3, [r3, #0]
    28d0:	429a      	cmp	r2, r3
    28d2:	d143      	bne.n	295c <morph_config_uart_set_tx_pin+0x1d0>
	{
		uint8_t cur_sercom_pad = pin_defs[p_tx - 1].sercomAltPad;
    28d4:	1dbb      	adds	r3, r7, #6
    28d6:	781b      	ldrb	r3, [r3, #0]
    28d8:	b25b      	sxtb	r3, r3
    28da:	1e5a      	subs	r2, r3, #1
    28dc:	4946      	ldr	r1, [pc, #280]	; (29f8 <morph_config_uart_set_tx_pin+0x26c>)
    28de:	0013      	movs	r3, r2
    28e0:	005b      	lsls	r3, r3, #1
    28e2:	189b      	adds	r3, r3, r2
    28e4:	005b      	lsls	r3, r3, #1
    28e6:	18cb      	adds	r3, r1, r3
    28e8:	3305      	adds	r3, #5
    28ea:	2200      	movs	r2, #0
    28ec:	569a      	ldrsb	r2, [r3, r2]
    28ee:	2308      	movs	r3, #8
    28f0:	18fb      	adds	r3, r7, r3
    28f2:	701a      	strb	r2, [r3, #0]
			
		// This pin has the correct sercom unit on it!
		// Does this pin line-up with a correct pad?
		for(uint8_t i = 0; i < sizeof(uart_tx_defs) / sizeof(uart_tx_defs[0]); i++)
    28f4:	2313      	movs	r3, #19
    28f6:	18fb      	adds	r3, r7, r3
    28f8:	2200      	movs	r2, #0
    28fa:	701a      	strb	r2, [r3, #0]
    28fc:	e029      	b.n	2952 <morph_config_uart_set_tx_pin+0x1c6>
		{
				
			if(uart_tx_defs[i].tx_pad_num == cur_sercom_pad)
    28fe:	2313      	movs	r3, #19
    2900:	18fb      	adds	r3, r7, r3
    2902:	781a      	ldrb	r2, [r3, #0]
    2904:	493d      	ldr	r1, [pc, #244]	; (29fc <morph_config_uart_set_tx_pin+0x270>)
    2906:	0013      	movs	r3, r2
    2908:	009b      	lsls	r3, r3, #2
    290a:	189b      	adds	r3, r3, r2
    290c:	565b      	ldrsb	r3, [r3, r1]
    290e:	001a      	movs	r2, r3
    2910:	2308      	movs	r3, #8
    2912:	18fb      	adds	r3, r7, r3
    2914:	781b      	ldrb	r3, [r3, #0]
    2916:	429a      	cmp	r2, r3
    2918:	d114      	bne.n	2944 <morph_config_uart_set_tx_pin+0x1b8>
			{
				// This tx configuration works!
				// Configure to use this alt-tx pin.
				do_config = true;
    291a:	2316      	movs	r3, #22
    291c:	18fb      	adds	r3, r7, r3
    291e:	2201      	movs	r2, #1
    2920:	701a      	strb	r2, [r3, #0]
				use_config_alt = true;
    2922:	2315      	movs	r3, #21
    2924:	18fb      	adds	r3, r7, r3
    2926:	2201      	movs	r2, #1
    2928:	701a      	strb	r2, [r3, #0]
				txpo_reg_val = uart_tx_defs[i].txpo_reg_val;
    292a:	2313      	movs	r3, #19
    292c:	18fb      	adds	r3, r7, r3
    292e:	781a      	ldrb	r2, [r3, #0]
    2930:	2317      	movs	r3, #23
    2932:	18f9      	adds	r1, r7, r3
    2934:	4831      	ldr	r0, [pc, #196]	; (29fc <morph_config_uart_set_tx_pin+0x270>)
    2936:	0013      	movs	r3, r2
    2938:	009b      	lsls	r3, r3, #2
    293a:	189b      	adds	r3, r3, r2
    293c:	18c3      	adds	r3, r0, r3
    293e:	3304      	adds	r3, #4
    2940:	781b      	ldrb	r3, [r3, #0]
    2942:	700b      	strb	r3, [r1, #0]
		for(uint8_t i = 0; i < sizeof(uart_tx_defs) / sizeof(uart_tx_defs[0]); i++)
    2944:	2313      	movs	r3, #19
    2946:	18fb      	adds	r3, r7, r3
    2948:	781a      	ldrb	r2, [r3, #0]
    294a:	2313      	movs	r3, #19
    294c:	18fb      	adds	r3, r7, r3
    294e:	3201      	adds	r2, #1
    2950:	701a      	strb	r2, [r3, #0]
    2952:	2313      	movs	r3, #19
    2954:	18fb      	adds	r3, r7, r3
    2956:	781b      	ldrb	r3, [r3, #0]
    2958:	2b03      	cmp	r3, #3
    295a:	d9d0      	bls.n	28fe <morph_config_uart_set_tx_pin+0x172>
			}
				
		}
	}
	
	if(do_config)
    295c:	2316      	movs	r3, #22
    295e:	18fb      	adds	r3, r7, r3
    2960:	781b      	ldrb	r3, [r3, #0]
    2962:	2b00      	cmp	r3, #0
    2964:	d043      	beq.n	29ee <morph_config_uart_set_tx_pin+0x262>
	{
		if(use_config_alt)
    2966:	2315      	movs	r3, #21
    2968:	18fb      	adds	r3, r7, r3
    296a:	781b      	ldrb	r3, [r3, #0]
    296c:	2b00      	cmp	r3, #0
    296e:	d00a      	beq.n	2986 <morph_config_uart_set_tx_pin+0x1fa>
			set_mux_group_config(SERCOM_ALT_PMUX, pin_group, pin_num);
    2970:	230b      	movs	r3, #11
    2972:	18fb      	adds	r3, r7, r3
    2974:	7819      	ldrb	r1, [r3, #0]
    2976:	230a      	movs	r3, #10
    2978:	18fb      	adds	r3, r7, r3
    297a:	781b      	ldrb	r3, [r3, #0]
    297c:	001a      	movs	r2, r3
    297e:	2003      	movs	r0, #3
    2980:	4b1f      	ldr	r3, [pc, #124]	; (2a00 <morph_config_uart_set_tx_pin+0x274>)
    2982:	4798      	blx	r3
    2984:	e009      	b.n	299a <morph_config_uart_set_tx_pin+0x20e>
		else
			set_mux_group_config(SERCOM_PMUX, pin_group, pin_num);		
    2986:	230b      	movs	r3, #11
    2988:	18fb      	adds	r3, r7, r3
    298a:	7819      	ldrb	r1, [r3, #0]
    298c:	230a      	movs	r3, #10
    298e:	18fb      	adds	r3, r7, r3
    2990:	781b      	ldrb	r3, [r3, #0]
    2992:	001a      	movs	r2, r3
    2994:	2002      	movs	r0, #2
    2996:	4b1a      	ldr	r3, [pc, #104]	; (2a00 <morph_config_uart_set_tx_pin+0x274>)
    2998:	4798      	blx	r3
	
		// This configures the TX settings for the sercom unit.
		sercom_ptr->USART.CTRLA.bit.TXPO = txpo_reg_val;
    299a:	2317      	movs	r3, #23
    299c:	18fb      	adds	r3, r7, r3
    299e:	781b      	ldrb	r3, [r3, #0]
    29a0:	2203      	movs	r2, #3
    29a2:	4013      	ands	r3, r2
    29a4:	b2d9      	uxtb	r1, r3
    29a6:	68fb      	ldr	r3, [r7, #12]
    29a8:	681a      	ldr	r2, [r3, #0]
    29aa:	2003      	movs	r0, #3
    29ac:	4001      	ands	r1, r0
    29ae:	0409      	lsls	r1, r1, #16
    29b0:	4814      	ldr	r0, [pc, #80]	; (2a04 <morph_config_uart_set_tx_pin+0x278>)
    29b2:	4002      	ands	r2, r0
    29b4:	430a      	orrs	r2, r1
    29b6:	601a      	str	r2, [r3, #0]
	
		// After configuring the mux functions, enable them on the pin.
		PORT->Group[pin_group].PINCFG[pin_num].bit.PMUXEN = 1;
    29b8:	4813      	ldr	r0, [pc, #76]	; (2a08 <morph_config_uart_set_tx_pin+0x27c>)
    29ba:	230b      	movs	r3, #11
    29bc:	18fb      	adds	r3, r7, r3
    29be:	2200      	movs	r2, #0
    29c0:	569a      	ldrsb	r2, [r3, r2]
    29c2:	230a      	movs	r3, #10
    29c4:	18fb      	adds	r3, r7, r3
    29c6:	781b      	ldrb	r3, [r3, #0]
    29c8:	b25b      	sxtb	r3, r3
    29ca:	2140      	movs	r1, #64	; 0x40
    29cc:	01d2      	lsls	r2, r2, #7
    29ce:	1882      	adds	r2, r0, r2
    29d0:	18d3      	adds	r3, r2, r3
    29d2:	185a      	adds	r2, r3, r1
    29d4:	7813      	ldrb	r3, [r2, #0]
    29d6:	2101      	movs	r1, #1
    29d8:	430b      	orrs	r3, r1
    29da:	7013      	strb	r3, [r2, #0]
		
		// Save this config
		uart_current_defs[c].tx_pin_num = p_tx;
    29dc:	1dfb      	adds	r3, r7, #7
    29de:	781a      	ldrb	r2, [r3, #0]
    29e0:	4b0a      	ldr	r3, [pc, #40]	; (2a0c <morph_config_uart_set_tx_pin+0x280>)
    29e2:	0052      	lsls	r2, r2, #1
    29e4:	1db9      	adds	r1, r7, #6
    29e6:	7809      	ldrb	r1, [r1, #0]
    29e8:	54d1      	strb	r1, [r2, r3]
    29ea:	e000      	b.n	29ee <morph_config_uart_set_tx_pin+0x262>
		return; //Begone!
    29ec:	46c0      	nop			; (mov r8, r8)
	}
					

	
}
    29ee:	46bd      	mov	sp, r7
    29f0:	b006      	add	sp, #24
    29f2:	bd80      	pop	{r7, pc}
    29f4:	0000222d 	.word	0x0000222d
    29f8:	2000089c 	.word	0x2000089c
    29fc:	20000a1c 	.word	0x20000a1c
    2a00:	00002189 	.word	0x00002189
    2a04:	fffcffff 	.word	0xfffcffff
    2a08:	41004400 	.word	0x41004400
    2a0c:	20000a3c 	.word	0x20000a3c

00002a10 <morph_config_uart_set_rx_pin>:

void morph_config_uart_set_rx_pin(MorphUARTChannel c, MorphPinNumber p_rx)
{
    2a10:	b580      	push	{r7, lr}
    2a12:	b084      	sub	sp, #16
    2a14:	af00      	add	r7, sp, #0
    2a16:	0002      	movs	r2, r0
    2a18:	1dfb      	adds	r3, r7, #7
    2a1a:	701a      	strb	r2, [r3, #0]
    2a1c:	1dbb      	adds	r3, r7, #6
    2a1e:	1c0a      	adds	r2, r1, #0
    2a20:	701a      	strb	r2, [r3, #0]
	
	if(c < 0 || c > 5)
    2a22:	1dfb      	adds	r3, r7, #7
    2a24:	781b      	ldrb	r3, [r3, #0]
    2a26:	2b05      	cmp	r3, #5
    2a28:	d900      	bls.n	2a2c <morph_config_uart_set_rx_pin+0x1c>
    2a2a:	e12a      	b.n	2c82 <morph_config_uart_set_rx_pin+0x272>
		return; //Begone!
		
	Sercom * sercom_ptr = get_sercom_channel_ptr(c);
    2a2c:	1dfb      	adds	r3, r7, #7
    2a2e:	781b      	ldrb	r3, [r3, #0]
    2a30:	0018      	movs	r0, r3
    2a32:	4b96      	ldr	r3, [pc, #600]	; (2c8c <morph_config_uart_set_rx_pin+0x27c>)
    2a34:	4798      	blx	r3
    2a36:	0003      	movs	r3, r0
    2a38:	60fb      	str	r3, [r7, #12]


	int8_t pin_group = pin_defs[p_rx - 1].pinGroup;
    2a3a:	1dbb      	adds	r3, r7, #6
    2a3c:	781b      	ldrb	r3, [r3, #0]
    2a3e:	b25b      	sxtb	r3, r3
    2a40:	1e5a      	subs	r2, r3, #1
    2a42:	230b      	movs	r3, #11
    2a44:	18f9      	adds	r1, r7, r3
    2a46:	4892      	ldr	r0, [pc, #584]	; (2c90 <morph_config_uart_set_rx_pin+0x280>)
    2a48:	0013      	movs	r3, r2
    2a4a:	005b      	lsls	r3, r3, #1
    2a4c:	189b      	adds	r3, r3, r2
    2a4e:	005b      	lsls	r3, r3, #1
    2a50:	5c1b      	ldrb	r3, [r3, r0]
    2a52:	700b      	strb	r3, [r1, #0]
	int8_t pin_num = pin_defs[p_rx - 1].pinNumInGroup;
    2a54:	1dbb      	adds	r3, r7, #6
    2a56:	781b      	ldrb	r3, [r3, #0]
    2a58:	b25b      	sxtb	r3, r3
    2a5a:	1e5a      	subs	r2, r3, #1
    2a5c:	230a      	movs	r3, #10
    2a5e:	18f9      	adds	r1, r7, r3
    2a60:	488b      	ldr	r0, [pc, #556]	; (2c90 <morph_config_uart_set_rx_pin+0x280>)
    2a62:	0013      	movs	r3, r2
    2a64:	005b      	lsls	r3, r3, #1
    2a66:	189b      	adds	r3, r3, r2
    2a68:	005b      	lsls	r3, r3, #1
    2a6a:	18c3      	adds	r3, r0, r3
    2a6c:	3301      	adds	r3, #1
    2a6e:	781b      	ldrb	r3, [r3, #0]
    2a70:	700b      	strb	r3, [r1, #0]
	int8_t sercom_unit  = pin_defs[p_rx - 1].sercomUnit;
    2a72:	1dbb      	adds	r3, r7, #6
    2a74:	781b      	ldrb	r3, [r3, #0]
    2a76:	b25b      	sxtb	r3, r3
    2a78:	1e5a      	subs	r2, r3, #1
    2a7a:	2309      	movs	r3, #9
    2a7c:	18f9      	adds	r1, r7, r3
    2a7e:	4884      	ldr	r0, [pc, #528]	; (2c90 <morph_config_uart_set_rx_pin+0x280>)
    2a80:	0013      	movs	r3, r2
    2a82:	005b      	lsls	r3, r3, #1
    2a84:	189b      	adds	r3, r3, r2
    2a86:	005b      	lsls	r3, r3, #1
    2a88:	18c3      	adds	r3, r0, r3
    2a8a:	3302      	adds	r3, #2
    2a8c:	781b      	ldrb	r3, [r3, #0]
    2a8e:	700b      	strb	r3, [r1, #0]
	int8_t sercom_alt_unit = pin_defs[p_rx - 1].sercomAltUnit;
    2a90:	1dbb      	adds	r3, r7, #6
    2a92:	781b      	ldrb	r3, [r3, #0]
    2a94:	b25b      	sxtb	r3, r3
    2a96:	1e5a      	subs	r2, r3, #1
    2a98:	2308      	movs	r3, #8
    2a9a:	18f9      	adds	r1, r7, r3
    2a9c:	487c      	ldr	r0, [pc, #496]	; (2c90 <morph_config_uart_set_rx_pin+0x280>)
    2a9e:	0013      	movs	r3, r2
    2aa0:	005b      	lsls	r3, r3, #1
    2aa2:	189b      	adds	r3, r3, r2
    2aa4:	005b      	lsls	r3, r3, #1
    2aa6:	18c3      	adds	r3, r0, r3
    2aa8:	3304      	adds	r3, #4
    2aaa:	781b      	ldrb	r3, [r3, #0]
    2aac:	700b      	strb	r3, [r1, #0]
	
	if(pin_defs[p_rx - 1].sercomUnit == c)
    2aae:	1dbb      	adds	r3, r7, #6
    2ab0:	781b      	ldrb	r3, [r3, #0]
    2ab2:	b25b      	sxtb	r3, r3
    2ab4:	1e5a      	subs	r2, r3, #1
    2ab6:	4976      	ldr	r1, [pc, #472]	; (2c90 <morph_config_uart_set_rx_pin+0x280>)
    2ab8:	0013      	movs	r3, r2
    2aba:	005b      	lsls	r3, r3, #1
    2abc:	189b      	adds	r3, r3, r2
    2abe:	005b      	lsls	r3, r3, #1
    2ac0:	18cb      	adds	r3, r1, r3
    2ac2:	3302      	adds	r3, #2
    2ac4:	781b      	ldrb	r3, [r3, #0]
    2ac6:	b25b      	sxtb	r3, r3
    2ac8:	001a      	movs	r2, r3
    2aca:	1dfb      	adds	r3, r7, #7
    2acc:	781b      	ldrb	r3, [r3, #0]
    2ace:	429a      	cmp	r2, r3
    2ad0:	d162      	bne.n	2b98 <morph_config_uart_set_rx_pin+0x188>
	{
		
		// Set the direction to input!
		PORT->Group[pin_group].DIRCLR.reg = (1ul << pin_num);
    2ad2:	4970      	ldr	r1, [pc, #448]	; (2c94 <morph_config_uart_set_rx_pin+0x284>)
    2ad4:	230b      	movs	r3, #11
    2ad6:	18fb      	adds	r3, r7, r3
    2ad8:	781b      	ldrb	r3, [r3, #0]
    2ada:	b25b      	sxtb	r3, r3
    2adc:	220a      	movs	r2, #10
    2ade:	18ba      	adds	r2, r7, r2
    2ae0:	7812      	ldrb	r2, [r2, #0]
    2ae2:	b252      	sxtb	r2, r2
    2ae4:	2001      	movs	r0, #1
    2ae6:	4090      	lsls	r0, r2
    2ae8:	0002      	movs	r2, r0
    2aea:	01db      	lsls	r3, r3, #7
    2aec:	18cb      	adds	r3, r1, r3
    2aee:	3304      	adds	r3, #4
    2af0:	601a      	str	r2, [r3, #0]
		// Set the input enable to enabled!
		PORT->Group[pin_group].PINCFG[pin_num].bit.INEN = 1;
    2af2:	4868      	ldr	r0, [pc, #416]	; (2c94 <morph_config_uart_set_rx_pin+0x284>)
    2af4:	230b      	movs	r3, #11
    2af6:	18fb      	adds	r3, r7, r3
    2af8:	2200      	movs	r2, #0
    2afa:	569a      	ldrsb	r2, [r3, r2]
    2afc:	230a      	movs	r3, #10
    2afe:	18fb      	adds	r3, r7, r3
    2b00:	781b      	ldrb	r3, [r3, #0]
    2b02:	b25b      	sxtb	r3, r3
    2b04:	2140      	movs	r1, #64	; 0x40
    2b06:	01d2      	lsls	r2, r2, #7
    2b08:	1882      	adds	r2, r0, r2
    2b0a:	18d3      	adds	r3, r2, r3
    2b0c:	185a      	adds	r2, r3, r1
    2b0e:	7813      	ldrb	r3, [r2, #0]
    2b10:	2102      	movs	r1, #2
    2b12:	430b      	orrs	r3, r1
    2b14:	7013      	strb	r3, [r2, #0]
		
		// This pin has the correct sercom unit on it!
		// The rx pin can be on any pad of the sercom.
		set_mux_group_config(SERCOM_PMUX, pin_group, pin_num);
    2b16:	230b      	movs	r3, #11
    2b18:	18fb      	adds	r3, r7, r3
    2b1a:	7819      	ldrb	r1, [r3, #0]
    2b1c:	230a      	movs	r3, #10
    2b1e:	18fb      	adds	r3, r7, r3
    2b20:	781b      	ldrb	r3, [r3, #0]
    2b22:	001a      	movs	r2, r3
    2b24:	2002      	movs	r0, #2
    2b26:	4b5c      	ldr	r3, [pc, #368]	; (2c98 <morph_config_uart_set_rx_pin+0x288>)
    2b28:	4798      	blx	r3
		
		// After configuring the mux functions, enable them on the pin.
		PORT->Group[pin_group].PINCFG[pin_num].bit.PMUXEN = 1;
    2b2a:	485a      	ldr	r0, [pc, #360]	; (2c94 <morph_config_uart_set_rx_pin+0x284>)
    2b2c:	230b      	movs	r3, #11
    2b2e:	18fb      	adds	r3, r7, r3
    2b30:	2200      	movs	r2, #0
    2b32:	569a      	ldrsb	r2, [r3, r2]
    2b34:	230a      	movs	r3, #10
    2b36:	18fb      	adds	r3, r7, r3
    2b38:	781b      	ldrb	r3, [r3, #0]
    2b3a:	b25b      	sxtb	r3, r3
    2b3c:	2140      	movs	r1, #64	; 0x40
    2b3e:	01d2      	lsls	r2, r2, #7
    2b40:	1882      	adds	r2, r0, r2
    2b42:	18d3      	adds	r3, r2, r3
    2b44:	185a      	adds	r2, r3, r1
    2b46:	7813      	ldrb	r3, [r2, #0]
    2b48:	2101      	movs	r1, #1
    2b4a:	430b      	orrs	r3, r1
    2b4c:	7013      	strb	r3, [r2, #0]

		sercom_ptr->USART.CTRLA.bit.RXPO = pin_defs[p_rx - 1].sercomPad;
    2b4e:	1dbb      	adds	r3, r7, #6
    2b50:	781b      	ldrb	r3, [r3, #0]
    2b52:	b25b      	sxtb	r3, r3
    2b54:	1e5a      	subs	r2, r3, #1
    2b56:	494e      	ldr	r1, [pc, #312]	; (2c90 <morph_config_uart_set_rx_pin+0x280>)
    2b58:	0013      	movs	r3, r2
    2b5a:	005b      	lsls	r3, r3, #1
    2b5c:	189b      	adds	r3, r3, r2
    2b5e:	005b      	lsls	r3, r3, #1
    2b60:	18cb      	adds	r3, r1, r3
    2b62:	3303      	adds	r3, #3
    2b64:	781b      	ldrb	r3, [r3, #0]
    2b66:	b25b      	sxtb	r3, r3
    2b68:	b2db      	uxtb	r3, r3
    2b6a:	1c1a      	adds	r2, r3, #0
    2b6c:	2303      	movs	r3, #3
    2b6e:	4013      	ands	r3, r2
    2b70:	b2d9      	uxtb	r1, r3
    2b72:	68fb      	ldr	r3, [r7, #12]
    2b74:	681a      	ldr	r2, [r3, #0]
    2b76:	2003      	movs	r0, #3
    2b78:	4001      	ands	r1, r0
    2b7a:	0509      	lsls	r1, r1, #20
    2b7c:	4847      	ldr	r0, [pc, #284]	; (2c9c <morph_config_uart_set_rx_pin+0x28c>)
    2b7e:	4002      	ands	r2, r0
    2b80:	430a      	orrs	r2, r1
    2b82:	601a      	str	r2, [r3, #0]

		// Save this config
		uart_current_defs[c].rx_pin_num = p_rx;
    2b84:	1dfb      	adds	r3, r7, #7
    2b86:	781b      	ldrb	r3, [r3, #0]
    2b88:	4a45      	ldr	r2, [pc, #276]	; (2ca0 <morph_config_uart_set_rx_pin+0x290>)
    2b8a:	005b      	lsls	r3, r3, #1
    2b8c:	18d3      	adds	r3, r2, r3
    2b8e:	3301      	adds	r3, #1
    2b90:	1dba      	adds	r2, r7, #6
    2b92:	7812      	ldrb	r2, [r2, #0]
    2b94:	701a      	strb	r2, [r3, #0]
    2b96:	e075      	b.n	2c84 <morph_config_uart_set_rx_pin+0x274>

	}
	else if(pin_defs[p_rx - 1].sercomAltUnit == c)
    2b98:	1dbb      	adds	r3, r7, #6
    2b9a:	781b      	ldrb	r3, [r3, #0]
    2b9c:	b25b      	sxtb	r3, r3
    2b9e:	1e5a      	subs	r2, r3, #1
    2ba0:	493b      	ldr	r1, [pc, #236]	; (2c90 <morph_config_uart_set_rx_pin+0x280>)
    2ba2:	0013      	movs	r3, r2
    2ba4:	005b      	lsls	r3, r3, #1
    2ba6:	189b      	adds	r3, r3, r2
    2ba8:	005b      	lsls	r3, r3, #1
    2baa:	18cb      	adds	r3, r1, r3
    2bac:	3304      	adds	r3, #4
    2bae:	781b      	ldrb	r3, [r3, #0]
    2bb0:	b25b      	sxtb	r3, r3
    2bb2:	001a      	movs	r2, r3
    2bb4:	1dfb      	adds	r3, r7, #7
    2bb6:	781b      	ldrb	r3, [r3, #0]
    2bb8:	429a      	cmp	r2, r3
    2bba:	d163      	bne.n	2c84 <morph_config_uart_set_rx_pin+0x274>
	{
		// This pin has the correct sercom unit on it!
		// The rx pin can be on any pad of the sercom.
		set_mux_group_config(SERCOM_ALT_PMUX, pin_group, pin_num);
    2bbc:	230b      	movs	r3, #11
    2bbe:	18fb      	adds	r3, r7, r3
    2bc0:	7819      	ldrb	r1, [r3, #0]
    2bc2:	230a      	movs	r3, #10
    2bc4:	18fb      	adds	r3, r7, r3
    2bc6:	781b      	ldrb	r3, [r3, #0]
    2bc8:	001a      	movs	r2, r3
    2bca:	2003      	movs	r0, #3
    2bcc:	4b32      	ldr	r3, [pc, #200]	; (2c98 <morph_config_uart_set_rx_pin+0x288>)
    2bce:	4798      	blx	r3

		// After configuring the mux functions, enable them on the pin.
		PORT->Group[pin_group].PINCFG[pin_num].bit.PMUXEN = 1;
    2bd0:	4830      	ldr	r0, [pc, #192]	; (2c94 <morph_config_uart_set_rx_pin+0x284>)
    2bd2:	230b      	movs	r3, #11
    2bd4:	18fb      	adds	r3, r7, r3
    2bd6:	2200      	movs	r2, #0
    2bd8:	569a      	ldrsb	r2, [r3, r2]
    2bda:	230a      	movs	r3, #10
    2bdc:	18fb      	adds	r3, r7, r3
    2bde:	781b      	ldrb	r3, [r3, #0]
    2be0:	b25b      	sxtb	r3, r3
    2be2:	2140      	movs	r1, #64	; 0x40
    2be4:	01d2      	lsls	r2, r2, #7
    2be6:	1882      	adds	r2, r0, r2
    2be8:	18d3      	adds	r3, r2, r3
    2bea:	185a      	adds	r2, r3, r1
    2bec:	7813      	ldrb	r3, [r2, #0]
    2bee:	2101      	movs	r1, #1
    2bf0:	430b      	orrs	r3, r1
    2bf2:	7013      	strb	r3, [r2, #0]

		sercom_ptr->USART.CTRLA.bit.RXPO = pin_defs[p_rx - 1].sercomAltPad;
    2bf4:	1dbb      	adds	r3, r7, #6
    2bf6:	781b      	ldrb	r3, [r3, #0]
    2bf8:	b25b      	sxtb	r3, r3
    2bfa:	1e5a      	subs	r2, r3, #1
    2bfc:	4924      	ldr	r1, [pc, #144]	; (2c90 <morph_config_uart_set_rx_pin+0x280>)
    2bfe:	0013      	movs	r3, r2
    2c00:	005b      	lsls	r3, r3, #1
    2c02:	189b      	adds	r3, r3, r2
    2c04:	005b      	lsls	r3, r3, #1
    2c06:	18cb      	adds	r3, r1, r3
    2c08:	3305      	adds	r3, #5
    2c0a:	781b      	ldrb	r3, [r3, #0]
    2c0c:	b25b      	sxtb	r3, r3
    2c0e:	b2db      	uxtb	r3, r3
    2c10:	1c1a      	adds	r2, r3, #0
    2c12:	2303      	movs	r3, #3
    2c14:	4013      	ands	r3, r2
    2c16:	b2d9      	uxtb	r1, r3
    2c18:	68fb      	ldr	r3, [r7, #12]
    2c1a:	681a      	ldr	r2, [r3, #0]
    2c1c:	2003      	movs	r0, #3
    2c1e:	4001      	ands	r1, r0
    2c20:	0509      	lsls	r1, r1, #20
    2c22:	481e      	ldr	r0, [pc, #120]	; (2c9c <morph_config_uart_set_rx_pin+0x28c>)
    2c24:	4002      	ands	r2, r0
    2c26:	430a      	orrs	r2, r1
    2c28:	601a      	str	r2, [r3, #0]

		// Set the direction to input!
		PORT->Group[pin_group].DIRCLR.reg = (1ul << pin_num);
    2c2a:	491a      	ldr	r1, [pc, #104]	; (2c94 <morph_config_uart_set_rx_pin+0x284>)
    2c2c:	230b      	movs	r3, #11
    2c2e:	18fb      	adds	r3, r7, r3
    2c30:	781b      	ldrb	r3, [r3, #0]
    2c32:	b25b      	sxtb	r3, r3
    2c34:	220a      	movs	r2, #10
    2c36:	18ba      	adds	r2, r7, r2
    2c38:	7812      	ldrb	r2, [r2, #0]
    2c3a:	b252      	sxtb	r2, r2
    2c3c:	2001      	movs	r0, #1
    2c3e:	4090      	lsls	r0, r2
    2c40:	0002      	movs	r2, r0
    2c42:	01db      	lsls	r3, r3, #7
    2c44:	18cb      	adds	r3, r1, r3
    2c46:	3304      	adds	r3, #4
    2c48:	601a      	str	r2, [r3, #0]
		// Set the input enable to enabled!
		PORT->Group[pin_group].PINCFG[pin_num].bit.INEN = 1;
    2c4a:	4812      	ldr	r0, [pc, #72]	; (2c94 <morph_config_uart_set_rx_pin+0x284>)
    2c4c:	230b      	movs	r3, #11
    2c4e:	18fb      	adds	r3, r7, r3
    2c50:	2200      	movs	r2, #0
    2c52:	569a      	ldrsb	r2, [r3, r2]
    2c54:	230a      	movs	r3, #10
    2c56:	18fb      	adds	r3, r7, r3
    2c58:	781b      	ldrb	r3, [r3, #0]
    2c5a:	b25b      	sxtb	r3, r3
    2c5c:	2140      	movs	r1, #64	; 0x40
    2c5e:	01d2      	lsls	r2, r2, #7
    2c60:	1882      	adds	r2, r0, r2
    2c62:	18d3      	adds	r3, r2, r3
    2c64:	185a      	adds	r2, r3, r1
    2c66:	7813      	ldrb	r3, [r2, #0]
    2c68:	2102      	movs	r1, #2
    2c6a:	430b      	orrs	r3, r1
    2c6c:	7013      	strb	r3, [r2, #0]


		// Save this config
		uart_current_defs[c].rx_pin_num = p_rx;
    2c6e:	1dfb      	adds	r3, r7, #7
    2c70:	781b      	ldrb	r3, [r3, #0]
    2c72:	4a0b      	ldr	r2, [pc, #44]	; (2ca0 <morph_config_uart_set_rx_pin+0x290>)
    2c74:	005b      	lsls	r3, r3, #1
    2c76:	18d3      	adds	r3, r2, r3
    2c78:	3301      	adds	r3, #1
    2c7a:	1dba      	adds	r2, r7, #6
    2c7c:	7812      	ldrb	r2, [r2, #0]
    2c7e:	701a      	strb	r2, [r3, #0]
    2c80:	e000      	b.n	2c84 <morph_config_uart_set_rx_pin+0x274>
		return; //Begone!
    2c82:	46c0      	nop			; (mov r8, r8)

	}
}
    2c84:	46bd      	mov	sp, r7
    2c86:	b004      	add	sp, #16
    2c88:	bd80      	pop	{r7, pc}
    2c8a:	46c0      	nop			; (mov r8, r8)
    2c8c:	0000222d 	.word	0x0000222d
    2c90:	2000089c 	.word	0x2000089c
    2c94:	41004400 	.word	0x41004400
    2c98:	00002189 	.word	0x00002189
    2c9c:	ffcfffff 	.word	0xffcfffff
    2ca0:	20000a3c 	.word	0x20000a3c

00002ca4 <SysTick_Handler>:


MorphTimeValue millisecond_tick = 0;

void SysTick_Handler(void)
{
    2ca4:	b590      	push	{r4, r7, lr}
    2ca6:	af00      	add	r7, sp, #0
	// Handles the SysTick event to log the current milliseconds.
	millisecond_tick ++;
    2ca8:	4b06      	ldr	r3, [pc, #24]	; (2cc4 <SysTick_Handler+0x20>)
    2caa:	685c      	ldr	r4, [r3, #4]
    2cac:	681b      	ldr	r3, [r3, #0]
    2cae:	2101      	movs	r1, #1
    2cb0:	2200      	movs	r2, #0
    2cb2:	185b      	adds	r3, r3, r1
    2cb4:	4154      	adcs	r4, r2
    2cb6:	4a03      	ldr	r2, [pc, #12]	; (2cc4 <SysTick_Handler+0x20>)
    2cb8:	6013      	str	r3, [r2, #0]
    2cba:	6054      	str	r4, [r2, #4]
	
}
    2cbc:	46c0      	nop			; (mov r8, r8)
    2cbe:	46bd      	mov	sp, r7
    2cc0:	bd90      	pop	{r4, r7, pc}
    2cc2:	46c0      	nop			; (mov r8, r8)
    2cc4:	20000f48 	.word	0x20000f48

00002cc8 <morph_config_time_init>:

void morph_config_time_init(MorphTimerNumber tn, enum MorphTimerResolution res)
{
    2cc8:	b580      	push	{r7, lr}
    2cca:	b082      	sub	sp, #8
    2ccc:	af00      	add	r7, sp, #0
    2cce:	0002      	movs	r2, r0
    2cd0:	1dfb      	adds	r3, r7, #7
    2cd2:	701a      	strb	r2, [r3, #0]
    2cd4:	1dbb      	adds	r3, r7, #6
    2cd6:	1c0a      	adds	r2, r1, #0
    2cd8:	701a      	strb	r2, [r3, #0]
	// Do nothing.
	return;
    2cda:	46c0      	nop			; (mov r8, r8)
	
}
    2cdc:	46bd      	mov	sp, r7
    2cde:	b002      	add	sp, #8
    2ce0:	bd80      	pop	{r7, pc}
	...

00002ce4 <morph_config_time_init_rtc>:

void morph_config_time_init_rtc()
{
    2ce4:	b580      	push	{r7, lr}
    2ce6:	af00      	add	r7, sp, #0
	// Setup the RTC

	SysTick->CTRL = 0;                    // Disable the SysTick Module
    2ce8:	4b0c      	ldr	r3, [pc, #48]	; (2d1c <morph_config_time_init_rtc+0x38>)
    2cea:	2200      	movs	r2, #0
    2cec:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 999UL;                // Set the Reload Register for 1mS interrupts
    2cee:	4b0b      	ldr	r3, [pc, #44]	; (2d1c <morph_config_time_init_rtc+0x38>)
    2cf0:	4a0b      	ldr	r2, [pc, #44]	; (2d20 <morph_config_time_init_rtc+0x3c>)
    2cf2:	605a      	str	r2, [r3, #4]
	NVIC_SetPriority(SysTick_IRQn, 3);    // Set the interrupt priority to least urgency
    2cf4:	2301      	movs	r3, #1
    2cf6:	425b      	negs	r3, r3
    2cf8:	2103      	movs	r1, #3
    2cfa:	0018      	movs	r0, r3
    2cfc:	4b09      	ldr	r3, [pc, #36]	; (2d24 <morph_config_time_init_rtc+0x40>)
    2cfe:	4798      	blx	r3
	SysTick->VAL = 0;                    // Clear the Current Value register
    2d00:	4b06      	ldr	r3, [pc, #24]	; (2d1c <morph_config_time_init_rtc+0x38>)
    2d02:	2200      	movs	r2, #0
    2d04:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0x00000007;        // Enable SysTick, Enable SysTick Exceptions, Use CPU Clock
    2d06:	4b05      	ldr	r3, [pc, #20]	; (2d1c <morph_config_time_init_rtc+0x38>)
    2d08:	2207      	movs	r2, #7
    2d0a:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(SysTick_IRQn);        // Enable the SysTick Interrupt (Global)
    2d0c:	2301      	movs	r3, #1
    2d0e:	425b      	negs	r3, r3
    2d10:	0018      	movs	r0, r3
    2d12:	4b05      	ldr	r3, [pc, #20]	; (2d28 <morph_config_time_init_rtc+0x44>)
    2d14:	4798      	blx	r3
	
}
    2d16:	46c0      	nop			; (mov r8, r8)
    2d18:	46bd      	mov	sp, r7
    2d1a:	bd80      	pop	{r7, pc}
    2d1c:	e000e010 	.word	0xe000e010
    2d20:	000003e7 	.word	0x000003e7
    2d24:	00001b55 	.word	0x00001b55
    2d28:	00001b21 	.word	0x00001b21

00002d2c <morph_config_time_millis>:

MorphTimeValue morph_config_time_millis()
{
    2d2c:	b590      	push	{r4, r7, lr}
    2d2e:	af00      	add	r7, sp, #0
	// Get the current millisecond time and return.
	return millisecond_tick;
    2d30:	4b03      	ldr	r3, [pc, #12]	; (2d40 <morph_config_time_millis+0x14>)
    2d32:	685c      	ldr	r4, [r3, #4]
    2d34:	681b      	ldr	r3, [r3, #0]
	
}
    2d36:	0018      	movs	r0, r3
    2d38:	0021      	movs	r1, r4
    2d3a:	46bd      	mov	sp, r7
    2d3c:	bd90      	pop	{r4, r7, pc}
    2d3e:	46c0      	nop			; (mov r8, r8)
    2d40:	20000f48 	.word	0x20000f48

00002d44 <morph_config_init>:

void morph_config_init()
{
    2d44:	b580      	push	{r7, lr}
    2d46:	af00      	add	r7, sp, #0
	NVIC_SetPriority (SysTick_IRQn,  (1 << __NVIC_PRIO_BITS) - 2);  /* set Priority for Systick Interrupt (2nd lowest) */
    2d48:	2301      	movs	r3, #1
    2d4a:	425b      	negs	r3, r3
    2d4c:	2102      	movs	r1, #2
    2d4e:	0018      	movs	r0, r3
    2d50:	4b05      	ldr	r3, [pc, #20]	; (2d68 <morph_config_init+0x24>)
    2d52:	4798      	blx	r3
	//
	//  // Clock EIC for I/O interrupts
	//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

	// Clock SERCOM for Serial
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    2d54:	4b05      	ldr	r3, [pc, #20]	; (2d6c <morph_config_init+0x28>)
    2d56:	4a05      	ldr	r2, [pc, #20]	; (2d6c <morph_config_init+0x28>)
    2d58:	6a12      	ldr	r2, [r2, #32]
    2d5a:	21fc      	movs	r1, #252	; 0xfc
    2d5c:	430a      	orrs	r2, r1
    2d5e:	621a      	str	r2, [r3, #32]
}
    2d60:	46c0      	nop			; (mov r8, r8)
    2d62:	46bd      	mov	sp, r7
    2d64:	bd80      	pop	{r7, pc}
    2d66:	46c0      	nop			; (mov r8, r8)
    2d68:	00001b55 	.word	0x00001b55
    2d6c:	40000400 	.word	0x40000400

00002d70 <MorphUtils_empty_callback>:

// This function is used to initialize any function pointers.
// If this is not used, function pointers will restart the program if accidentally called.
static void MorphUtils_empty_callback(){
	; // Do nothing
}
    2d70:	4770      	bx	lr
	...

00002d74 <MorphGPIO_register_set_pin_value_function>:
void (*morph_unset_pin_interrupt_function)(MorphPinNumber, enum MorphPinValue) = &MorphUtils_empty_callback;


void MorphGPIO_register_set_pin_value_function(void (*function)(MorphPinNumber, enum MorphPinValue))
{
	morph_set_pin_value_function = function;	
    2d74:	4b01      	ldr	r3, [pc, #4]	; (2d7c <MorphGPIO_register_set_pin_value_function+0x8>)
    2d76:	6018      	str	r0, [r3, #0]
}
    2d78:	4770      	bx	lr
    2d7a:	46c0      	nop			; (mov r8, r8)
    2d7c:	20000a48 	.word	0x20000a48

00002d80 <MorphGPIO_register_get_pin_value_function>:

void MorphGPIO_register_get_pin_value_function(enum MorphPinValue (*function)(MorphPinNumber))
{
	morph_get_pin_value_function = function;
    2d80:	4b01      	ldr	r3, [pc, #4]	; (2d88 <MorphGPIO_register_get_pin_value_function+0x8>)
    2d82:	6058      	str	r0, [r3, #4]
}
    2d84:	4770      	bx	lr
    2d86:	46c0      	nop			; (mov r8, r8)
    2d88:	20000a48 	.word	0x20000a48

00002d8c <MorphGPIO_register_set_pin_direction_function>:

void MorphGPIO_register_set_pin_direction_function(void (*function)(MorphPinNumber, enum MorphPinDirection))
{
	morph_set_pin_direction_function = function;
    2d8c:	4b01      	ldr	r3, [pc, #4]	; (2d94 <MorphGPIO_register_set_pin_direction_function+0x8>)
    2d8e:	6098      	str	r0, [r3, #8]
}
    2d90:	4770      	bx	lr
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	20000a48 	.word	0x20000a48

00002d98 <MorphGPIO_register_get_pin_direction_function>:

void MorphGPIO_register_get_pin_direction_function(enum MorphPinDirection (*function)(MorphPinNumber))
{
	morph_get_pin_direction_function = function;
    2d98:	4b01      	ldr	r3, [pc, #4]	; (2da0 <MorphGPIO_register_get_pin_direction_function+0x8>)
    2d9a:	60d8      	str	r0, [r3, #12]
}
    2d9c:	4770      	bx	lr
    2d9e:	46c0      	nop			; (mov r8, r8)
    2da0:	20000a48 	.word	0x20000a48

00002da4 <MorphGPIO_register_set_pin_pull_state_function>:

void MorphGPIO_register_set_pin_pull_state_function(void (*function)(MorphPinNumber, enum MorphPinPullState))
{
	morph_set_pin_pull_state_function = function;
    2da4:	4b01      	ldr	r3, [pc, #4]	; (2dac <MorphGPIO_register_set_pin_pull_state_function+0x8>)
    2da6:	6118      	str	r0, [r3, #16]
}
    2da8:	4770      	bx	lr
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	20000a48 	.word	0x20000a48

00002db0 <MorphGPIO_register_get_pin_pull_state_function>:

void MorphGPIO_register_get_pin_pull_state_function(enum MorphPinPullState (*function)(MorphPinNumber))
{
	morph_get_pin_pull_state_function = function;	
    2db0:	4b01      	ldr	r3, [pc, #4]	; (2db8 <MorphGPIO_register_get_pin_pull_state_function+0x8>)
    2db2:	6158      	str	r0, [r3, #20]
}
    2db4:	4770      	bx	lr
    2db6:	46c0      	nop			; (mov r8, r8)
    2db8:	20000a48 	.word	0x20000a48

00002dbc <MorphGPIO_set_pin_value>:
#endif

// FUNCTIONS! //

void MorphGPIO_set_pin_value(MorphPinNumber pn, enum MorphPinValue pv)
{
    2dbc:	b510      	push	{r4, lr}
	#ifdef MORPH_IMPLICIT
		morph_config_gpio_set_pin_value(pn, pv);
	#else
		morph_set_pin_value_function(pn, pv);
    2dbe:	4b02      	ldr	r3, [pc, #8]	; (2dc8 <MorphGPIO_set_pin_value+0xc>)
    2dc0:	681b      	ldr	r3, [r3, #0]
    2dc2:	4798      	blx	r3
	#endif
}
    2dc4:	bd10      	pop	{r4, pc}
    2dc6:	46c0      	nop			; (mov r8, r8)
    2dc8:	20000a48 	.word	0x20000a48

00002dcc <MorphGPIO_set_pin_direction>:
		return morph_get_pin_value_function(pn);
	#endif
}

void MorphGPIO_set_pin_direction(MorphPinNumber pn, enum MorphPinDirection pd)
{
    2dcc:	b510      	push	{r4, lr}
	#ifdef MORPH_IMPLICIT
		morph_config_gpio_set_pin_direction(pn, pd);
	#else
		morph_set_pin_direction_function(pn, pd);
    2dce:	4b02      	ldr	r3, [pc, #8]	; (2dd8 <MorphGPIO_set_pin_direction+0xc>)
    2dd0:	689b      	ldr	r3, [r3, #8]
    2dd2:	4798      	blx	r3
	#endif
}
    2dd4:	bd10      	pop	{r4, pc}
    2dd6:	46c0      	nop			; (mov r8, r8)
    2dd8:	20000a48 	.word	0x20000a48

00002ddc <MorphGPIO_set_pin_pull_state>:
		return morph_get_pin_direction_function(pn);
	#endif
}

void MorphGPIO_set_pin_pull_state(MorphPinNumber pn, enum MorphPinPullState ps)
{
    2ddc:	b510      	push	{r4, lr}
	#ifdef MORPH_IMPLICIT
		morph_config_gpio_set_pin_pull_state(pn);
	#else
		morph_set_pin_pull_state_function(pn, ps);
    2dde:	4b02      	ldr	r3, [pc, #8]	; (2de8 <MorphGPIO_set_pin_pull_state+0xc>)
    2de0:	691b      	ldr	r3, [r3, #16]
    2de2:	4798      	blx	r3
	#endif
}
    2de4:	bd10      	pop	{r4, pc}
    2de6:	46c0      	nop			; (mov r8, r8)
    2de8:	20000a48 	.word	0x20000a48

00002dec <MorphUtils_empty_callback>:
    2dec:	4770      	bx	lr
	...

00002df0 <MorphTime_register_init_function>:
MorphTimeValue (*morph_millis_function)(void) = &MorphUtils_empty_callback;


void MorphTime_register_init_function(void (*function)(MorphTimerNumber, enum MorphTimerResolution))
{
	morph_init_function = function;
    2df0:	4b01      	ldr	r3, [pc, #4]	; (2df8 <MorphTime_register_init_function+0x8>)
    2df2:	6018      	str	r0, [r3, #0]
}
    2df4:	4770      	bx	lr
    2df6:	46c0      	nop			; (mov r8, r8)
    2df8:	20000a68 	.word	0x20000a68

00002dfc <MorphTime_register_init_rtc_function>:

void MorphTime_register_init_rtc_function(void (*function)(void))
{
	morph_init_rtc_function = function;
    2dfc:	4b01      	ldr	r3, [pc, #4]	; (2e04 <MorphTime_register_init_rtc_function+0x8>)
    2dfe:	6058      	str	r0, [r3, #4]
}
    2e00:	4770      	bx	lr
    2e02:	46c0      	nop			; (mov r8, r8)
    2e04:	20000a68 	.word	0x20000a68

00002e08 <MorphTime_register_millis_function>:

void MorphTime_register_millis_function(MorphTimeValue (*function)(void))
{
	morph_millis_function = function;
    2e08:	4b01      	ldr	r3, [pc, #4]	; (2e10 <MorphTime_register_millis_function+0x8>)
    2e0a:	6098      	str	r0, [r3, #8]
}
    2e0c:	4770      	bx	lr
    2e0e:	46c0      	nop			; (mov r8, r8)
    2e10:	20000a68 	.word	0x20000a68

00002e14 <MorphTime_init_rtc>:
	#endif
	
}

void MorphTime_init_rtc()
{
    2e14:	b510      	push	{r4, lr}
	#ifdef MORPH_IMPLICIT
		morph_config_time_init_rtc();
	#else
		morph_init_rtc_function();
    2e16:	4b02      	ldr	r3, [pc, #8]	; (2e20 <MorphTime_init_rtc+0xc>)
    2e18:	685b      	ldr	r3, [r3, #4]
    2e1a:	4798      	blx	r3
	#endif
}
    2e1c:	bd10      	pop	{r4, pc}
    2e1e:	46c0      	nop			; (mov r8, r8)
    2e20:	20000a68 	.word	0x20000a68

00002e24 <MorphTime_millis>:

MorphTimeValue MorphTime_millis()
{
    2e24:	b510      	push	{r4, lr}
	MorphTimeValue value = 0;
	#ifdef MORPH_IMPLICIT
		value = morph_config_time_millis();
	#else
		value = morph_millis_function();
    2e26:	4b02      	ldr	r3, [pc, #8]	; (2e30 <MorphTime_millis+0xc>)
    2e28:	689b      	ldr	r3, [r3, #8]
    2e2a:	4798      	blx	r3
	#endif
	
	return value;
}
    2e2c:	bd10      	pop	{r4, pc}
    2e2e:	46c0      	nop			; (mov r8, r8)
    2e30:	20000a68 	.word	0x20000a68

00002e34 <MorphUtils_empty_callback>:
    2e34:	4770      	bx	lr
	...

00002e38 <MorphUART_register_setup_channel_function>:

void (*morph_set_cts_pin_function)(MorphUARTChannel, MorphPinNumber) = &MorphUtils_empty_callback;

void MorphUART_register_setup_channel_function(void (*function)(MorphUARTChannel, MorphUARTBaudRate, MorphUARTByteSize, enum MorphUARTParity, MorphUARTStopBits))
{
	morph_setup_channel_function = function;
    2e38:	4b01      	ldr	r3, [pc, #4]	; (2e40 <MorphUART_register_setup_channel_function+0x8>)
    2e3a:	6018      	str	r0, [r3, #0]
}
    2e3c:	4770      	bx	lr
    2e3e:	46c0      	nop			; (mov r8, r8)
    2e40:	20000a74 	.word	0x20000a74

00002e44 <MorphUART_register_send_data_function>:
	morph_disable_channel_function = function;
}

void MorphUART_register_send_data_function(void (*function)(MorphUARTChannel, MorphUARTData))
{
	morph_send_data_function = function;
    2e44:	4b01      	ldr	r3, [pc, #4]	; (2e4c <MorphUART_register_send_data_function+0x8>)
    2e46:	6098      	str	r0, [r3, #8]
}
    2e48:	4770      	bx	lr
    2e4a:	46c0      	nop			; (mov r8, r8)
    2e4c:	20000a74 	.word	0x20000a74

00002e50 <MorphUART_register_read_data_function>:

void MorphUART_register_read_data_function(MorphUARTData (*function)(MorphUARTChannel))
{
	morph_read_data_function = function;
    2e50:	4b01      	ldr	r3, [pc, #4]	; (2e58 <MorphUART_register_read_data_function+0x8>)
    2e52:	60d8      	str	r0, [r3, #12]
}
    2e54:	4770      	bx	lr
    2e56:	46c0      	nop			; (mov r8, r8)
    2e58:	20000a74 	.word	0x20000a74

00002e5c <MorphUART_register_write_data_buffer_function>:
	morph_read_byte_function = function;
}

void MorphUART_register_write_data_buffer_function(void (*function)(MorphUARTChannel, MorphUARTData*, size_t))
{
	morph_write_data_buffer_function = function;
    2e5c:	4b01      	ldr	r3, [pc, #4]	; (2e64 <MorphUART_register_write_data_buffer_function+0x8>)
    2e5e:	6198      	str	r0, [r3, #24]
}
    2e60:	4770      	bx	lr
    2e62:	46c0      	nop			; (mov r8, r8)
    2e64:	20000a74 	.word	0x20000a74

00002e68 <MorphUART_register_read_data_buffer_function>:
	morph_write_byte_buffer_function = function;
}

void MorphUART_register_read_data_buffer_function(enum MorphUARTErrors (*function)(MorphUARTChannel, MorphUARTData *, size_t, MorphUARTTimeout))
{
	morph_read_data_buffer_function = function;
    2e68:	4b01      	ldr	r3, [pc, #4]	; (2e70 <MorphUART_register_read_data_buffer_function+0x8>)
    2e6a:	6218      	str	r0, [r3, #32]
}
    2e6c:	4770      	bx	lr
    2e6e:	46c0      	nop			; (mov r8, r8)
    2e70:	20000a74 	.word	0x20000a74

00002e74 <MorphUART_register_set_tx_pin_function>:
	morph_purge_input_function = function;
}

void MorphUART_register_set_tx_pin_function(void (*function)(MorphUARTChannel, MorphPinNumber))
{
	morph_set_tx_pin_function = function;
    2e74:	4b01      	ldr	r3, [pc, #4]	; (2e7c <MorphUART_register_set_tx_pin_function+0x8>)
    2e76:	62d8      	str	r0, [r3, #44]	; 0x2c
}
    2e78:	4770      	bx	lr
    2e7a:	46c0      	nop			; (mov r8, r8)
    2e7c:	20000a74 	.word	0x20000a74

00002e80 <MorphUART_register_set_rx_pin_function>:

void MorphUART_register_set_rx_pin_function(void (*function)(MorphUARTChannel, MorphPinNumber))
{
	morph_set_rx_pin_function = function;
    2e80:	4b01      	ldr	r3, [pc, #4]	; (2e88 <MorphUART_register_set_rx_pin_function+0x8>)
    2e82:	6318      	str	r0, [r3, #48]	; 0x30
}
    2e84:	4770      	bx	lr
    2e86:	46c0      	nop			; (mov r8, r8)
    2e88:	20000a74 	.word	0x20000a74

00002e8c <MorphUART_send_data>:
	#endif
}

// Will send the first n bytes of data depending on serial config.
void MorphUART_send_data(MorphUARTChannel c, MorphUARTData data)
{
    2e8c:	b510      	push	{r4, lr}
	#ifdef MORPH_IMPLICIT	
		morph_config_uart_send_data(c, data);
	#else
		morph_send_data_function(c, data);
    2e8e:	4b02      	ldr	r3, [pc, #8]	; (2e98 <MorphUART_send_data+0xc>)
    2e90:	689b      	ldr	r3, [r3, #8]
    2e92:	4798      	blx	r3
	#endif		
}
    2e94:	bd10      	pop	{r4, pc}
    2e96:	46c0      	nop			; (mov r8, r8)
    2e98:	20000a74 	.word	0x20000a74

00002e9c <__udivsi3>:
    2e9c:	2200      	movs	r2, #0
    2e9e:	0843      	lsrs	r3, r0, #1
    2ea0:	428b      	cmp	r3, r1
    2ea2:	d374      	bcc.n	2f8e <__udivsi3+0xf2>
    2ea4:	0903      	lsrs	r3, r0, #4
    2ea6:	428b      	cmp	r3, r1
    2ea8:	d35f      	bcc.n	2f6a <__udivsi3+0xce>
    2eaa:	0a03      	lsrs	r3, r0, #8
    2eac:	428b      	cmp	r3, r1
    2eae:	d344      	bcc.n	2f3a <__udivsi3+0x9e>
    2eb0:	0b03      	lsrs	r3, r0, #12
    2eb2:	428b      	cmp	r3, r1
    2eb4:	d328      	bcc.n	2f08 <__udivsi3+0x6c>
    2eb6:	0c03      	lsrs	r3, r0, #16
    2eb8:	428b      	cmp	r3, r1
    2eba:	d30d      	bcc.n	2ed8 <__udivsi3+0x3c>
    2ebc:	22ff      	movs	r2, #255	; 0xff
    2ebe:	0209      	lsls	r1, r1, #8
    2ec0:	ba12      	rev	r2, r2
    2ec2:	0c03      	lsrs	r3, r0, #16
    2ec4:	428b      	cmp	r3, r1
    2ec6:	d302      	bcc.n	2ece <__udivsi3+0x32>
    2ec8:	1212      	asrs	r2, r2, #8
    2eca:	0209      	lsls	r1, r1, #8
    2ecc:	d065      	beq.n	2f9a <__udivsi3+0xfe>
    2ece:	0b03      	lsrs	r3, r0, #12
    2ed0:	428b      	cmp	r3, r1
    2ed2:	d319      	bcc.n	2f08 <__udivsi3+0x6c>
    2ed4:	e000      	b.n	2ed8 <__udivsi3+0x3c>
    2ed6:	0a09      	lsrs	r1, r1, #8
    2ed8:	0bc3      	lsrs	r3, r0, #15
    2eda:	428b      	cmp	r3, r1
    2edc:	d301      	bcc.n	2ee2 <__udivsi3+0x46>
    2ede:	03cb      	lsls	r3, r1, #15
    2ee0:	1ac0      	subs	r0, r0, r3
    2ee2:	4152      	adcs	r2, r2
    2ee4:	0b83      	lsrs	r3, r0, #14
    2ee6:	428b      	cmp	r3, r1
    2ee8:	d301      	bcc.n	2eee <__udivsi3+0x52>
    2eea:	038b      	lsls	r3, r1, #14
    2eec:	1ac0      	subs	r0, r0, r3
    2eee:	4152      	adcs	r2, r2
    2ef0:	0b43      	lsrs	r3, r0, #13
    2ef2:	428b      	cmp	r3, r1
    2ef4:	d301      	bcc.n	2efa <__udivsi3+0x5e>
    2ef6:	034b      	lsls	r3, r1, #13
    2ef8:	1ac0      	subs	r0, r0, r3
    2efa:	4152      	adcs	r2, r2
    2efc:	0b03      	lsrs	r3, r0, #12
    2efe:	428b      	cmp	r3, r1
    2f00:	d301      	bcc.n	2f06 <__udivsi3+0x6a>
    2f02:	030b      	lsls	r3, r1, #12
    2f04:	1ac0      	subs	r0, r0, r3
    2f06:	4152      	adcs	r2, r2
    2f08:	0ac3      	lsrs	r3, r0, #11
    2f0a:	428b      	cmp	r3, r1
    2f0c:	d301      	bcc.n	2f12 <__udivsi3+0x76>
    2f0e:	02cb      	lsls	r3, r1, #11
    2f10:	1ac0      	subs	r0, r0, r3
    2f12:	4152      	adcs	r2, r2
    2f14:	0a83      	lsrs	r3, r0, #10
    2f16:	428b      	cmp	r3, r1
    2f18:	d301      	bcc.n	2f1e <__udivsi3+0x82>
    2f1a:	028b      	lsls	r3, r1, #10
    2f1c:	1ac0      	subs	r0, r0, r3
    2f1e:	4152      	adcs	r2, r2
    2f20:	0a43      	lsrs	r3, r0, #9
    2f22:	428b      	cmp	r3, r1
    2f24:	d301      	bcc.n	2f2a <__udivsi3+0x8e>
    2f26:	024b      	lsls	r3, r1, #9
    2f28:	1ac0      	subs	r0, r0, r3
    2f2a:	4152      	adcs	r2, r2
    2f2c:	0a03      	lsrs	r3, r0, #8
    2f2e:	428b      	cmp	r3, r1
    2f30:	d301      	bcc.n	2f36 <__udivsi3+0x9a>
    2f32:	020b      	lsls	r3, r1, #8
    2f34:	1ac0      	subs	r0, r0, r3
    2f36:	4152      	adcs	r2, r2
    2f38:	d2cd      	bcs.n	2ed6 <__udivsi3+0x3a>
    2f3a:	09c3      	lsrs	r3, r0, #7
    2f3c:	428b      	cmp	r3, r1
    2f3e:	d301      	bcc.n	2f44 <__udivsi3+0xa8>
    2f40:	01cb      	lsls	r3, r1, #7
    2f42:	1ac0      	subs	r0, r0, r3
    2f44:	4152      	adcs	r2, r2
    2f46:	0983      	lsrs	r3, r0, #6
    2f48:	428b      	cmp	r3, r1
    2f4a:	d301      	bcc.n	2f50 <__udivsi3+0xb4>
    2f4c:	018b      	lsls	r3, r1, #6
    2f4e:	1ac0      	subs	r0, r0, r3
    2f50:	4152      	adcs	r2, r2
    2f52:	0943      	lsrs	r3, r0, #5
    2f54:	428b      	cmp	r3, r1
    2f56:	d301      	bcc.n	2f5c <__udivsi3+0xc0>
    2f58:	014b      	lsls	r3, r1, #5
    2f5a:	1ac0      	subs	r0, r0, r3
    2f5c:	4152      	adcs	r2, r2
    2f5e:	0903      	lsrs	r3, r0, #4
    2f60:	428b      	cmp	r3, r1
    2f62:	d301      	bcc.n	2f68 <__udivsi3+0xcc>
    2f64:	010b      	lsls	r3, r1, #4
    2f66:	1ac0      	subs	r0, r0, r3
    2f68:	4152      	adcs	r2, r2
    2f6a:	08c3      	lsrs	r3, r0, #3
    2f6c:	428b      	cmp	r3, r1
    2f6e:	d301      	bcc.n	2f74 <__udivsi3+0xd8>
    2f70:	00cb      	lsls	r3, r1, #3
    2f72:	1ac0      	subs	r0, r0, r3
    2f74:	4152      	adcs	r2, r2
    2f76:	0883      	lsrs	r3, r0, #2
    2f78:	428b      	cmp	r3, r1
    2f7a:	d301      	bcc.n	2f80 <__udivsi3+0xe4>
    2f7c:	008b      	lsls	r3, r1, #2
    2f7e:	1ac0      	subs	r0, r0, r3
    2f80:	4152      	adcs	r2, r2
    2f82:	0843      	lsrs	r3, r0, #1
    2f84:	428b      	cmp	r3, r1
    2f86:	d301      	bcc.n	2f8c <__udivsi3+0xf0>
    2f88:	004b      	lsls	r3, r1, #1
    2f8a:	1ac0      	subs	r0, r0, r3
    2f8c:	4152      	adcs	r2, r2
    2f8e:	1a41      	subs	r1, r0, r1
    2f90:	d200      	bcs.n	2f94 <__udivsi3+0xf8>
    2f92:	4601      	mov	r1, r0
    2f94:	4152      	adcs	r2, r2
    2f96:	4610      	mov	r0, r2
    2f98:	4770      	bx	lr
    2f9a:	e7ff      	b.n	2f9c <__udivsi3+0x100>
    2f9c:	b501      	push	{r0, lr}
    2f9e:	2000      	movs	r0, #0
    2fa0:	f000 f8f0 	bl	3184 <__aeabi_idiv0>
    2fa4:	bd02      	pop	{r1, pc}
    2fa6:	46c0      	nop			; (mov r8, r8)

00002fa8 <__aeabi_uidivmod>:
    2fa8:	2900      	cmp	r1, #0
    2faa:	d0f7      	beq.n	2f9c <__udivsi3+0x100>
    2fac:	e776      	b.n	2e9c <__udivsi3>
    2fae:	4770      	bx	lr

00002fb0 <__divsi3>:
    2fb0:	4603      	mov	r3, r0
    2fb2:	430b      	orrs	r3, r1
    2fb4:	d47f      	bmi.n	30b6 <__divsi3+0x106>
    2fb6:	2200      	movs	r2, #0
    2fb8:	0843      	lsrs	r3, r0, #1
    2fba:	428b      	cmp	r3, r1
    2fbc:	d374      	bcc.n	30a8 <__divsi3+0xf8>
    2fbe:	0903      	lsrs	r3, r0, #4
    2fc0:	428b      	cmp	r3, r1
    2fc2:	d35f      	bcc.n	3084 <__divsi3+0xd4>
    2fc4:	0a03      	lsrs	r3, r0, #8
    2fc6:	428b      	cmp	r3, r1
    2fc8:	d344      	bcc.n	3054 <__divsi3+0xa4>
    2fca:	0b03      	lsrs	r3, r0, #12
    2fcc:	428b      	cmp	r3, r1
    2fce:	d328      	bcc.n	3022 <__divsi3+0x72>
    2fd0:	0c03      	lsrs	r3, r0, #16
    2fd2:	428b      	cmp	r3, r1
    2fd4:	d30d      	bcc.n	2ff2 <__divsi3+0x42>
    2fd6:	22ff      	movs	r2, #255	; 0xff
    2fd8:	0209      	lsls	r1, r1, #8
    2fda:	ba12      	rev	r2, r2
    2fdc:	0c03      	lsrs	r3, r0, #16
    2fde:	428b      	cmp	r3, r1
    2fe0:	d302      	bcc.n	2fe8 <__divsi3+0x38>
    2fe2:	1212      	asrs	r2, r2, #8
    2fe4:	0209      	lsls	r1, r1, #8
    2fe6:	d065      	beq.n	30b4 <__divsi3+0x104>
    2fe8:	0b03      	lsrs	r3, r0, #12
    2fea:	428b      	cmp	r3, r1
    2fec:	d319      	bcc.n	3022 <__divsi3+0x72>
    2fee:	e000      	b.n	2ff2 <__divsi3+0x42>
    2ff0:	0a09      	lsrs	r1, r1, #8
    2ff2:	0bc3      	lsrs	r3, r0, #15
    2ff4:	428b      	cmp	r3, r1
    2ff6:	d301      	bcc.n	2ffc <__divsi3+0x4c>
    2ff8:	03cb      	lsls	r3, r1, #15
    2ffa:	1ac0      	subs	r0, r0, r3
    2ffc:	4152      	adcs	r2, r2
    2ffe:	0b83      	lsrs	r3, r0, #14
    3000:	428b      	cmp	r3, r1
    3002:	d301      	bcc.n	3008 <__divsi3+0x58>
    3004:	038b      	lsls	r3, r1, #14
    3006:	1ac0      	subs	r0, r0, r3
    3008:	4152      	adcs	r2, r2
    300a:	0b43      	lsrs	r3, r0, #13
    300c:	428b      	cmp	r3, r1
    300e:	d301      	bcc.n	3014 <__divsi3+0x64>
    3010:	034b      	lsls	r3, r1, #13
    3012:	1ac0      	subs	r0, r0, r3
    3014:	4152      	adcs	r2, r2
    3016:	0b03      	lsrs	r3, r0, #12
    3018:	428b      	cmp	r3, r1
    301a:	d301      	bcc.n	3020 <__divsi3+0x70>
    301c:	030b      	lsls	r3, r1, #12
    301e:	1ac0      	subs	r0, r0, r3
    3020:	4152      	adcs	r2, r2
    3022:	0ac3      	lsrs	r3, r0, #11
    3024:	428b      	cmp	r3, r1
    3026:	d301      	bcc.n	302c <__divsi3+0x7c>
    3028:	02cb      	lsls	r3, r1, #11
    302a:	1ac0      	subs	r0, r0, r3
    302c:	4152      	adcs	r2, r2
    302e:	0a83      	lsrs	r3, r0, #10
    3030:	428b      	cmp	r3, r1
    3032:	d301      	bcc.n	3038 <__divsi3+0x88>
    3034:	028b      	lsls	r3, r1, #10
    3036:	1ac0      	subs	r0, r0, r3
    3038:	4152      	adcs	r2, r2
    303a:	0a43      	lsrs	r3, r0, #9
    303c:	428b      	cmp	r3, r1
    303e:	d301      	bcc.n	3044 <__divsi3+0x94>
    3040:	024b      	lsls	r3, r1, #9
    3042:	1ac0      	subs	r0, r0, r3
    3044:	4152      	adcs	r2, r2
    3046:	0a03      	lsrs	r3, r0, #8
    3048:	428b      	cmp	r3, r1
    304a:	d301      	bcc.n	3050 <__divsi3+0xa0>
    304c:	020b      	lsls	r3, r1, #8
    304e:	1ac0      	subs	r0, r0, r3
    3050:	4152      	adcs	r2, r2
    3052:	d2cd      	bcs.n	2ff0 <__divsi3+0x40>
    3054:	09c3      	lsrs	r3, r0, #7
    3056:	428b      	cmp	r3, r1
    3058:	d301      	bcc.n	305e <__divsi3+0xae>
    305a:	01cb      	lsls	r3, r1, #7
    305c:	1ac0      	subs	r0, r0, r3
    305e:	4152      	adcs	r2, r2
    3060:	0983      	lsrs	r3, r0, #6
    3062:	428b      	cmp	r3, r1
    3064:	d301      	bcc.n	306a <__divsi3+0xba>
    3066:	018b      	lsls	r3, r1, #6
    3068:	1ac0      	subs	r0, r0, r3
    306a:	4152      	adcs	r2, r2
    306c:	0943      	lsrs	r3, r0, #5
    306e:	428b      	cmp	r3, r1
    3070:	d301      	bcc.n	3076 <__divsi3+0xc6>
    3072:	014b      	lsls	r3, r1, #5
    3074:	1ac0      	subs	r0, r0, r3
    3076:	4152      	adcs	r2, r2
    3078:	0903      	lsrs	r3, r0, #4
    307a:	428b      	cmp	r3, r1
    307c:	d301      	bcc.n	3082 <__divsi3+0xd2>
    307e:	010b      	lsls	r3, r1, #4
    3080:	1ac0      	subs	r0, r0, r3
    3082:	4152      	adcs	r2, r2
    3084:	08c3      	lsrs	r3, r0, #3
    3086:	428b      	cmp	r3, r1
    3088:	d301      	bcc.n	308e <__divsi3+0xde>
    308a:	00cb      	lsls	r3, r1, #3
    308c:	1ac0      	subs	r0, r0, r3
    308e:	4152      	adcs	r2, r2
    3090:	0883      	lsrs	r3, r0, #2
    3092:	428b      	cmp	r3, r1
    3094:	d301      	bcc.n	309a <__divsi3+0xea>
    3096:	008b      	lsls	r3, r1, #2
    3098:	1ac0      	subs	r0, r0, r3
    309a:	4152      	adcs	r2, r2
    309c:	0843      	lsrs	r3, r0, #1
    309e:	428b      	cmp	r3, r1
    30a0:	d301      	bcc.n	30a6 <__divsi3+0xf6>
    30a2:	004b      	lsls	r3, r1, #1
    30a4:	1ac0      	subs	r0, r0, r3
    30a6:	4152      	adcs	r2, r2
    30a8:	1a41      	subs	r1, r0, r1
    30aa:	d200      	bcs.n	30ae <__divsi3+0xfe>
    30ac:	4601      	mov	r1, r0
    30ae:	4152      	adcs	r2, r2
    30b0:	4610      	mov	r0, r2
    30b2:	4770      	bx	lr
    30b4:	e05d      	b.n	3172 <__divsi3+0x1c2>
    30b6:	0fca      	lsrs	r2, r1, #31
    30b8:	d000      	beq.n	30bc <__divsi3+0x10c>
    30ba:	4249      	negs	r1, r1
    30bc:	1003      	asrs	r3, r0, #32
    30be:	d300      	bcc.n	30c2 <__divsi3+0x112>
    30c0:	4240      	negs	r0, r0
    30c2:	4053      	eors	r3, r2
    30c4:	2200      	movs	r2, #0
    30c6:	469c      	mov	ip, r3
    30c8:	0903      	lsrs	r3, r0, #4
    30ca:	428b      	cmp	r3, r1
    30cc:	d32d      	bcc.n	312a <__divsi3+0x17a>
    30ce:	0a03      	lsrs	r3, r0, #8
    30d0:	428b      	cmp	r3, r1
    30d2:	d312      	bcc.n	30fa <__divsi3+0x14a>
    30d4:	22fc      	movs	r2, #252	; 0xfc
    30d6:	0189      	lsls	r1, r1, #6
    30d8:	ba12      	rev	r2, r2
    30da:	0a03      	lsrs	r3, r0, #8
    30dc:	428b      	cmp	r3, r1
    30de:	d30c      	bcc.n	30fa <__divsi3+0x14a>
    30e0:	0189      	lsls	r1, r1, #6
    30e2:	1192      	asrs	r2, r2, #6
    30e4:	428b      	cmp	r3, r1
    30e6:	d308      	bcc.n	30fa <__divsi3+0x14a>
    30e8:	0189      	lsls	r1, r1, #6
    30ea:	1192      	asrs	r2, r2, #6
    30ec:	428b      	cmp	r3, r1
    30ee:	d304      	bcc.n	30fa <__divsi3+0x14a>
    30f0:	0189      	lsls	r1, r1, #6
    30f2:	d03a      	beq.n	316a <__divsi3+0x1ba>
    30f4:	1192      	asrs	r2, r2, #6
    30f6:	e000      	b.n	30fa <__divsi3+0x14a>
    30f8:	0989      	lsrs	r1, r1, #6
    30fa:	09c3      	lsrs	r3, r0, #7
    30fc:	428b      	cmp	r3, r1
    30fe:	d301      	bcc.n	3104 <__divsi3+0x154>
    3100:	01cb      	lsls	r3, r1, #7
    3102:	1ac0      	subs	r0, r0, r3
    3104:	4152      	adcs	r2, r2
    3106:	0983      	lsrs	r3, r0, #6
    3108:	428b      	cmp	r3, r1
    310a:	d301      	bcc.n	3110 <__divsi3+0x160>
    310c:	018b      	lsls	r3, r1, #6
    310e:	1ac0      	subs	r0, r0, r3
    3110:	4152      	adcs	r2, r2
    3112:	0943      	lsrs	r3, r0, #5
    3114:	428b      	cmp	r3, r1
    3116:	d301      	bcc.n	311c <__divsi3+0x16c>
    3118:	014b      	lsls	r3, r1, #5
    311a:	1ac0      	subs	r0, r0, r3
    311c:	4152      	adcs	r2, r2
    311e:	0903      	lsrs	r3, r0, #4
    3120:	428b      	cmp	r3, r1
    3122:	d301      	bcc.n	3128 <__divsi3+0x178>
    3124:	010b      	lsls	r3, r1, #4
    3126:	1ac0      	subs	r0, r0, r3
    3128:	4152      	adcs	r2, r2
    312a:	08c3      	lsrs	r3, r0, #3
    312c:	428b      	cmp	r3, r1
    312e:	d301      	bcc.n	3134 <__divsi3+0x184>
    3130:	00cb      	lsls	r3, r1, #3
    3132:	1ac0      	subs	r0, r0, r3
    3134:	4152      	adcs	r2, r2
    3136:	0883      	lsrs	r3, r0, #2
    3138:	428b      	cmp	r3, r1
    313a:	d301      	bcc.n	3140 <__divsi3+0x190>
    313c:	008b      	lsls	r3, r1, #2
    313e:	1ac0      	subs	r0, r0, r3
    3140:	4152      	adcs	r2, r2
    3142:	d2d9      	bcs.n	30f8 <__divsi3+0x148>
    3144:	0843      	lsrs	r3, r0, #1
    3146:	428b      	cmp	r3, r1
    3148:	d301      	bcc.n	314e <__divsi3+0x19e>
    314a:	004b      	lsls	r3, r1, #1
    314c:	1ac0      	subs	r0, r0, r3
    314e:	4152      	adcs	r2, r2
    3150:	1a41      	subs	r1, r0, r1
    3152:	d200      	bcs.n	3156 <__divsi3+0x1a6>
    3154:	4601      	mov	r1, r0
    3156:	4663      	mov	r3, ip
    3158:	4152      	adcs	r2, r2
    315a:	105b      	asrs	r3, r3, #1
    315c:	4610      	mov	r0, r2
    315e:	d301      	bcc.n	3164 <__divsi3+0x1b4>
    3160:	4240      	negs	r0, r0
    3162:	2b00      	cmp	r3, #0
    3164:	d500      	bpl.n	3168 <__divsi3+0x1b8>
    3166:	4249      	negs	r1, r1
    3168:	4770      	bx	lr
    316a:	4663      	mov	r3, ip
    316c:	105b      	asrs	r3, r3, #1
    316e:	d300      	bcc.n	3172 <__divsi3+0x1c2>
    3170:	4240      	negs	r0, r0
    3172:	b501      	push	{r0, lr}
    3174:	2000      	movs	r0, #0
    3176:	f000 f805 	bl	3184 <__aeabi_idiv0>
    317a:	bd02      	pop	{r1, pc}

0000317c <__aeabi_idivmod>:
    317c:	2900      	cmp	r1, #0
    317e:	d0f8      	beq.n	3172 <__divsi3+0x1c2>
    3180:	e716      	b.n	2fb0 <__divsi3>
    3182:	4770      	bx	lr

00003184 <__aeabi_idiv0>:
    3184:	4770      	bx	lr
    3186:	46c0      	nop			; (mov r8, r8)

00003188 <__aeabi_uldivmod>:
    3188:	2b00      	cmp	r3, #0
    318a:	d111      	bne.n	31b0 <__aeabi_uldivmod+0x28>
    318c:	2a00      	cmp	r2, #0
    318e:	d10f      	bne.n	31b0 <__aeabi_uldivmod+0x28>
    3190:	2900      	cmp	r1, #0
    3192:	d100      	bne.n	3196 <__aeabi_uldivmod+0xe>
    3194:	2800      	cmp	r0, #0
    3196:	d002      	beq.n	319e <__aeabi_uldivmod+0x16>
    3198:	2100      	movs	r1, #0
    319a:	43c9      	mvns	r1, r1
    319c:	1c08      	adds	r0, r1, #0
    319e:	b407      	push	{r0, r1, r2}
    31a0:	4802      	ldr	r0, [pc, #8]	; (31ac <__aeabi_uldivmod+0x24>)
    31a2:	a102      	add	r1, pc, #8	; (adr r1, 31ac <__aeabi_uldivmod+0x24>)
    31a4:	1840      	adds	r0, r0, r1
    31a6:	9002      	str	r0, [sp, #8]
    31a8:	bd03      	pop	{r0, r1, pc}
    31aa:	46c0      	nop			; (mov r8, r8)
    31ac:	ffffffd9 	.word	0xffffffd9
    31b0:	b403      	push	{r0, r1}
    31b2:	4668      	mov	r0, sp
    31b4:	b501      	push	{r0, lr}
    31b6:	9802      	ldr	r0, [sp, #8]
    31b8:	f000 f826 	bl	3208 <__udivmoddi4>
    31bc:	9b01      	ldr	r3, [sp, #4]
    31be:	469e      	mov	lr, r3
    31c0:	b002      	add	sp, #8
    31c2:	bc0c      	pop	{r2, r3}
    31c4:	4770      	bx	lr
    31c6:	46c0      	nop			; (mov r8, r8)

000031c8 <__aeabi_f2ulz>:
    31c8:	b570      	push	{r4, r5, r6, lr}
    31ca:	f001 f959 	bl	4480 <__aeabi_f2d>
    31ce:	2200      	movs	r2, #0
    31d0:	4b0b      	ldr	r3, [pc, #44]	; (3200 <__aeabi_f2ulz+0x38>)
    31d2:	000d      	movs	r5, r1
    31d4:	0004      	movs	r4, r0
    31d6:	f000 fb85 	bl	38e4 <__aeabi_dmul>
    31da:	f001 f9cd 	bl	4578 <__aeabi_d2uiz>
    31de:	0006      	movs	r6, r0
    31e0:	f001 f916 	bl	4410 <__aeabi_ui2d>
    31e4:	2200      	movs	r2, #0
    31e6:	4b07      	ldr	r3, [pc, #28]	; (3204 <__aeabi_f2ulz+0x3c>)
    31e8:	f000 fb7c 	bl	38e4 <__aeabi_dmul>
    31ec:	0002      	movs	r2, r0
    31ee:	000b      	movs	r3, r1
    31f0:	0020      	movs	r0, r4
    31f2:	0029      	movs	r1, r5
    31f4:	f000 fdf6 	bl	3de4 <__aeabi_dsub>
    31f8:	f001 f9be 	bl	4578 <__aeabi_d2uiz>
    31fc:	0031      	movs	r1, r6
    31fe:	bd70      	pop	{r4, r5, r6, pc}
    3200:	3df00000 	.word	0x3df00000
    3204:	41f00000 	.word	0x41f00000

00003208 <__udivmoddi4>:
    3208:	b5f0      	push	{r4, r5, r6, r7, lr}
    320a:	4657      	mov	r7, sl
    320c:	464e      	mov	r6, r9
    320e:	4645      	mov	r5, r8
    3210:	46de      	mov	lr, fp
    3212:	b5e0      	push	{r5, r6, r7, lr}
    3214:	0004      	movs	r4, r0
    3216:	b083      	sub	sp, #12
    3218:	000d      	movs	r5, r1
    321a:	4692      	mov	sl, r2
    321c:	4699      	mov	r9, r3
    321e:	428b      	cmp	r3, r1
    3220:	d82f      	bhi.n	3282 <__udivmoddi4+0x7a>
    3222:	d02c      	beq.n	327e <__udivmoddi4+0x76>
    3224:	4649      	mov	r1, r9
    3226:	4650      	mov	r0, sl
    3228:	f001 f99a 	bl	4560 <__clzdi2>
    322c:	0029      	movs	r1, r5
    322e:	0006      	movs	r6, r0
    3230:	0020      	movs	r0, r4
    3232:	f001 f995 	bl	4560 <__clzdi2>
    3236:	1a33      	subs	r3, r6, r0
    3238:	4698      	mov	r8, r3
    323a:	3b20      	subs	r3, #32
    323c:	469b      	mov	fp, r3
    323e:	d500      	bpl.n	3242 <__udivmoddi4+0x3a>
    3240:	e074      	b.n	332c <__udivmoddi4+0x124>
    3242:	4653      	mov	r3, sl
    3244:	465a      	mov	r2, fp
    3246:	4093      	lsls	r3, r2
    3248:	001f      	movs	r7, r3
    324a:	4653      	mov	r3, sl
    324c:	4642      	mov	r2, r8
    324e:	4093      	lsls	r3, r2
    3250:	001e      	movs	r6, r3
    3252:	42af      	cmp	r7, r5
    3254:	d829      	bhi.n	32aa <__udivmoddi4+0xa2>
    3256:	d026      	beq.n	32a6 <__udivmoddi4+0x9e>
    3258:	465b      	mov	r3, fp
    325a:	1ba4      	subs	r4, r4, r6
    325c:	41bd      	sbcs	r5, r7
    325e:	2b00      	cmp	r3, #0
    3260:	da00      	bge.n	3264 <__udivmoddi4+0x5c>
    3262:	e079      	b.n	3358 <__udivmoddi4+0x150>
    3264:	2200      	movs	r2, #0
    3266:	2300      	movs	r3, #0
    3268:	9200      	str	r2, [sp, #0]
    326a:	9301      	str	r3, [sp, #4]
    326c:	2301      	movs	r3, #1
    326e:	465a      	mov	r2, fp
    3270:	4093      	lsls	r3, r2
    3272:	9301      	str	r3, [sp, #4]
    3274:	2301      	movs	r3, #1
    3276:	4642      	mov	r2, r8
    3278:	4093      	lsls	r3, r2
    327a:	9300      	str	r3, [sp, #0]
    327c:	e019      	b.n	32b2 <__udivmoddi4+0xaa>
    327e:	4282      	cmp	r2, r0
    3280:	d9d0      	bls.n	3224 <__udivmoddi4+0x1c>
    3282:	2200      	movs	r2, #0
    3284:	2300      	movs	r3, #0
    3286:	9200      	str	r2, [sp, #0]
    3288:	9301      	str	r3, [sp, #4]
    328a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    328c:	2b00      	cmp	r3, #0
    328e:	d001      	beq.n	3294 <__udivmoddi4+0x8c>
    3290:	601c      	str	r4, [r3, #0]
    3292:	605d      	str	r5, [r3, #4]
    3294:	9800      	ldr	r0, [sp, #0]
    3296:	9901      	ldr	r1, [sp, #4]
    3298:	b003      	add	sp, #12
    329a:	bc3c      	pop	{r2, r3, r4, r5}
    329c:	4690      	mov	r8, r2
    329e:	4699      	mov	r9, r3
    32a0:	46a2      	mov	sl, r4
    32a2:	46ab      	mov	fp, r5
    32a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32a6:	42a3      	cmp	r3, r4
    32a8:	d9d6      	bls.n	3258 <__udivmoddi4+0x50>
    32aa:	2200      	movs	r2, #0
    32ac:	2300      	movs	r3, #0
    32ae:	9200      	str	r2, [sp, #0]
    32b0:	9301      	str	r3, [sp, #4]
    32b2:	4643      	mov	r3, r8
    32b4:	2b00      	cmp	r3, #0
    32b6:	d0e8      	beq.n	328a <__udivmoddi4+0x82>
    32b8:	07fb      	lsls	r3, r7, #31
    32ba:	0872      	lsrs	r2, r6, #1
    32bc:	431a      	orrs	r2, r3
    32be:	4646      	mov	r6, r8
    32c0:	087b      	lsrs	r3, r7, #1
    32c2:	e00e      	b.n	32e2 <__udivmoddi4+0xda>
    32c4:	42ab      	cmp	r3, r5
    32c6:	d101      	bne.n	32cc <__udivmoddi4+0xc4>
    32c8:	42a2      	cmp	r2, r4
    32ca:	d80c      	bhi.n	32e6 <__udivmoddi4+0xde>
    32cc:	1aa4      	subs	r4, r4, r2
    32ce:	419d      	sbcs	r5, r3
    32d0:	2001      	movs	r0, #1
    32d2:	1924      	adds	r4, r4, r4
    32d4:	416d      	adcs	r5, r5
    32d6:	2100      	movs	r1, #0
    32d8:	3e01      	subs	r6, #1
    32da:	1824      	adds	r4, r4, r0
    32dc:	414d      	adcs	r5, r1
    32de:	2e00      	cmp	r6, #0
    32e0:	d006      	beq.n	32f0 <__udivmoddi4+0xe8>
    32e2:	42ab      	cmp	r3, r5
    32e4:	d9ee      	bls.n	32c4 <__udivmoddi4+0xbc>
    32e6:	3e01      	subs	r6, #1
    32e8:	1924      	adds	r4, r4, r4
    32ea:	416d      	adcs	r5, r5
    32ec:	2e00      	cmp	r6, #0
    32ee:	d1f8      	bne.n	32e2 <__udivmoddi4+0xda>
    32f0:	465b      	mov	r3, fp
    32f2:	9800      	ldr	r0, [sp, #0]
    32f4:	9901      	ldr	r1, [sp, #4]
    32f6:	1900      	adds	r0, r0, r4
    32f8:	4169      	adcs	r1, r5
    32fa:	2b00      	cmp	r3, #0
    32fc:	db22      	blt.n	3344 <__udivmoddi4+0x13c>
    32fe:	002b      	movs	r3, r5
    3300:	465a      	mov	r2, fp
    3302:	40d3      	lsrs	r3, r2
    3304:	002a      	movs	r2, r5
    3306:	4644      	mov	r4, r8
    3308:	40e2      	lsrs	r2, r4
    330a:	001c      	movs	r4, r3
    330c:	465b      	mov	r3, fp
    330e:	0015      	movs	r5, r2
    3310:	2b00      	cmp	r3, #0
    3312:	db2c      	blt.n	336e <__udivmoddi4+0x166>
    3314:	0026      	movs	r6, r4
    3316:	409e      	lsls	r6, r3
    3318:	0033      	movs	r3, r6
    331a:	0026      	movs	r6, r4
    331c:	4647      	mov	r7, r8
    331e:	40be      	lsls	r6, r7
    3320:	0032      	movs	r2, r6
    3322:	1a80      	subs	r0, r0, r2
    3324:	4199      	sbcs	r1, r3
    3326:	9000      	str	r0, [sp, #0]
    3328:	9101      	str	r1, [sp, #4]
    332a:	e7ae      	b.n	328a <__udivmoddi4+0x82>
    332c:	4642      	mov	r2, r8
    332e:	2320      	movs	r3, #32
    3330:	1a9b      	subs	r3, r3, r2
    3332:	4652      	mov	r2, sl
    3334:	40da      	lsrs	r2, r3
    3336:	4641      	mov	r1, r8
    3338:	0013      	movs	r3, r2
    333a:	464a      	mov	r2, r9
    333c:	408a      	lsls	r2, r1
    333e:	0017      	movs	r7, r2
    3340:	431f      	orrs	r7, r3
    3342:	e782      	b.n	324a <__udivmoddi4+0x42>
    3344:	4642      	mov	r2, r8
    3346:	2320      	movs	r3, #32
    3348:	1a9b      	subs	r3, r3, r2
    334a:	002a      	movs	r2, r5
    334c:	4646      	mov	r6, r8
    334e:	409a      	lsls	r2, r3
    3350:	0023      	movs	r3, r4
    3352:	40f3      	lsrs	r3, r6
    3354:	4313      	orrs	r3, r2
    3356:	e7d5      	b.n	3304 <__udivmoddi4+0xfc>
    3358:	4642      	mov	r2, r8
    335a:	2320      	movs	r3, #32
    335c:	2100      	movs	r1, #0
    335e:	1a9b      	subs	r3, r3, r2
    3360:	2200      	movs	r2, #0
    3362:	9100      	str	r1, [sp, #0]
    3364:	9201      	str	r2, [sp, #4]
    3366:	2201      	movs	r2, #1
    3368:	40da      	lsrs	r2, r3
    336a:	9201      	str	r2, [sp, #4]
    336c:	e782      	b.n	3274 <__udivmoddi4+0x6c>
    336e:	4642      	mov	r2, r8
    3370:	2320      	movs	r3, #32
    3372:	0026      	movs	r6, r4
    3374:	1a9b      	subs	r3, r3, r2
    3376:	40de      	lsrs	r6, r3
    3378:	002f      	movs	r7, r5
    337a:	46b4      	mov	ip, r6
    337c:	4097      	lsls	r7, r2
    337e:	4666      	mov	r6, ip
    3380:	003b      	movs	r3, r7
    3382:	4333      	orrs	r3, r6
    3384:	e7c9      	b.n	331a <__udivmoddi4+0x112>
    3386:	46c0      	nop			; (mov r8, r8)

00003388 <__aeabi_fdiv>:
    3388:	b5f0      	push	{r4, r5, r6, r7, lr}
    338a:	4657      	mov	r7, sl
    338c:	464e      	mov	r6, r9
    338e:	46de      	mov	lr, fp
    3390:	4645      	mov	r5, r8
    3392:	b5e0      	push	{r5, r6, r7, lr}
    3394:	0244      	lsls	r4, r0, #9
    3396:	0043      	lsls	r3, r0, #1
    3398:	0fc6      	lsrs	r6, r0, #31
    339a:	b083      	sub	sp, #12
    339c:	1c0f      	adds	r7, r1, #0
    339e:	0a64      	lsrs	r4, r4, #9
    33a0:	0e1b      	lsrs	r3, r3, #24
    33a2:	46b2      	mov	sl, r6
    33a4:	d053      	beq.n	344e <__aeabi_fdiv+0xc6>
    33a6:	2bff      	cmp	r3, #255	; 0xff
    33a8:	d027      	beq.n	33fa <__aeabi_fdiv+0x72>
    33aa:	2280      	movs	r2, #128	; 0x80
    33ac:	00e4      	lsls	r4, r4, #3
    33ae:	04d2      	lsls	r2, r2, #19
    33b0:	4314      	orrs	r4, r2
    33b2:	227f      	movs	r2, #127	; 0x7f
    33b4:	4252      	negs	r2, r2
    33b6:	4690      	mov	r8, r2
    33b8:	4498      	add	r8, r3
    33ba:	2300      	movs	r3, #0
    33bc:	4699      	mov	r9, r3
    33be:	469b      	mov	fp, r3
    33c0:	027d      	lsls	r5, r7, #9
    33c2:	0078      	lsls	r0, r7, #1
    33c4:	0ffb      	lsrs	r3, r7, #31
    33c6:	0a6d      	lsrs	r5, r5, #9
    33c8:	0e00      	lsrs	r0, r0, #24
    33ca:	9300      	str	r3, [sp, #0]
    33cc:	d024      	beq.n	3418 <__aeabi_fdiv+0x90>
    33ce:	28ff      	cmp	r0, #255	; 0xff
    33d0:	d046      	beq.n	3460 <__aeabi_fdiv+0xd8>
    33d2:	2380      	movs	r3, #128	; 0x80
    33d4:	2100      	movs	r1, #0
    33d6:	00ed      	lsls	r5, r5, #3
    33d8:	04db      	lsls	r3, r3, #19
    33da:	431d      	orrs	r5, r3
    33dc:	387f      	subs	r0, #127	; 0x7f
    33de:	4647      	mov	r7, r8
    33e0:	1a38      	subs	r0, r7, r0
    33e2:	464f      	mov	r7, r9
    33e4:	430f      	orrs	r7, r1
    33e6:	00bf      	lsls	r7, r7, #2
    33e8:	46b9      	mov	r9, r7
    33ea:	0033      	movs	r3, r6
    33ec:	9a00      	ldr	r2, [sp, #0]
    33ee:	4f87      	ldr	r7, [pc, #540]	; (360c <__aeabi_fdiv+0x284>)
    33f0:	4053      	eors	r3, r2
    33f2:	464a      	mov	r2, r9
    33f4:	58ba      	ldr	r2, [r7, r2]
    33f6:	9301      	str	r3, [sp, #4]
    33f8:	4697      	mov	pc, r2
    33fa:	2c00      	cmp	r4, #0
    33fc:	d14e      	bne.n	349c <__aeabi_fdiv+0x114>
    33fe:	2308      	movs	r3, #8
    3400:	4699      	mov	r9, r3
    3402:	33f7      	adds	r3, #247	; 0xf7
    3404:	4698      	mov	r8, r3
    3406:	3bfd      	subs	r3, #253	; 0xfd
    3408:	469b      	mov	fp, r3
    340a:	027d      	lsls	r5, r7, #9
    340c:	0078      	lsls	r0, r7, #1
    340e:	0ffb      	lsrs	r3, r7, #31
    3410:	0a6d      	lsrs	r5, r5, #9
    3412:	0e00      	lsrs	r0, r0, #24
    3414:	9300      	str	r3, [sp, #0]
    3416:	d1da      	bne.n	33ce <__aeabi_fdiv+0x46>
    3418:	2d00      	cmp	r5, #0
    341a:	d126      	bne.n	346a <__aeabi_fdiv+0xe2>
    341c:	2000      	movs	r0, #0
    341e:	2101      	movs	r1, #1
    3420:	0033      	movs	r3, r6
    3422:	9a00      	ldr	r2, [sp, #0]
    3424:	4f7a      	ldr	r7, [pc, #488]	; (3610 <__aeabi_fdiv+0x288>)
    3426:	4053      	eors	r3, r2
    3428:	4642      	mov	r2, r8
    342a:	1a10      	subs	r0, r2, r0
    342c:	464a      	mov	r2, r9
    342e:	430a      	orrs	r2, r1
    3430:	0092      	lsls	r2, r2, #2
    3432:	58ba      	ldr	r2, [r7, r2]
    3434:	001d      	movs	r5, r3
    3436:	4697      	mov	pc, r2
    3438:	9b00      	ldr	r3, [sp, #0]
    343a:	002c      	movs	r4, r5
    343c:	469a      	mov	sl, r3
    343e:	468b      	mov	fp, r1
    3440:	465b      	mov	r3, fp
    3442:	2b02      	cmp	r3, #2
    3444:	d131      	bne.n	34aa <__aeabi_fdiv+0x122>
    3446:	4653      	mov	r3, sl
    3448:	21ff      	movs	r1, #255	; 0xff
    344a:	2400      	movs	r4, #0
    344c:	e038      	b.n	34c0 <__aeabi_fdiv+0x138>
    344e:	2c00      	cmp	r4, #0
    3450:	d117      	bne.n	3482 <__aeabi_fdiv+0xfa>
    3452:	2304      	movs	r3, #4
    3454:	4699      	mov	r9, r3
    3456:	2300      	movs	r3, #0
    3458:	4698      	mov	r8, r3
    345a:	3301      	adds	r3, #1
    345c:	469b      	mov	fp, r3
    345e:	e7af      	b.n	33c0 <__aeabi_fdiv+0x38>
    3460:	20ff      	movs	r0, #255	; 0xff
    3462:	2d00      	cmp	r5, #0
    3464:	d10b      	bne.n	347e <__aeabi_fdiv+0xf6>
    3466:	2102      	movs	r1, #2
    3468:	e7da      	b.n	3420 <__aeabi_fdiv+0x98>
    346a:	0028      	movs	r0, r5
    346c:	f001 f85a 	bl	4524 <__clzsi2>
    3470:	1f43      	subs	r3, r0, #5
    3472:	409d      	lsls	r5, r3
    3474:	2376      	movs	r3, #118	; 0x76
    3476:	425b      	negs	r3, r3
    3478:	1a18      	subs	r0, r3, r0
    347a:	2100      	movs	r1, #0
    347c:	e7af      	b.n	33de <__aeabi_fdiv+0x56>
    347e:	2103      	movs	r1, #3
    3480:	e7ad      	b.n	33de <__aeabi_fdiv+0x56>
    3482:	0020      	movs	r0, r4
    3484:	f001 f84e 	bl	4524 <__clzsi2>
    3488:	1f43      	subs	r3, r0, #5
    348a:	409c      	lsls	r4, r3
    348c:	2376      	movs	r3, #118	; 0x76
    348e:	425b      	negs	r3, r3
    3490:	1a1b      	subs	r3, r3, r0
    3492:	4698      	mov	r8, r3
    3494:	2300      	movs	r3, #0
    3496:	4699      	mov	r9, r3
    3498:	469b      	mov	fp, r3
    349a:	e791      	b.n	33c0 <__aeabi_fdiv+0x38>
    349c:	230c      	movs	r3, #12
    349e:	4699      	mov	r9, r3
    34a0:	33f3      	adds	r3, #243	; 0xf3
    34a2:	4698      	mov	r8, r3
    34a4:	3bfc      	subs	r3, #252	; 0xfc
    34a6:	469b      	mov	fp, r3
    34a8:	e78a      	b.n	33c0 <__aeabi_fdiv+0x38>
    34aa:	2b03      	cmp	r3, #3
    34ac:	d100      	bne.n	34b0 <__aeabi_fdiv+0x128>
    34ae:	e0a5      	b.n	35fc <__aeabi_fdiv+0x274>
    34b0:	4655      	mov	r5, sl
    34b2:	2b01      	cmp	r3, #1
    34b4:	d000      	beq.n	34b8 <__aeabi_fdiv+0x130>
    34b6:	e081      	b.n	35bc <__aeabi_fdiv+0x234>
    34b8:	2301      	movs	r3, #1
    34ba:	2100      	movs	r1, #0
    34bc:	2400      	movs	r4, #0
    34be:	402b      	ands	r3, r5
    34c0:	0264      	lsls	r4, r4, #9
    34c2:	05c9      	lsls	r1, r1, #23
    34c4:	0a60      	lsrs	r0, r4, #9
    34c6:	07db      	lsls	r3, r3, #31
    34c8:	4308      	orrs	r0, r1
    34ca:	4318      	orrs	r0, r3
    34cc:	b003      	add	sp, #12
    34ce:	bc3c      	pop	{r2, r3, r4, r5}
    34d0:	4690      	mov	r8, r2
    34d2:	4699      	mov	r9, r3
    34d4:	46a2      	mov	sl, r4
    34d6:	46ab      	mov	fp, r5
    34d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34da:	2480      	movs	r4, #128	; 0x80
    34dc:	2300      	movs	r3, #0
    34de:	03e4      	lsls	r4, r4, #15
    34e0:	21ff      	movs	r1, #255	; 0xff
    34e2:	e7ed      	b.n	34c0 <__aeabi_fdiv+0x138>
    34e4:	21ff      	movs	r1, #255	; 0xff
    34e6:	2400      	movs	r4, #0
    34e8:	e7ea      	b.n	34c0 <__aeabi_fdiv+0x138>
    34ea:	2301      	movs	r3, #1
    34ec:	1a59      	subs	r1, r3, r1
    34ee:	291b      	cmp	r1, #27
    34f0:	dd66      	ble.n	35c0 <__aeabi_fdiv+0x238>
    34f2:	9a01      	ldr	r2, [sp, #4]
    34f4:	4013      	ands	r3, r2
    34f6:	2100      	movs	r1, #0
    34f8:	2400      	movs	r4, #0
    34fa:	e7e1      	b.n	34c0 <__aeabi_fdiv+0x138>
    34fc:	2380      	movs	r3, #128	; 0x80
    34fe:	03db      	lsls	r3, r3, #15
    3500:	421c      	tst	r4, r3
    3502:	d038      	beq.n	3576 <__aeabi_fdiv+0x1ee>
    3504:	421d      	tst	r5, r3
    3506:	d051      	beq.n	35ac <__aeabi_fdiv+0x224>
    3508:	431c      	orrs	r4, r3
    350a:	0264      	lsls	r4, r4, #9
    350c:	0a64      	lsrs	r4, r4, #9
    350e:	0033      	movs	r3, r6
    3510:	21ff      	movs	r1, #255	; 0xff
    3512:	e7d5      	b.n	34c0 <__aeabi_fdiv+0x138>
    3514:	0163      	lsls	r3, r4, #5
    3516:	016c      	lsls	r4, r5, #5
    3518:	42a3      	cmp	r3, r4
    351a:	d23b      	bcs.n	3594 <__aeabi_fdiv+0x20c>
    351c:	261b      	movs	r6, #27
    351e:	2100      	movs	r1, #0
    3520:	3801      	subs	r0, #1
    3522:	2501      	movs	r5, #1
    3524:	001f      	movs	r7, r3
    3526:	0049      	lsls	r1, r1, #1
    3528:	005b      	lsls	r3, r3, #1
    352a:	2f00      	cmp	r7, #0
    352c:	db01      	blt.n	3532 <__aeabi_fdiv+0x1aa>
    352e:	429c      	cmp	r4, r3
    3530:	d801      	bhi.n	3536 <__aeabi_fdiv+0x1ae>
    3532:	1b1b      	subs	r3, r3, r4
    3534:	4329      	orrs	r1, r5
    3536:	3e01      	subs	r6, #1
    3538:	2e00      	cmp	r6, #0
    353a:	d1f3      	bne.n	3524 <__aeabi_fdiv+0x19c>
    353c:	001c      	movs	r4, r3
    353e:	1e63      	subs	r3, r4, #1
    3540:	419c      	sbcs	r4, r3
    3542:	430c      	orrs	r4, r1
    3544:	0001      	movs	r1, r0
    3546:	317f      	adds	r1, #127	; 0x7f
    3548:	2900      	cmp	r1, #0
    354a:	ddce      	ble.n	34ea <__aeabi_fdiv+0x162>
    354c:	0763      	lsls	r3, r4, #29
    354e:	d004      	beq.n	355a <__aeabi_fdiv+0x1d2>
    3550:	230f      	movs	r3, #15
    3552:	4023      	ands	r3, r4
    3554:	2b04      	cmp	r3, #4
    3556:	d000      	beq.n	355a <__aeabi_fdiv+0x1d2>
    3558:	3404      	adds	r4, #4
    355a:	0123      	lsls	r3, r4, #4
    355c:	d503      	bpl.n	3566 <__aeabi_fdiv+0x1de>
    355e:	0001      	movs	r1, r0
    3560:	4b2c      	ldr	r3, [pc, #176]	; (3614 <__aeabi_fdiv+0x28c>)
    3562:	3180      	adds	r1, #128	; 0x80
    3564:	401c      	ands	r4, r3
    3566:	29fe      	cmp	r1, #254	; 0xfe
    3568:	dd0d      	ble.n	3586 <__aeabi_fdiv+0x1fe>
    356a:	2301      	movs	r3, #1
    356c:	9a01      	ldr	r2, [sp, #4]
    356e:	21ff      	movs	r1, #255	; 0xff
    3570:	4013      	ands	r3, r2
    3572:	2400      	movs	r4, #0
    3574:	e7a4      	b.n	34c0 <__aeabi_fdiv+0x138>
    3576:	2380      	movs	r3, #128	; 0x80
    3578:	03db      	lsls	r3, r3, #15
    357a:	431c      	orrs	r4, r3
    357c:	0264      	lsls	r4, r4, #9
    357e:	0a64      	lsrs	r4, r4, #9
    3580:	0033      	movs	r3, r6
    3582:	21ff      	movs	r1, #255	; 0xff
    3584:	e79c      	b.n	34c0 <__aeabi_fdiv+0x138>
    3586:	2301      	movs	r3, #1
    3588:	9a01      	ldr	r2, [sp, #4]
    358a:	01a4      	lsls	r4, r4, #6
    358c:	0a64      	lsrs	r4, r4, #9
    358e:	b2c9      	uxtb	r1, r1
    3590:	4013      	ands	r3, r2
    3592:	e795      	b.n	34c0 <__aeabi_fdiv+0x138>
    3594:	1b1b      	subs	r3, r3, r4
    3596:	261a      	movs	r6, #26
    3598:	2101      	movs	r1, #1
    359a:	e7c2      	b.n	3522 <__aeabi_fdiv+0x19a>
    359c:	9b00      	ldr	r3, [sp, #0]
    359e:	468b      	mov	fp, r1
    35a0:	469a      	mov	sl, r3
    35a2:	2400      	movs	r4, #0
    35a4:	e74c      	b.n	3440 <__aeabi_fdiv+0xb8>
    35a6:	0263      	lsls	r3, r4, #9
    35a8:	d5e5      	bpl.n	3576 <__aeabi_fdiv+0x1ee>
    35aa:	2500      	movs	r5, #0
    35ac:	2480      	movs	r4, #128	; 0x80
    35ae:	03e4      	lsls	r4, r4, #15
    35b0:	432c      	orrs	r4, r5
    35b2:	0264      	lsls	r4, r4, #9
    35b4:	0a64      	lsrs	r4, r4, #9
    35b6:	9b00      	ldr	r3, [sp, #0]
    35b8:	21ff      	movs	r1, #255	; 0xff
    35ba:	e781      	b.n	34c0 <__aeabi_fdiv+0x138>
    35bc:	9501      	str	r5, [sp, #4]
    35be:	e7c1      	b.n	3544 <__aeabi_fdiv+0x1bc>
    35c0:	0023      	movs	r3, r4
    35c2:	2020      	movs	r0, #32
    35c4:	40cb      	lsrs	r3, r1
    35c6:	1a41      	subs	r1, r0, r1
    35c8:	408c      	lsls	r4, r1
    35ca:	1e61      	subs	r1, r4, #1
    35cc:	418c      	sbcs	r4, r1
    35ce:	431c      	orrs	r4, r3
    35d0:	0763      	lsls	r3, r4, #29
    35d2:	d004      	beq.n	35de <__aeabi_fdiv+0x256>
    35d4:	230f      	movs	r3, #15
    35d6:	4023      	ands	r3, r4
    35d8:	2b04      	cmp	r3, #4
    35da:	d000      	beq.n	35de <__aeabi_fdiv+0x256>
    35dc:	3404      	adds	r4, #4
    35de:	0163      	lsls	r3, r4, #5
    35e0:	d505      	bpl.n	35ee <__aeabi_fdiv+0x266>
    35e2:	2301      	movs	r3, #1
    35e4:	9a01      	ldr	r2, [sp, #4]
    35e6:	2101      	movs	r1, #1
    35e8:	4013      	ands	r3, r2
    35ea:	2400      	movs	r4, #0
    35ec:	e768      	b.n	34c0 <__aeabi_fdiv+0x138>
    35ee:	2301      	movs	r3, #1
    35f0:	9a01      	ldr	r2, [sp, #4]
    35f2:	01a4      	lsls	r4, r4, #6
    35f4:	0a64      	lsrs	r4, r4, #9
    35f6:	4013      	ands	r3, r2
    35f8:	2100      	movs	r1, #0
    35fa:	e761      	b.n	34c0 <__aeabi_fdiv+0x138>
    35fc:	2380      	movs	r3, #128	; 0x80
    35fe:	03db      	lsls	r3, r3, #15
    3600:	431c      	orrs	r4, r3
    3602:	0264      	lsls	r4, r4, #9
    3604:	0a64      	lsrs	r4, r4, #9
    3606:	4653      	mov	r3, sl
    3608:	21ff      	movs	r1, #255	; 0xff
    360a:	e759      	b.n	34c0 <__aeabi_fdiv+0x138>
    360c:	00004ba8 	.word	0x00004ba8
    3610:	00004be8 	.word	0x00004be8
    3614:	f7ffffff 	.word	0xf7ffffff

00003618 <__aeabi_fmul>:
    3618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    361a:	4657      	mov	r7, sl
    361c:	464e      	mov	r6, r9
    361e:	4645      	mov	r5, r8
    3620:	46de      	mov	lr, fp
    3622:	b5e0      	push	{r5, r6, r7, lr}
    3624:	0247      	lsls	r7, r0, #9
    3626:	0046      	lsls	r6, r0, #1
    3628:	4688      	mov	r8, r1
    362a:	0a7f      	lsrs	r7, r7, #9
    362c:	0e36      	lsrs	r6, r6, #24
    362e:	0fc4      	lsrs	r4, r0, #31
    3630:	2e00      	cmp	r6, #0
    3632:	d047      	beq.n	36c4 <__aeabi_fmul+0xac>
    3634:	2eff      	cmp	r6, #255	; 0xff
    3636:	d024      	beq.n	3682 <__aeabi_fmul+0x6a>
    3638:	00fb      	lsls	r3, r7, #3
    363a:	2780      	movs	r7, #128	; 0x80
    363c:	04ff      	lsls	r7, r7, #19
    363e:	431f      	orrs	r7, r3
    3640:	2300      	movs	r3, #0
    3642:	4699      	mov	r9, r3
    3644:	469a      	mov	sl, r3
    3646:	3e7f      	subs	r6, #127	; 0x7f
    3648:	4643      	mov	r3, r8
    364a:	025d      	lsls	r5, r3, #9
    364c:	0058      	lsls	r0, r3, #1
    364e:	0fdb      	lsrs	r3, r3, #31
    3650:	0a6d      	lsrs	r5, r5, #9
    3652:	0e00      	lsrs	r0, r0, #24
    3654:	4698      	mov	r8, r3
    3656:	d043      	beq.n	36e0 <__aeabi_fmul+0xc8>
    3658:	28ff      	cmp	r0, #255	; 0xff
    365a:	d03b      	beq.n	36d4 <__aeabi_fmul+0xbc>
    365c:	00eb      	lsls	r3, r5, #3
    365e:	2580      	movs	r5, #128	; 0x80
    3660:	2200      	movs	r2, #0
    3662:	04ed      	lsls	r5, r5, #19
    3664:	431d      	orrs	r5, r3
    3666:	387f      	subs	r0, #127	; 0x7f
    3668:	1836      	adds	r6, r6, r0
    366a:	1c73      	adds	r3, r6, #1
    366c:	4641      	mov	r1, r8
    366e:	469b      	mov	fp, r3
    3670:	464b      	mov	r3, r9
    3672:	4061      	eors	r1, r4
    3674:	4313      	orrs	r3, r2
    3676:	2b0f      	cmp	r3, #15
    3678:	d864      	bhi.n	3744 <__aeabi_fmul+0x12c>
    367a:	4875      	ldr	r0, [pc, #468]	; (3850 <__aeabi_fmul+0x238>)
    367c:	009b      	lsls	r3, r3, #2
    367e:	58c3      	ldr	r3, [r0, r3]
    3680:	469f      	mov	pc, r3
    3682:	2f00      	cmp	r7, #0
    3684:	d142      	bne.n	370c <__aeabi_fmul+0xf4>
    3686:	2308      	movs	r3, #8
    3688:	4699      	mov	r9, r3
    368a:	3b06      	subs	r3, #6
    368c:	26ff      	movs	r6, #255	; 0xff
    368e:	469a      	mov	sl, r3
    3690:	e7da      	b.n	3648 <__aeabi_fmul+0x30>
    3692:	4641      	mov	r1, r8
    3694:	2a02      	cmp	r2, #2
    3696:	d028      	beq.n	36ea <__aeabi_fmul+0xd2>
    3698:	2a03      	cmp	r2, #3
    369a:	d100      	bne.n	369e <__aeabi_fmul+0x86>
    369c:	e0ce      	b.n	383c <__aeabi_fmul+0x224>
    369e:	2a01      	cmp	r2, #1
    36a0:	d000      	beq.n	36a4 <__aeabi_fmul+0x8c>
    36a2:	e0ac      	b.n	37fe <__aeabi_fmul+0x1e6>
    36a4:	4011      	ands	r1, r2
    36a6:	2000      	movs	r0, #0
    36a8:	2200      	movs	r2, #0
    36aa:	b2cc      	uxtb	r4, r1
    36ac:	0240      	lsls	r0, r0, #9
    36ae:	05d2      	lsls	r2, r2, #23
    36b0:	0a40      	lsrs	r0, r0, #9
    36b2:	07e4      	lsls	r4, r4, #31
    36b4:	4310      	orrs	r0, r2
    36b6:	4320      	orrs	r0, r4
    36b8:	bc3c      	pop	{r2, r3, r4, r5}
    36ba:	4690      	mov	r8, r2
    36bc:	4699      	mov	r9, r3
    36be:	46a2      	mov	sl, r4
    36c0:	46ab      	mov	fp, r5
    36c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36c4:	2f00      	cmp	r7, #0
    36c6:	d115      	bne.n	36f4 <__aeabi_fmul+0xdc>
    36c8:	2304      	movs	r3, #4
    36ca:	4699      	mov	r9, r3
    36cc:	3b03      	subs	r3, #3
    36ce:	2600      	movs	r6, #0
    36d0:	469a      	mov	sl, r3
    36d2:	e7b9      	b.n	3648 <__aeabi_fmul+0x30>
    36d4:	20ff      	movs	r0, #255	; 0xff
    36d6:	2202      	movs	r2, #2
    36d8:	2d00      	cmp	r5, #0
    36da:	d0c5      	beq.n	3668 <__aeabi_fmul+0x50>
    36dc:	2203      	movs	r2, #3
    36de:	e7c3      	b.n	3668 <__aeabi_fmul+0x50>
    36e0:	2d00      	cmp	r5, #0
    36e2:	d119      	bne.n	3718 <__aeabi_fmul+0x100>
    36e4:	2000      	movs	r0, #0
    36e6:	2201      	movs	r2, #1
    36e8:	e7be      	b.n	3668 <__aeabi_fmul+0x50>
    36ea:	2401      	movs	r4, #1
    36ec:	22ff      	movs	r2, #255	; 0xff
    36ee:	400c      	ands	r4, r1
    36f0:	2000      	movs	r0, #0
    36f2:	e7db      	b.n	36ac <__aeabi_fmul+0x94>
    36f4:	0038      	movs	r0, r7
    36f6:	f000 ff15 	bl	4524 <__clzsi2>
    36fa:	2676      	movs	r6, #118	; 0x76
    36fc:	1f43      	subs	r3, r0, #5
    36fe:	409f      	lsls	r7, r3
    3700:	2300      	movs	r3, #0
    3702:	4276      	negs	r6, r6
    3704:	1a36      	subs	r6, r6, r0
    3706:	4699      	mov	r9, r3
    3708:	469a      	mov	sl, r3
    370a:	e79d      	b.n	3648 <__aeabi_fmul+0x30>
    370c:	230c      	movs	r3, #12
    370e:	4699      	mov	r9, r3
    3710:	3b09      	subs	r3, #9
    3712:	26ff      	movs	r6, #255	; 0xff
    3714:	469a      	mov	sl, r3
    3716:	e797      	b.n	3648 <__aeabi_fmul+0x30>
    3718:	0028      	movs	r0, r5
    371a:	f000 ff03 	bl	4524 <__clzsi2>
    371e:	1f43      	subs	r3, r0, #5
    3720:	409d      	lsls	r5, r3
    3722:	2376      	movs	r3, #118	; 0x76
    3724:	425b      	negs	r3, r3
    3726:	1a18      	subs	r0, r3, r0
    3728:	2200      	movs	r2, #0
    372a:	e79d      	b.n	3668 <__aeabi_fmul+0x50>
    372c:	2080      	movs	r0, #128	; 0x80
    372e:	2400      	movs	r4, #0
    3730:	03c0      	lsls	r0, r0, #15
    3732:	22ff      	movs	r2, #255	; 0xff
    3734:	e7ba      	b.n	36ac <__aeabi_fmul+0x94>
    3736:	003d      	movs	r5, r7
    3738:	4652      	mov	r2, sl
    373a:	e7ab      	b.n	3694 <__aeabi_fmul+0x7c>
    373c:	003d      	movs	r5, r7
    373e:	0021      	movs	r1, r4
    3740:	4652      	mov	r2, sl
    3742:	e7a7      	b.n	3694 <__aeabi_fmul+0x7c>
    3744:	0c3b      	lsrs	r3, r7, #16
    3746:	469c      	mov	ip, r3
    3748:	042a      	lsls	r2, r5, #16
    374a:	0c12      	lsrs	r2, r2, #16
    374c:	0c2b      	lsrs	r3, r5, #16
    374e:	0014      	movs	r4, r2
    3750:	4660      	mov	r0, ip
    3752:	4665      	mov	r5, ip
    3754:	043f      	lsls	r7, r7, #16
    3756:	0c3f      	lsrs	r7, r7, #16
    3758:	437c      	muls	r4, r7
    375a:	4342      	muls	r2, r0
    375c:	435d      	muls	r5, r3
    375e:	437b      	muls	r3, r7
    3760:	0c27      	lsrs	r7, r4, #16
    3762:	189b      	adds	r3, r3, r2
    3764:	18ff      	adds	r7, r7, r3
    3766:	42ba      	cmp	r2, r7
    3768:	d903      	bls.n	3772 <__aeabi_fmul+0x15a>
    376a:	2380      	movs	r3, #128	; 0x80
    376c:	025b      	lsls	r3, r3, #9
    376e:	469c      	mov	ip, r3
    3770:	4465      	add	r5, ip
    3772:	0424      	lsls	r4, r4, #16
    3774:	043a      	lsls	r2, r7, #16
    3776:	0c24      	lsrs	r4, r4, #16
    3778:	1912      	adds	r2, r2, r4
    377a:	0193      	lsls	r3, r2, #6
    377c:	1e5c      	subs	r4, r3, #1
    377e:	41a3      	sbcs	r3, r4
    3780:	0c3f      	lsrs	r7, r7, #16
    3782:	0e92      	lsrs	r2, r2, #26
    3784:	197d      	adds	r5, r7, r5
    3786:	431a      	orrs	r2, r3
    3788:	01ad      	lsls	r5, r5, #6
    378a:	4315      	orrs	r5, r2
    378c:	012b      	lsls	r3, r5, #4
    378e:	d504      	bpl.n	379a <__aeabi_fmul+0x182>
    3790:	2301      	movs	r3, #1
    3792:	465e      	mov	r6, fp
    3794:	086a      	lsrs	r2, r5, #1
    3796:	401d      	ands	r5, r3
    3798:	4315      	orrs	r5, r2
    379a:	0032      	movs	r2, r6
    379c:	327f      	adds	r2, #127	; 0x7f
    379e:	2a00      	cmp	r2, #0
    37a0:	dd25      	ble.n	37ee <__aeabi_fmul+0x1d6>
    37a2:	076b      	lsls	r3, r5, #29
    37a4:	d004      	beq.n	37b0 <__aeabi_fmul+0x198>
    37a6:	230f      	movs	r3, #15
    37a8:	402b      	ands	r3, r5
    37aa:	2b04      	cmp	r3, #4
    37ac:	d000      	beq.n	37b0 <__aeabi_fmul+0x198>
    37ae:	3504      	adds	r5, #4
    37b0:	012b      	lsls	r3, r5, #4
    37b2:	d503      	bpl.n	37bc <__aeabi_fmul+0x1a4>
    37b4:	0032      	movs	r2, r6
    37b6:	4b27      	ldr	r3, [pc, #156]	; (3854 <__aeabi_fmul+0x23c>)
    37b8:	3280      	adds	r2, #128	; 0x80
    37ba:	401d      	ands	r5, r3
    37bc:	2afe      	cmp	r2, #254	; 0xfe
    37be:	dc94      	bgt.n	36ea <__aeabi_fmul+0xd2>
    37c0:	2401      	movs	r4, #1
    37c2:	01a8      	lsls	r0, r5, #6
    37c4:	0a40      	lsrs	r0, r0, #9
    37c6:	b2d2      	uxtb	r2, r2
    37c8:	400c      	ands	r4, r1
    37ca:	e76f      	b.n	36ac <__aeabi_fmul+0x94>
    37cc:	2080      	movs	r0, #128	; 0x80
    37ce:	03c0      	lsls	r0, r0, #15
    37d0:	4207      	tst	r7, r0
    37d2:	d007      	beq.n	37e4 <__aeabi_fmul+0x1cc>
    37d4:	4205      	tst	r5, r0
    37d6:	d105      	bne.n	37e4 <__aeabi_fmul+0x1cc>
    37d8:	4328      	orrs	r0, r5
    37da:	0240      	lsls	r0, r0, #9
    37dc:	0a40      	lsrs	r0, r0, #9
    37de:	4644      	mov	r4, r8
    37e0:	22ff      	movs	r2, #255	; 0xff
    37e2:	e763      	b.n	36ac <__aeabi_fmul+0x94>
    37e4:	4338      	orrs	r0, r7
    37e6:	0240      	lsls	r0, r0, #9
    37e8:	0a40      	lsrs	r0, r0, #9
    37ea:	22ff      	movs	r2, #255	; 0xff
    37ec:	e75e      	b.n	36ac <__aeabi_fmul+0x94>
    37ee:	2401      	movs	r4, #1
    37f0:	1aa3      	subs	r3, r4, r2
    37f2:	2b1b      	cmp	r3, #27
    37f4:	dd05      	ble.n	3802 <__aeabi_fmul+0x1ea>
    37f6:	400c      	ands	r4, r1
    37f8:	2200      	movs	r2, #0
    37fa:	2000      	movs	r0, #0
    37fc:	e756      	b.n	36ac <__aeabi_fmul+0x94>
    37fe:	465e      	mov	r6, fp
    3800:	e7cb      	b.n	379a <__aeabi_fmul+0x182>
    3802:	002a      	movs	r2, r5
    3804:	2020      	movs	r0, #32
    3806:	40da      	lsrs	r2, r3
    3808:	1ac3      	subs	r3, r0, r3
    380a:	409d      	lsls	r5, r3
    380c:	002b      	movs	r3, r5
    380e:	1e5d      	subs	r5, r3, #1
    3810:	41ab      	sbcs	r3, r5
    3812:	4313      	orrs	r3, r2
    3814:	075a      	lsls	r2, r3, #29
    3816:	d004      	beq.n	3822 <__aeabi_fmul+0x20a>
    3818:	220f      	movs	r2, #15
    381a:	401a      	ands	r2, r3
    381c:	2a04      	cmp	r2, #4
    381e:	d000      	beq.n	3822 <__aeabi_fmul+0x20a>
    3820:	3304      	adds	r3, #4
    3822:	015a      	lsls	r2, r3, #5
    3824:	d504      	bpl.n	3830 <__aeabi_fmul+0x218>
    3826:	2401      	movs	r4, #1
    3828:	2201      	movs	r2, #1
    382a:	400c      	ands	r4, r1
    382c:	2000      	movs	r0, #0
    382e:	e73d      	b.n	36ac <__aeabi_fmul+0x94>
    3830:	2401      	movs	r4, #1
    3832:	019b      	lsls	r3, r3, #6
    3834:	0a58      	lsrs	r0, r3, #9
    3836:	400c      	ands	r4, r1
    3838:	2200      	movs	r2, #0
    383a:	e737      	b.n	36ac <__aeabi_fmul+0x94>
    383c:	2080      	movs	r0, #128	; 0x80
    383e:	2401      	movs	r4, #1
    3840:	03c0      	lsls	r0, r0, #15
    3842:	4328      	orrs	r0, r5
    3844:	0240      	lsls	r0, r0, #9
    3846:	0a40      	lsrs	r0, r0, #9
    3848:	400c      	ands	r4, r1
    384a:	22ff      	movs	r2, #255	; 0xff
    384c:	e72e      	b.n	36ac <__aeabi_fmul+0x94>
    384e:	46c0      	nop			; (mov r8, r8)
    3850:	00004c28 	.word	0x00004c28
    3854:	f7ffffff 	.word	0xf7ffffff

00003858 <__aeabi_ui2f>:
    3858:	b510      	push	{r4, lr}
    385a:	1e04      	subs	r4, r0, #0
    385c:	d027      	beq.n	38ae <__aeabi_ui2f+0x56>
    385e:	f000 fe61 	bl	4524 <__clzsi2>
    3862:	239e      	movs	r3, #158	; 0x9e
    3864:	1a1b      	subs	r3, r3, r0
    3866:	2b96      	cmp	r3, #150	; 0x96
    3868:	dc0a      	bgt.n	3880 <__aeabi_ui2f+0x28>
    386a:	2296      	movs	r2, #150	; 0x96
    386c:	1ad2      	subs	r2, r2, r3
    386e:	4094      	lsls	r4, r2
    3870:	0264      	lsls	r4, r4, #9
    3872:	0a64      	lsrs	r4, r4, #9
    3874:	b2db      	uxtb	r3, r3
    3876:	0264      	lsls	r4, r4, #9
    3878:	05db      	lsls	r3, r3, #23
    387a:	0a60      	lsrs	r0, r4, #9
    387c:	4318      	orrs	r0, r3
    387e:	bd10      	pop	{r4, pc}
    3880:	2b99      	cmp	r3, #153	; 0x99
    3882:	dc17      	bgt.n	38b4 <__aeabi_ui2f+0x5c>
    3884:	2299      	movs	r2, #153	; 0x99
    3886:	1ad2      	subs	r2, r2, r3
    3888:	2a00      	cmp	r2, #0
    388a:	dd27      	ble.n	38dc <__aeabi_ui2f+0x84>
    388c:	4094      	lsls	r4, r2
    388e:	0022      	movs	r2, r4
    3890:	4c13      	ldr	r4, [pc, #76]	; (38e0 <__aeabi_ui2f+0x88>)
    3892:	4014      	ands	r4, r2
    3894:	0751      	lsls	r1, r2, #29
    3896:	d004      	beq.n	38a2 <__aeabi_ui2f+0x4a>
    3898:	210f      	movs	r1, #15
    389a:	400a      	ands	r2, r1
    389c:	2a04      	cmp	r2, #4
    389e:	d000      	beq.n	38a2 <__aeabi_ui2f+0x4a>
    38a0:	3404      	adds	r4, #4
    38a2:	0162      	lsls	r2, r4, #5
    38a4:	d412      	bmi.n	38cc <__aeabi_ui2f+0x74>
    38a6:	01a4      	lsls	r4, r4, #6
    38a8:	0a64      	lsrs	r4, r4, #9
    38aa:	b2db      	uxtb	r3, r3
    38ac:	e7e3      	b.n	3876 <__aeabi_ui2f+0x1e>
    38ae:	2300      	movs	r3, #0
    38b0:	2400      	movs	r4, #0
    38b2:	e7e0      	b.n	3876 <__aeabi_ui2f+0x1e>
    38b4:	22b9      	movs	r2, #185	; 0xb9
    38b6:	0021      	movs	r1, r4
    38b8:	1ad2      	subs	r2, r2, r3
    38ba:	4091      	lsls	r1, r2
    38bc:	000a      	movs	r2, r1
    38be:	1e51      	subs	r1, r2, #1
    38c0:	418a      	sbcs	r2, r1
    38c2:	2105      	movs	r1, #5
    38c4:	1a09      	subs	r1, r1, r0
    38c6:	40cc      	lsrs	r4, r1
    38c8:	4314      	orrs	r4, r2
    38ca:	e7db      	b.n	3884 <__aeabi_ui2f+0x2c>
    38cc:	4b04      	ldr	r3, [pc, #16]	; (38e0 <__aeabi_ui2f+0x88>)
    38ce:	401c      	ands	r4, r3
    38d0:	239f      	movs	r3, #159	; 0x9f
    38d2:	01a4      	lsls	r4, r4, #6
    38d4:	1a1b      	subs	r3, r3, r0
    38d6:	0a64      	lsrs	r4, r4, #9
    38d8:	b2db      	uxtb	r3, r3
    38da:	e7cc      	b.n	3876 <__aeabi_ui2f+0x1e>
    38dc:	0022      	movs	r2, r4
    38de:	e7d7      	b.n	3890 <__aeabi_ui2f+0x38>
    38e0:	fbffffff 	.word	0xfbffffff

000038e4 <__aeabi_dmul>:
    38e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    38e6:	4657      	mov	r7, sl
    38e8:	4645      	mov	r5, r8
    38ea:	46de      	mov	lr, fp
    38ec:	464e      	mov	r6, r9
    38ee:	b5e0      	push	{r5, r6, r7, lr}
    38f0:	030c      	lsls	r4, r1, #12
    38f2:	4698      	mov	r8, r3
    38f4:	004e      	lsls	r6, r1, #1
    38f6:	0b23      	lsrs	r3, r4, #12
    38f8:	b087      	sub	sp, #28
    38fa:	0007      	movs	r7, r0
    38fc:	4692      	mov	sl, r2
    38fe:	469b      	mov	fp, r3
    3900:	0d76      	lsrs	r6, r6, #21
    3902:	0fcd      	lsrs	r5, r1, #31
    3904:	2e00      	cmp	r6, #0
    3906:	d06b      	beq.n	39e0 <__aeabi_dmul+0xfc>
    3908:	4b6d      	ldr	r3, [pc, #436]	; (3ac0 <__aeabi_dmul+0x1dc>)
    390a:	429e      	cmp	r6, r3
    390c:	d035      	beq.n	397a <__aeabi_dmul+0x96>
    390e:	2480      	movs	r4, #128	; 0x80
    3910:	465b      	mov	r3, fp
    3912:	0f42      	lsrs	r2, r0, #29
    3914:	0424      	lsls	r4, r4, #16
    3916:	00db      	lsls	r3, r3, #3
    3918:	4314      	orrs	r4, r2
    391a:	431c      	orrs	r4, r3
    391c:	00c3      	lsls	r3, r0, #3
    391e:	4699      	mov	r9, r3
    3920:	4b68      	ldr	r3, [pc, #416]	; (3ac4 <__aeabi_dmul+0x1e0>)
    3922:	46a3      	mov	fp, r4
    3924:	469c      	mov	ip, r3
    3926:	2300      	movs	r3, #0
    3928:	2700      	movs	r7, #0
    392a:	4466      	add	r6, ip
    392c:	9302      	str	r3, [sp, #8]
    392e:	4643      	mov	r3, r8
    3930:	031c      	lsls	r4, r3, #12
    3932:	005a      	lsls	r2, r3, #1
    3934:	0fdb      	lsrs	r3, r3, #31
    3936:	4650      	mov	r0, sl
    3938:	0b24      	lsrs	r4, r4, #12
    393a:	0d52      	lsrs	r2, r2, #21
    393c:	4698      	mov	r8, r3
    393e:	d100      	bne.n	3942 <__aeabi_dmul+0x5e>
    3940:	e076      	b.n	3a30 <__aeabi_dmul+0x14c>
    3942:	4b5f      	ldr	r3, [pc, #380]	; (3ac0 <__aeabi_dmul+0x1dc>)
    3944:	429a      	cmp	r2, r3
    3946:	d06d      	beq.n	3a24 <__aeabi_dmul+0x140>
    3948:	2380      	movs	r3, #128	; 0x80
    394a:	0f41      	lsrs	r1, r0, #29
    394c:	041b      	lsls	r3, r3, #16
    394e:	430b      	orrs	r3, r1
    3950:	495c      	ldr	r1, [pc, #368]	; (3ac4 <__aeabi_dmul+0x1e0>)
    3952:	00e4      	lsls	r4, r4, #3
    3954:	468c      	mov	ip, r1
    3956:	431c      	orrs	r4, r3
    3958:	00c3      	lsls	r3, r0, #3
    395a:	2000      	movs	r0, #0
    395c:	4462      	add	r2, ip
    395e:	4641      	mov	r1, r8
    3960:	18b6      	adds	r6, r6, r2
    3962:	4069      	eors	r1, r5
    3964:	1c72      	adds	r2, r6, #1
    3966:	9101      	str	r1, [sp, #4]
    3968:	4694      	mov	ip, r2
    396a:	4307      	orrs	r7, r0
    396c:	2f0f      	cmp	r7, #15
    396e:	d900      	bls.n	3972 <__aeabi_dmul+0x8e>
    3970:	e0b0      	b.n	3ad4 <__aeabi_dmul+0x1f0>
    3972:	4a55      	ldr	r2, [pc, #340]	; (3ac8 <__aeabi_dmul+0x1e4>)
    3974:	00bf      	lsls	r7, r7, #2
    3976:	59d2      	ldr	r2, [r2, r7]
    3978:	4697      	mov	pc, r2
    397a:	465b      	mov	r3, fp
    397c:	4303      	orrs	r3, r0
    397e:	4699      	mov	r9, r3
    3980:	d000      	beq.n	3984 <__aeabi_dmul+0xa0>
    3982:	e087      	b.n	3a94 <__aeabi_dmul+0x1b0>
    3984:	2300      	movs	r3, #0
    3986:	469b      	mov	fp, r3
    3988:	3302      	adds	r3, #2
    398a:	2708      	movs	r7, #8
    398c:	9302      	str	r3, [sp, #8]
    398e:	e7ce      	b.n	392e <__aeabi_dmul+0x4a>
    3990:	4642      	mov	r2, r8
    3992:	9201      	str	r2, [sp, #4]
    3994:	2802      	cmp	r0, #2
    3996:	d067      	beq.n	3a68 <__aeabi_dmul+0x184>
    3998:	2803      	cmp	r0, #3
    399a:	d100      	bne.n	399e <__aeabi_dmul+0xba>
    399c:	e20e      	b.n	3dbc <__aeabi_dmul+0x4d8>
    399e:	2801      	cmp	r0, #1
    39a0:	d000      	beq.n	39a4 <__aeabi_dmul+0xc0>
    39a2:	e162      	b.n	3c6a <__aeabi_dmul+0x386>
    39a4:	2300      	movs	r3, #0
    39a6:	2400      	movs	r4, #0
    39a8:	2200      	movs	r2, #0
    39aa:	4699      	mov	r9, r3
    39ac:	9901      	ldr	r1, [sp, #4]
    39ae:	4001      	ands	r1, r0
    39b0:	b2cd      	uxtb	r5, r1
    39b2:	2100      	movs	r1, #0
    39b4:	0312      	lsls	r2, r2, #12
    39b6:	0d0b      	lsrs	r3, r1, #20
    39b8:	0b12      	lsrs	r2, r2, #12
    39ba:	051b      	lsls	r3, r3, #20
    39bc:	4313      	orrs	r3, r2
    39be:	4a43      	ldr	r2, [pc, #268]	; (3acc <__aeabi_dmul+0x1e8>)
    39c0:	0524      	lsls	r4, r4, #20
    39c2:	4013      	ands	r3, r2
    39c4:	431c      	orrs	r4, r3
    39c6:	0064      	lsls	r4, r4, #1
    39c8:	07ed      	lsls	r5, r5, #31
    39ca:	0864      	lsrs	r4, r4, #1
    39cc:	432c      	orrs	r4, r5
    39ce:	4648      	mov	r0, r9
    39d0:	0021      	movs	r1, r4
    39d2:	b007      	add	sp, #28
    39d4:	bc3c      	pop	{r2, r3, r4, r5}
    39d6:	4690      	mov	r8, r2
    39d8:	4699      	mov	r9, r3
    39da:	46a2      	mov	sl, r4
    39dc:	46ab      	mov	fp, r5
    39de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39e0:	4303      	orrs	r3, r0
    39e2:	4699      	mov	r9, r3
    39e4:	d04f      	beq.n	3a86 <__aeabi_dmul+0x1a2>
    39e6:	465b      	mov	r3, fp
    39e8:	2b00      	cmp	r3, #0
    39ea:	d100      	bne.n	39ee <__aeabi_dmul+0x10a>
    39ec:	e189      	b.n	3d02 <__aeabi_dmul+0x41e>
    39ee:	4658      	mov	r0, fp
    39f0:	f000 fd98 	bl	4524 <__clzsi2>
    39f4:	0003      	movs	r3, r0
    39f6:	3b0b      	subs	r3, #11
    39f8:	2b1c      	cmp	r3, #28
    39fa:	dd00      	ble.n	39fe <__aeabi_dmul+0x11a>
    39fc:	e17a      	b.n	3cf4 <__aeabi_dmul+0x410>
    39fe:	221d      	movs	r2, #29
    3a00:	1ad3      	subs	r3, r2, r3
    3a02:	003a      	movs	r2, r7
    3a04:	0001      	movs	r1, r0
    3a06:	465c      	mov	r4, fp
    3a08:	40da      	lsrs	r2, r3
    3a0a:	3908      	subs	r1, #8
    3a0c:	408c      	lsls	r4, r1
    3a0e:	0013      	movs	r3, r2
    3a10:	408f      	lsls	r7, r1
    3a12:	4323      	orrs	r3, r4
    3a14:	469b      	mov	fp, r3
    3a16:	46b9      	mov	r9, r7
    3a18:	2300      	movs	r3, #0
    3a1a:	4e2d      	ldr	r6, [pc, #180]	; (3ad0 <__aeabi_dmul+0x1ec>)
    3a1c:	2700      	movs	r7, #0
    3a1e:	1a36      	subs	r6, r6, r0
    3a20:	9302      	str	r3, [sp, #8]
    3a22:	e784      	b.n	392e <__aeabi_dmul+0x4a>
    3a24:	4653      	mov	r3, sl
    3a26:	4323      	orrs	r3, r4
    3a28:	d12a      	bne.n	3a80 <__aeabi_dmul+0x19c>
    3a2a:	2400      	movs	r4, #0
    3a2c:	2002      	movs	r0, #2
    3a2e:	e796      	b.n	395e <__aeabi_dmul+0x7a>
    3a30:	4653      	mov	r3, sl
    3a32:	4323      	orrs	r3, r4
    3a34:	d020      	beq.n	3a78 <__aeabi_dmul+0x194>
    3a36:	2c00      	cmp	r4, #0
    3a38:	d100      	bne.n	3a3c <__aeabi_dmul+0x158>
    3a3a:	e157      	b.n	3cec <__aeabi_dmul+0x408>
    3a3c:	0020      	movs	r0, r4
    3a3e:	f000 fd71 	bl	4524 <__clzsi2>
    3a42:	0003      	movs	r3, r0
    3a44:	3b0b      	subs	r3, #11
    3a46:	2b1c      	cmp	r3, #28
    3a48:	dd00      	ble.n	3a4c <__aeabi_dmul+0x168>
    3a4a:	e149      	b.n	3ce0 <__aeabi_dmul+0x3fc>
    3a4c:	211d      	movs	r1, #29
    3a4e:	1acb      	subs	r3, r1, r3
    3a50:	4651      	mov	r1, sl
    3a52:	0002      	movs	r2, r0
    3a54:	40d9      	lsrs	r1, r3
    3a56:	4653      	mov	r3, sl
    3a58:	3a08      	subs	r2, #8
    3a5a:	4094      	lsls	r4, r2
    3a5c:	4093      	lsls	r3, r2
    3a5e:	430c      	orrs	r4, r1
    3a60:	4a1b      	ldr	r2, [pc, #108]	; (3ad0 <__aeabi_dmul+0x1ec>)
    3a62:	1a12      	subs	r2, r2, r0
    3a64:	2000      	movs	r0, #0
    3a66:	e77a      	b.n	395e <__aeabi_dmul+0x7a>
    3a68:	2501      	movs	r5, #1
    3a6a:	9b01      	ldr	r3, [sp, #4]
    3a6c:	4c14      	ldr	r4, [pc, #80]	; (3ac0 <__aeabi_dmul+0x1dc>)
    3a6e:	401d      	ands	r5, r3
    3a70:	2300      	movs	r3, #0
    3a72:	2200      	movs	r2, #0
    3a74:	4699      	mov	r9, r3
    3a76:	e79c      	b.n	39b2 <__aeabi_dmul+0xce>
    3a78:	2400      	movs	r4, #0
    3a7a:	2200      	movs	r2, #0
    3a7c:	2001      	movs	r0, #1
    3a7e:	e76e      	b.n	395e <__aeabi_dmul+0x7a>
    3a80:	4653      	mov	r3, sl
    3a82:	2003      	movs	r0, #3
    3a84:	e76b      	b.n	395e <__aeabi_dmul+0x7a>
    3a86:	2300      	movs	r3, #0
    3a88:	469b      	mov	fp, r3
    3a8a:	3301      	adds	r3, #1
    3a8c:	2704      	movs	r7, #4
    3a8e:	2600      	movs	r6, #0
    3a90:	9302      	str	r3, [sp, #8]
    3a92:	e74c      	b.n	392e <__aeabi_dmul+0x4a>
    3a94:	2303      	movs	r3, #3
    3a96:	4681      	mov	r9, r0
    3a98:	270c      	movs	r7, #12
    3a9a:	9302      	str	r3, [sp, #8]
    3a9c:	e747      	b.n	392e <__aeabi_dmul+0x4a>
    3a9e:	2280      	movs	r2, #128	; 0x80
    3aa0:	2300      	movs	r3, #0
    3aa2:	2500      	movs	r5, #0
    3aa4:	0312      	lsls	r2, r2, #12
    3aa6:	4699      	mov	r9, r3
    3aa8:	4c05      	ldr	r4, [pc, #20]	; (3ac0 <__aeabi_dmul+0x1dc>)
    3aaa:	e782      	b.n	39b2 <__aeabi_dmul+0xce>
    3aac:	465c      	mov	r4, fp
    3aae:	464b      	mov	r3, r9
    3ab0:	9802      	ldr	r0, [sp, #8]
    3ab2:	e76f      	b.n	3994 <__aeabi_dmul+0xb0>
    3ab4:	465c      	mov	r4, fp
    3ab6:	464b      	mov	r3, r9
    3ab8:	9501      	str	r5, [sp, #4]
    3aba:	9802      	ldr	r0, [sp, #8]
    3abc:	e76a      	b.n	3994 <__aeabi_dmul+0xb0>
    3abe:	46c0      	nop			; (mov r8, r8)
    3ac0:	000007ff 	.word	0x000007ff
    3ac4:	fffffc01 	.word	0xfffffc01
    3ac8:	00004c68 	.word	0x00004c68
    3acc:	800fffff 	.word	0x800fffff
    3ad0:	fffffc0d 	.word	0xfffffc0d
    3ad4:	464a      	mov	r2, r9
    3ad6:	4649      	mov	r1, r9
    3ad8:	0c17      	lsrs	r7, r2, #16
    3ada:	0c1a      	lsrs	r2, r3, #16
    3adc:	041b      	lsls	r3, r3, #16
    3ade:	0c1b      	lsrs	r3, r3, #16
    3ae0:	0408      	lsls	r0, r1, #16
    3ae2:	0019      	movs	r1, r3
    3ae4:	0c00      	lsrs	r0, r0, #16
    3ae6:	4341      	muls	r1, r0
    3ae8:	0015      	movs	r5, r2
    3aea:	4688      	mov	r8, r1
    3aec:	0019      	movs	r1, r3
    3aee:	437d      	muls	r5, r7
    3af0:	4379      	muls	r1, r7
    3af2:	9503      	str	r5, [sp, #12]
    3af4:	4689      	mov	r9, r1
    3af6:	0029      	movs	r1, r5
    3af8:	0015      	movs	r5, r2
    3afa:	4345      	muls	r5, r0
    3afc:	444d      	add	r5, r9
    3afe:	9502      	str	r5, [sp, #8]
    3b00:	4645      	mov	r5, r8
    3b02:	0c2d      	lsrs	r5, r5, #16
    3b04:	46aa      	mov	sl, r5
    3b06:	9d02      	ldr	r5, [sp, #8]
    3b08:	4455      	add	r5, sl
    3b0a:	45a9      	cmp	r9, r5
    3b0c:	d906      	bls.n	3b1c <__aeabi_dmul+0x238>
    3b0e:	468a      	mov	sl, r1
    3b10:	2180      	movs	r1, #128	; 0x80
    3b12:	0249      	lsls	r1, r1, #9
    3b14:	4689      	mov	r9, r1
    3b16:	44ca      	add	sl, r9
    3b18:	4651      	mov	r1, sl
    3b1a:	9103      	str	r1, [sp, #12]
    3b1c:	0c29      	lsrs	r1, r5, #16
    3b1e:	9104      	str	r1, [sp, #16]
    3b20:	4641      	mov	r1, r8
    3b22:	0409      	lsls	r1, r1, #16
    3b24:	042d      	lsls	r5, r5, #16
    3b26:	0c09      	lsrs	r1, r1, #16
    3b28:	4688      	mov	r8, r1
    3b2a:	0029      	movs	r1, r5
    3b2c:	0c25      	lsrs	r5, r4, #16
    3b2e:	0424      	lsls	r4, r4, #16
    3b30:	4441      	add	r1, r8
    3b32:	0c24      	lsrs	r4, r4, #16
    3b34:	9105      	str	r1, [sp, #20]
    3b36:	0021      	movs	r1, r4
    3b38:	4341      	muls	r1, r0
    3b3a:	4688      	mov	r8, r1
    3b3c:	0021      	movs	r1, r4
    3b3e:	4379      	muls	r1, r7
    3b40:	468a      	mov	sl, r1
    3b42:	4368      	muls	r0, r5
    3b44:	4641      	mov	r1, r8
    3b46:	4450      	add	r0, sl
    3b48:	4681      	mov	r9, r0
    3b4a:	0c08      	lsrs	r0, r1, #16
    3b4c:	4448      	add	r0, r9
    3b4e:	436f      	muls	r7, r5
    3b50:	4582      	cmp	sl, r0
    3b52:	d903      	bls.n	3b5c <__aeabi_dmul+0x278>
    3b54:	2180      	movs	r1, #128	; 0x80
    3b56:	0249      	lsls	r1, r1, #9
    3b58:	4689      	mov	r9, r1
    3b5a:	444f      	add	r7, r9
    3b5c:	0c01      	lsrs	r1, r0, #16
    3b5e:	4689      	mov	r9, r1
    3b60:	0039      	movs	r1, r7
    3b62:	4449      	add	r1, r9
    3b64:	9102      	str	r1, [sp, #8]
    3b66:	4641      	mov	r1, r8
    3b68:	040f      	lsls	r7, r1, #16
    3b6a:	9904      	ldr	r1, [sp, #16]
    3b6c:	0c3f      	lsrs	r7, r7, #16
    3b6e:	4688      	mov	r8, r1
    3b70:	0400      	lsls	r0, r0, #16
    3b72:	19c0      	adds	r0, r0, r7
    3b74:	4480      	add	r8, r0
    3b76:	4641      	mov	r1, r8
    3b78:	9104      	str	r1, [sp, #16]
    3b7a:	4659      	mov	r1, fp
    3b7c:	0c0f      	lsrs	r7, r1, #16
    3b7e:	0409      	lsls	r1, r1, #16
    3b80:	0c09      	lsrs	r1, r1, #16
    3b82:	4688      	mov	r8, r1
    3b84:	4359      	muls	r1, r3
    3b86:	468a      	mov	sl, r1
    3b88:	0039      	movs	r1, r7
    3b8a:	4351      	muls	r1, r2
    3b8c:	4689      	mov	r9, r1
    3b8e:	4641      	mov	r1, r8
    3b90:	434a      	muls	r2, r1
    3b92:	4651      	mov	r1, sl
    3b94:	0c09      	lsrs	r1, r1, #16
    3b96:	468b      	mov	fp, r1
    3b98:	437b      	muls	r3, r7
    3b9a:	18d2      	adds	r2, r2, r3
    3b9c:	445a      	add	r2, fp
    3b9e:	4293      	cmp	r3, r2
    3ba0:	d903      	bls.n	3baa <__aeabi_dmul+0x2c6>
    3ba2:	2380      	movs	r3, #128	; 0x80
    3ba4:	025b      	lsls	r3, r3, #9
    3ba6:	469b      	mov	fp, r3
    3ba8:	44d9      	add	r9, fp
    3baa:	4651      	mov	r1, sl
    3bac:	0409      	lsls	r1, r1, #16
    3bae:	0c09      	lsrs	r1, r1, #16
    3bb0:	468a      	mov	sl, r1
    3bb2:	4641      	mov	r1, r8
    3bb4:	4361      	muls	r1, r4
    3bb6:	437c      	muls	r4, r7
    3bb8:	0c13      	lsrs	r3, r2, #16
    3bba:	0412      	lsls	r2, r2, #16
    3bbc:	444b      	add	r3, r9
    3bbe:	4452      	add	r2, sl
    3bc0:	46a1      	mov	r9, r4
    3bc2:	468a      	mov	sl, r1
    3bc4:	003c      	movs	r4, r7
    3bc6:	4641      	mov	r1, r8
    3bc8:	436c      	muls	r4, r5
    3bca:	434d      	muls	r5, r1
    3bcc:	4651      	mov	r1, sl
    3bce:	444d      	add	r5, r9
    3bd0:	0c0f      	lsrs	r7, r1, #16
    3bd2:	197d      	adds	r5, r7, r5
    3bd4:	45a9      	cmp	r9, r5
    3bd6:	d903      	bls.n	3be0 <__aeabi_dmul+0x2fc>
    3bd8:	2180      	movs	r1, #128	; 0x80
    3bda:	0249      	lsls	r1, r1, #9
    3bdc:	4688      	mov	r8, r1
    3bde:	4444      	add	r4, r8
    3be0:	9f04      	ldr	r7, [sp, #16]
    3be2:	9903      	ldr	r1, [sp, #12]
    3be4:	46b8      	mov	r8, r7
    3be6:	4441      	add	r1, r8
    3be8:	468b      	mov	fp, r1
    3bea:	4583      	cmp	fp, r0
    3bec:	4180      	sbcs	r0, r0
    3bee:	4241      	negs	r1, r0
    3bf0:	4688      	mov	r8, r1
    3bf2:	4651      	mov	r1, sl
    3bf4:	0408      	lsls	r0, r1, #16
    3bf6:	042f      	lsls	r7, r5, #16
    3bf8:	0c00      	lsrs	r0, r0, #16
    3bfa:	183f      	adds	r7, r7, r0
    3bfc:	4658      	mov	r0, fp
    3bfe:	9902      	ldr	r1, [sp, #8]
    3c00:	1810      	adds	r0, r2, r0
    3c02:	4689      	mov	r9, r1
    3c04:	4290      	cmp	r0, r2
    3c06:	4192      	sbcs	r2, r2
    3c08:	444f      	add	r7, r9
    3c0a:	46ba      	mov	sl, r7
    3c0c:	4252      	negs	r2, r2
    3c0e:	4699      	mov	r9, r3
    3c10:	4693      	mov	fp, r2
    3c12:	44c2      	add	sl, r8
    3c14:	44d1      	add	r9, sl
    3c16:	44cb      	add	fp, r9
    3c18:	428f      	cmp	r7, r1
    3c1a:	41bf      	sbcs	r7, r7
    3c1c:	45c2      	cmp	sl, r8
    3c1e:	4189      	sbcs	r1, r1
    3c20:	4599      	cmp	r9, r3
    3c22:	419b      	sbcs	r3, r3
    3c24:	4593      	cmp	fp, r2
    3c26:	4192      	sbcs	r2, r2
    3c28:	427f      	negs	r7, r7
    3c2a:	4249      	negs	r1, r1
    3c2c:	0c2d      	lsrs	r5, r5, #16
    3c2e:	4252      	negs	r2, r2
    3c30:	430f      	orrs	r7, r1
    3c32:	425b      	negs	r3, r3
    3c34:	4313      	orrs	r3, r2
    3c36:	197f      	adds	r7, r7, r5
    3c38:	18ff      	adds	r7, r7, r3
    3c3a:	465b      	mov	r3, fp
    3c3c:	193c      	adds	r4, r7, r4
    3c3e:	0ddb      	lsrs	r3, r3, #23
    3c40:	9a05      	ldr	r2, [sp, #20]
    3c42:	0264      	lsls	r4, r4, #9
    3c44:	431c      	orrs	r4, r3
    3c46:	0243      	lsls	r3, r0, #9
    3c48:	4313      	orrs	r3, r2
    3c4a:	1e5d      	subs	r5, r3, #1
    3c4c:	41ab      	sbcs	r3, r5
    3c4e:	465a      	mov	r2, fp
    3c50:	0dc0      	lsrs	r0, r0, #23
    3c52:	4303      	orrs	r3, r0
    3c54:	0252      	lsls	r2, r2, #9
    3c56:	4313      	orrs	r3, r2
    3c58:	01e2      	lsls	r2, r4, #7
    3c5a:	d556      	bpl.n	3d0a <__aeabi_dmul+0x426>
    3c5c:	2001      	movs	r0, #1
    3c5e:	085a      	lsrs	r2, r3, #1
    3c60:	4003      	ands	r3, r0
    3c62:	4313      	orrs	r3, r2
    3c64:	07e2      	lsls	r2, r4, #31
    3c66:	4313      	orrs	r3, r2
    3c68:	0864      	lsrs	r4, r4, #1
    3c6a:	485a      	ldr	r0, [pc, #360]	; (3dd4 <__aeabi_dmul+0x4f0>)
    3c6c:	4460      	add	r0, ip
    3c6e:	2800      	cmp	r0, #0
    3c70:	dd4d      	ble.n	3d0e <__aeabi_dmul+0x42a>
    3c72:	075a      	lsls	r2, r3, #29
    3c74:	d009      	beq.n	3c8a <__aeabi_dmul+0x3a6>
    3c76:	220f      	movs	r2, #15
    3c78:	401a      	ands	r2, r3
    3c7a:	2a04      	cmp	r2, #4
    3c7c:	d005      	beq.n	3c8a <__aeabi_dmul+0x3a6>
    3c7e:	1d1a      	adds	r2, r3, #4
    3c80:	429a      	cmp	r2, r3
    3c82:	419b      	sbcs	r3, r3
    3c84:	425b      	negs	r3, r3
    3c86:	18e4      	adds	r4, r4, r3
    3c88:	0013      	movs	r3, r2
    3c8a:	01e2      	lsls	r2, r4, #7
    3c8c:	d504      	bpl.n	3c98 <__aeabi_dmul+0x3b4>
    3c8e:	2080      	movs	r0, #128	; 0x80
    3c90:	4a51      	ldr	r2, [pc, #324]	; (3dd8 <__aeabi_dmul+0x4f4>)
    3c92:	00c0      	lsls	r0, r0, #3
    3c94:	4014      	ands	r4, r2
    3c96:	4460      	add	r0, ip
    3c98:	4a50      	ldr	r2, [pc, #320]	; (3ddc <__aeabi_dmul+0x4f8>)
    3c9a:	4290      	cmp	r0, r2
    3c9c:	dd00      	ble.n	3ca0 <__aeabi_dmul+0x3bc>
    3c9e:	e6e3      	b.n	3a68 <__aeabi_dmul+0x184>
    3ca0:	2501      	movs	r5, #1
    3ca2:	08db      	lsrs	r3, r3, #3
    3ca4:	0762      	lsls	r2, r4, #29
    3ca6:	431a      	orrs	r2, r3
    3ca8:	0264      	lsls	r4, r4, #9
    3caa:	9b01      	ldr	r3, [sp, #4]
    3cac:	4691      	mov	r9, r2
    3cae:	0b22      	lsrs	r2, r4, #12
    3cb0:	0544      	lsls	r4, r0, #21
    3cb2:	0d64      	lsrs	r4, r4, #21
    3cb4:	401d      	ands	r5, r3
    3cb6:	e67c      	b.n	39b2 <__aeabi_dmul+0xce>
    3cb8:	2280      	movs	r2, #128	; 0x80
    3cba:	4659      	mov	r1, fp
    3cbc:	0312      	lsls	r2, r2, #12
    3cbe:	4211      	tst	r1, r2
    3cc0:	d008      	beq.n	3cd4 <__aeabi_dmul+0x3f0>
    3cc2:	4214      	tst	r4, r2
    3cc4:	d106      	bne.n	3cd4 <__aeabi_dmul+0x3f0>
    3cc6:	4322      	orrs	r2, r4
    3cc8:	0312      	lsls	r2, r2, #12
    3cca:	0b12      	lsrs	r2, r2, #12
    3ccc:	4645      	mov	r5, r8
    3cce:	4699      	mov	r9, r3
    3cd0:	4c43      	ldr	r4, [pc, #268]	; (3de0 <__aeabi_dmul+0x4fc>)
    3cd2:	e66e      	b.n	39b2 <__aeabi_dmul+0xce>
    3cd4:	465b      	mov	r3, fp
    3cd6:	431a      	orrs	r2, r3
    3cd8:	0312      	lsls	r2, r2, #12
    3cda:	0b12      	lsrs	r2, r2, #12
    3cdc:	4c40      	ldr	r4, [pc, #256]	; (3de0 <__aeabi_dmul+0x4fc>)
    3cde:	e668      	b.n	39b2 <__aeabi_dmul+0xce>
    3ce0:	0003      	movs	r3, r0
    3ce2:	4654      	mov	r4, sl
    3ce4:	3b28      	subs	r3, #40	; 0x28
    3ce6:	409c      	lsls	r4, r3
    3ce8:	2300      	movs	r3, #0
    3cea:	e6b9      	b.n	3a60 <__aeabi_dmul+0x17c>
    3cec:	f000 fc1a 	bl	4524 <__clzsi2>
    3cf0:	3020      	adds	r0, #32
    3cf2:	e6a6      	b.n	3a42 <__aeabi_dmul+0x15e>
    3cf4:	0003      	movs	r3, r0
    3cf6:	3b28      	subs	r3, #40	; 0x28
    3cf8:	409f      	lsls	r7, r3
    3cfa:	2300      	movs	r3, #0
    3cfc:	46bb      	mov	fp, r7
    3cfe:	4699      	mov	r9, r3
    3d00:	e68a      	b.n	3a18 <__aeabi_dmul+0x134>
    3d02:	f000 fc0f 	bl	4524 <__clzsi2>
    3d06:	3020      	adds	r0, #32
    3d08:	e674      	b.n	39f4 <__aeabi_dmul+0x110>
    3d0a:	46b4      	mov	ip, r6
    3d0c:	e7ad      	b.n	3c6a <__aeabi_dmul+0x386>
    3d0e:	2501      	movs	r5, #1
    3d10:	1a2a      	subs	r2, r5, r0
    3d12:	2a38      	cmp	r2, #56	; 0x38
    3d14:	dd06      	ble.n	3d24 <__aeabi_dmul+0x440>
    3d16:	9b01      	ldr	r3, [sp, #4]
    3d18:	2400      	movs	r4, #0
    3d1a:	401d      	ands	r5, r3
    3d1c:	2300      	movs	r3, #0
    3d1e:	2200      	movs	r2, #0
    3d20:	4699      	mov	r9, r3
    3d22:	e646      	b.n	39b2 <__aeabi_dmul+0xce>
    3d24:	2a1f      	cmp	r2, #31
    3d26:	dc21      	bgt.n	3d6c <__aeabi_dmul+0x488>
    3d28:	2520      	movs	r5, #32
    3d2a:	0020      	movs	r0, r4
    3d2c:	1aad      	subs	r5, r5, r2
    3d2e:	001e      	movs	r6, r3
    3d30:	40ab      	lsls	r3, r5
    3d32:	40a8      	lsls	r0, r5
    3d34:	40d6      	lsrs	r6, r2
    3d36:	1e5d      	subs	r5, r3, #1
    3d38:	41ab      	sbcs	r3, r5
    3d3a:	4330      	orrs	r0, r6
    3d3c:	4318      	orrs	r0, r3
    3d3e:	40d4      	lsrs	r4, r2
    3d40:	0743      	lsls	r3, r0, #29
    3d42:	d009      	beq.n	3d58 <__aeabi_dmul+0x474>
    3d44:	230f      	movs	r3, #15
    3d46:	4003      	ands	r3, r0
    3d48:	2b04      	cmp	r3, #4
    3d4a:	d005      	beq.n	3d58 <__aeabi_dmul+0x474>
    3d4c:	0003      	movs	r3, r0
    3d4e:	1d18      	adds	r0, r3, #4
    3d50:	4298      	cmp	r0, r3
    3d52:	419b      	sbcs	r3, r3
    3d54:	425b      	negs	r3, r3
    3d56:	18e4      	adds	r4, r4, r3
    3d58:	0223      	lsls	r3, r4, #8
    3d5a:	d521      	bpl.n	3da0 <__aeabi_dmul+0x4bc>
    3d5c:	2501      	movs	r5, #1
    3d5e:	9b01      	ldr	r3, [sp, #4]
    3d60:	2401      	movs	r4, #1
    3d62:	401d      	ands	r5, r3
    3d64:	2300      	movs	r3, #0
    3d66:	2200      	movs	r2, #0
    3d68:	4699      	mov	r9, r3
    3d6a:	e622      	b.n	39b2 <__aeabi_dmul+0xce>
    3d6c:	251f      	movs	r5, #31
    3d6e:	0021      	movs	r1, r4
    3d70:	426d      	negs	r5, r5
    3d72:	1a28      	subs	r0, r5, r0
    3d74:	40c1      	lsrs	r1, r0
    3d76:	0008      	movs	r0, r1
    3d78:	2a20      	cmp	r2, #32
    3d7a:	d01d      	beq.n	3db8 <__aeabi_dmul+0x4d4>
    3d7c:	355f      	adds	r5, #95	; 0x5f
    3d7e:	1aaa      	subs	r2, r5, r2
    3d80:	4094      	lsls	r4, r2
    3d82:	4323      	orrs	r3, r4
    3d84:	1e5c      	subs	r4, r3, #1
    3d86:	41a3      	sbcs	r3, r4
    3d88:	2507      	movs	r5, #7
    3d8a:	4303      	orrs	r3, r0
    3d8c:	401d      	ands	r5, r3
    3d8e:	2200      	movs	r2, #0
    3d90:	2d00      	cmp	r5, #0
    3d92:	d009      	beq.n	3da8 <__aeabi_dmul+0x4c4>
    3d94:	220f      	movs	r2, #15
    3d96:	2400      	movs	r4, #0
    3d98:	401a      	ands	r2, r3
    3d9a:	0018      	movs	r0, r3
    3d9c:	2a04      	cmp	r2, #4
    3d9e:	d1d6      	bne.n	3d4e <__aeabi_dmul+0x46a>
    3da0:	0003      	movs	r3, r0
    3da2:	0765      	lsls	r5, r4, #29
    3da4:	0264      	lsls	r4, r4, #9
    3da6:	0b22      	lsrs	r2, r4, #12
    3da8:	08db      	lsrs	r3, r3, #3
    3daa:	432b      	orrs	r3, r5
    3dac:	2501      	movs	r5, #1
    3dae:	4699      	mov	r9, r3
    3db0:	9b01      	ldr	r3, [sp, #4]
    3db2:	2400      	movs	r4, #0
    3db4:	401d      	ands	r5, r3
    3db6:	e5fc      	b.n	39b2 <__aeabi_dmul+0xce>
    3db8:	2400      	movs	r4, #0
    3dba:	e7e2      	b.n	3d82 <__aeabi_dmul+0x49e>
    3dbc:	2280      	movs	r2, #128	; 0x80
    3dbe:	2501      	movs	r5, #1
    3dc0:	0312      	lsls	r2, r2, #12
    3dc2:	4322      	orrs	r2, r4
    3dc4:	9901      	ldr	r1, [sp, #4]
    3dc6:	0312      	lsls	r2, r2, #12
    3dc8:	0b12      	lsrs	r2, r2, #12
    3dca:	400d      	ands	r5, r1
    3dcc:	4699      	mov	r9, r3
    3dce:	4c04      	ldr	r4, [pc, #16]	; (3de0 <__aeabi_dmul+0x4fc>)
    3dd0:	e5ef      	b.n	39b2 <__aeabi_dmul+0xce>
    3dd2:	46c0      	nop			; (mov r8, r8)
    3dd4:	000003ff 	.word	0x000003ff
    3dd8:	feffffff 	.word	0xfeffffff
    3ddc:	000007fe 	.word	0x000007fe
    3de0:	000007ff 	.word	0x000007ff

00003de4 <__aeabi_dsub>:
    3de4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3de6:	4646      	mov	r6, r8
    3de8:	46d6      	mov	lr, sl
    3dea:	464f      	mov	r7, r9
    3dec:	030c      	lsls	r4, r1, #12
    3dee:	b5c0      	push	{r6, r7, lr}
    3df0:	0fcd      	lsrs	r5, r1, #31
    3df2:	004e      	lsls	r6, r1, #1
    3df4:	0a61      	lsrs	r1, r4, #9
    3df6:	0f44      	lsrs	r4, r0, #29
    3df8:	430c      	orrs	r4, r1
    3dfa:	00c1      	lsls	r1, r0, #3
    3dfc:	0058      	lsls	r0, r3, #1
    3dfe:	0d40      	lsrs	r0, r0, #21
    3e00:	4684      	mov	ip, r0
    3e02:	468a      	mov	sl, r1
    3e04:	000f      	movs	r7, r1
    3e06:	0319      	lsls	r1, r3, #12
    3e08:	0f50      	lsrs	r0, r2, #29
    3e0a:	0a49      	lsrs	r1, r1, #9
    3e0c:	4301      	orrs	r1, r0
    3e0e:	48c6      	ldr	r0, [pc, #792]	; (4128 <__aeabi_dsub+0x344>)
    3e10:	0d76      	lsrs	r6, r6, #21
    3e12:	46a8      	mov	r8, r5
    3e14:	0fdb      	lsrs	r3, r3, #31
    3e16:	00d2      	lsls	r2, r2, #3
    3e18:	4584      	cmp	ip, r0
    3e1a:	d100      	bne.n	3e1e <__aeabi_dsub+0x3a>
    3e1c:	e0d8      	b.n	3fd0 <__aeabi_dsub+0x1ec>
    3e1e:	2001      	movs	r0, #1
    3e20:	4043      	eors	r3, r0
    3e22:	42ab      	cmp	r3, r5
    3e24:	d100      	bne.n	3e28 <__aeabi_dsub+0x44>
    3e26:	e0a6      	b.n	3f76 <__aeabi_dsub+0x192>
    3e28:	4660      	mov	r0, ip
    3e2a:	1a35      	subs	r5, r6, r0
    3e2c:	2d00      	cmp	r5, #0
    3e2e:	dc00      	bgt.n	3e32 <__aeabi_dsub+0x4e>
    3e30:	e105      	b.n	403e <__aeabi_dsub+0x25a>
    3e32:	2800      	cmp	r0, #0
    3e34:	d110      	bne.n	3e58 <__aeabi_dsub+0x74>
    3e36:	000b      	movs	r3, r1
    3e38:	4313      	orrs	r3, r2
    3e3a:	d100      	bne.n	3e3e <__aeabi_dsub+0x5a>
    3e3c:	e0d7      	b.n	3fee <__aeabi_dsub+0x20a>
    3e3e:	1e6b      	subs	r3, r5, #1
    3e40:	2b00      	cmp	r3, #0
    3e42:	d000      	beq.n	3e46 <__aeabi_dsub+0x62>
    3e44:	e14b      	b.n	40de <__aeabi_dsub+0x2fa>
    3e46:	4653      	mov	r3, sl
    3e48:	1a9f      	subs	r7, r3, r2
    3e4a:	45ba      	cmp	sl, r7
    3e4c:	4180      	sbcs	r0, r0
    3e4e:	1a64      	subs	r4, r4, r1
    3e50:	4240      	negs	r0, r0
    3e52:	1a24      	subs	r4, r4, r0
    3e54:	2601      	movs	r6, #1
    3e56:	e01e      	b.n	3e96 <__aeabi_dsub+0xb2>
    3e58:	4bb3      	ldr	r3, [pc, #716]	; (4128 <__aeabi_dsub+0x344>)
    3e5a:	429e      	cmp	r6, r3
    3e5c:	d048      	beq.n	3ef0 <__aeabi_dsub+0x10c>
    3e5e:	2380      	movs	r3, #128	; 0x80
    3e60:	041b      	lsls	r3, r3, #16
    3e62:	4319      	orrs	r1, r3
    3e64:	2d38      	cmp	r5, #56	; 0x38
    3e66:	dd00      	ble.n	3e6a <__aeabi_dsub+0x86>
    3e68:	e119      	b.n	409e <__aeabi_dsub+0x2ba>
    3e6a:	2d1f      	cmp	r5, #31
    3e6c:	dd00      	ble.n	3e70 <__aeabi_dsub+0x8c>
    3e6e:	e14c      	b.n	410a <__aeabi_dsub+0x326>
    3e70:	2320      	movs	r3, #32
    3e72:	000f      	movs	r7, r1
    3e74:	1b5b      	subs	r3, r3, r5
    3e76:	0010      	movs	r0, r2
    3e78:	409a      	lsls	r2, r3
    3e7a:	409f      	lsls	r7, r3
    3e7c:	40e8      	lsrs	r0, r5
    3e7e:	1e53      	subs	r3, r2, #1
    3e80:	419a      	sbcs	r2, r3
    3e82:	40e9      	lsrs	r1, r5
    3e84:	4307      	orrs	r7, r0
    3e86:	4317      	orrs	r7, r2
    3e88:	4653      	mov	r3, sl
    3e8a:	1bdf      	subs	r7, r3, r7
    3e8c:	1a61      	subs	r1, r4, r1
    3e8e:	45ba      	cmp	sl, r7
    3e90:	41a4      	sbcs	r4, r4
    3e92:	4264      	negs	r4, r4
    3e94:	1b0c      	subs	r4, r1, r4
    3e96:	0223      	lsls	r3, r4, #8
    3e98:	d400      	bmi.n	3e9c <__aeabi_dsub+0xb8>
    3e9a:	e0c5      	b.n	4028 <__aeabi_dsub+0x244>
    3e9c:	0264      	lsls	r4, r4, #9
    3e9e:	0a65      	lsrs	r5, r4, #9
    3ea0:	2d00      	cmp	r5, #0
    3ea2:	d100      	bne.n	3ea6 <__aeabi_dsub+0xc2>
    3ea4:	e0f6      	b.n	4094 <__aeabi_dsub+0x2b0>
    3ea6:	0028      	movs	r0, r5
    3ea8:	f000 fb3c 	bl	4524 <__clzsi2>
    3eac:	0003      	movs	r3, r0
    3eae:	3b08      	subs	r3, #8
    3eb0:	2b1f      	cmp	r3, #31
    3eb2:	dd00      	ble.n	3eb6 <__aeabi_dsub+0xd2>
    3eb4:	e0e9      	b.n	408a <__aeabi_dsub+0x2a6>
    3eb6:	2220      	movs	r2, #32
    3eb8:	003c      	movs	r4, r7
    3eba:	1ad2      	subs	r2, r2, r3
    3ebc:	409d      	lsls	r5, r3
    3ebe:	40d4      	lsrs	r4, r2
    3ec0:	409f      	lsls	r7, r3
    3ec2:	4325      	orrs	r5, r4
    3ec4:	429e      	cmp	r6, r3
    3ec6:	dd00      	ble.n	3eca <__aeabi_dsub+0xe6>
    3ec8:	e0db      	b.n	4082 <__aeabi_dsub+0x29e>
    3eca:	1b9e      	subs	r6, r3, r6
    3ecc:	1c73      	adds	r3, r6, #1
    3ece:	2b1f      	cmp	r3, #31
    3ed0:	dd00      	ble.n	3ed4 <__aeabi_dsub+0xf0>
    3ed2:	e10a      	b.n	40ea <__aeabi_dsub+0x306>
    3ed4:	2220      	movs	r2, #32
    3ed6:	0038      	movs	r0, r7
    3ed8:	1ad2      	subs	r2, r2, r3
    3eda:	0029      	movs	r1, r5
    3edc:	4097      	lsls	r7, r2
    3ede:	002c      	movs	r4, r5
    3ee0:	4091      	lsls	r1, r2
    3ee2:	40d8      	lsrs	r0, r3
    3ee4:	1e7a      	subs	r2, r7, #1
    3ee6:	4197      	sbcs	r7, r2
    3ee8:	40dc      	lsrs	r4, r3
    3eea:	2600      	movs	r6, #0
    3eec:	4301      	orrs	r1, r0
    3eee:	430f      	orrs	r7, r1
    3ef0:	077b      	lsls	r3, r7, #29
    3ef2:	d009      	beq.n	3f08 <__aeabi_dsub+0x124>
    3ef4:	230f      	movs	r3, #15
    3ef6:	403b      	ands	r3, r7
    3ef8:	2b04      	cmp	r3, #4
    3efa:	d005      	beq.n	3f08 <__aeabi_dsub+0x124>
    3efc:	1d3b      	adds	r3, r7, #4
    3efe:	42bb      	cmp	r3, r7
    3f00:	41bf      	sbcs	r7, r7
    3f02:	427f      	negs	r7, r7
    3f04:	19e4      	adds	r4, r4, r7
    3f06:	001f      	movs	r7, r3
    3f08:	0223      	lsls	r3, r4, #8
    3f0a:	d525      	bpl.n	3f58 <__aeabi_dsub+0x174>
    3f0c:	4b86      	ldr	r3, [pc, #536]	; (4128 <__aeabi_dsub+0x344>)
    3f0e:	3601      	adds	r6, #1
    3f10:	429e      	cmp	r6, r3
    3f12:	d100      	bne.n	3f16 <__aeabi_dsub+0x132>
    3f14:	e0af      	b.n	4076 <__aeabi_dsub+0x292>
    3f16:	4b85      	ldr	r3, [pc, #532]	; (412c <__aeabi_dsub+0x348>)
    3f18:	2501      	movs	r5, #1
    3f1a:	401c      	ands	r4, r3
    3f1c:	4643      	mov	r3, r8
    3f1e:	0762      	lsls	r2, r4, #29
    3f20:	08ff      	lsrs	r7, r7, #3
    3f22:	0264      	lsls	r4, r4, #9
    3f24:	0576      	lsls	r6, r6, #21
    3f26:	4317      	orrs	r7, r2
    3f28:	0b24      	lsrs	r4, r4, #12
    3f2a:	0d76      	lsrs	r6, r6, #21
    3f2c:	401d      	ands	r5, r3
    3f2e:	2100      	movs	r1, #0
    3f30:	0324      	lsls	r4, r4, #12
    3f32:	0b23      	lsrs	r3, r4, #12
    3f34:	0d0c      	lsrs	r4, r1, #20
    3f36:	4a7e      	ldr	r2, [pc, #504]	; (4130 <__aeabi_dsub+0x34c>)
    3f38:	0524      	lsls	r4, r4, #20
    3f3a:	431c      	orrs	r4, r3
    3f3c:	4014      	ands	r4, r2
    3f3e:	0533      	lsls	r3, r6, #20
    3f40:	4323      	orrs	r3, r4
    3f42:	005b      	lsls	r3, r3, #1
    3f44:	07ed      	lsls	r5, r5, #31
    3f46:	085b      	lsrs	r3, r3, #1
    3f48:	432b      	orrs	r3, r5
    3f4a:	0038      	movs	r0, r7
    3f4c:	0019      	movs	r1, r3
    3f4e:	bc1c      	pop	{r2, r3, r4}
    3f50:	4690      	mov	r8, r2
    3f52:	4699      	mov	r9, r3
    3f54:	46a2      	mov	sl, r4
    3f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f58:	2501      	movs	r5, #1
    3f5a:	4643      	mov	r3, r8
    3f5c:	0762      	lsls	r2, r4, #29
    3f5e:	08ff      	lsrs	r7, r7, #3
    3f60:	4317      	orrs	r7, r2
    3f62:	08e4      	lsrs	r4, r4, #3
    3f64:	401d      	ands	r5, r3
    3f66:	4b70      	ldr	r3, [pc, #448]	; (4128 <__aeabi_dsub+0x344>)
    3f68:	429e      	cmp	r6, r3
    3f6a:	d036      	beq.n	3fda <__aeabi_dsub+0x1f6>
    3f6c:	0324      	lsls	r4, r4, #12
    3f6e:	0576      	lsls	r6, r6, #21
    3f70:	0b24      	lsrs	r4, r4, #12
    3f72:	0d76      	lsrs	r6, r6, #21
    3f74:	e7db      	b.n	3f2e <__aeabi_dsub+0x14a>
    3f76:	4663      	mov	r3, ip
    3f78:	1af3      	subs	r3, r6, r3
    3f7a:	2b00      	cmp	r3, #0
    3f7c:	dc00      	bgt.n	3f80 <__aeabi_dsub+0x19c>
    3f7e:	e094      	b.n	40aa <__aeabi_dsub+0x2c6>
    3f80:	4660      	mov	r0, ip
    3f82:	2800      	cmp	r0, #0
    3f84:	d035      	beq.n	3ff2 <__aeabi_dsub+0x20e>
    3f86:	4868      	ldr	r0, [pc, #416]	; (4128 <__aeabi_dsub+0x344>)
    3f88:	4286      	cmp	r6, r0
    3f8a:	d0b1      	beq.n	3ef0 <__aeabi_dsub+0x10c>
    3f8c:	2780      	movs	r7, #128	; 0x80
    3f8e:	043f      	lsls	r7, r7, #16
    3f90:	4339      	orrs	r1, r7
    3f92:	2b38      	cmp	r3, #56	; 0x38
    3f94:	dc00      	bgt.n	3f98 <__aeabi_dsub+0x1b4>
    3f96:	e0fd      	b.n	4194 <__aeabi_dsub+0x3b0>
    3f98:	430a      	orrs	r2, r1
    3f9a:	0017      	movs	r7, r2
    3f9c:	2100      	movs	r1, #0
    3f9e:	1e7a      	subs	r2, r7, #1
    3fa0:	4197      	sbcs	r7, r2
    3fa2:	4457      	add	r7, sl
    3fa4:	4557      	cmp	r7, sl
    3fa6:	4180      	sbcs	r0, r0
    3fa8:	1909      	adds	r1, r1, r4
    3faa:	4244      	negs	r4, r0
    3fac:	190c      	adds	r4, r1, r4
    3fae:	0223      	lsls	r3, r4, #8
    3fb0:	d53a      	bpl.n	4028 <__aeabi_dsub+0x244>
    3fb2:	4b5d      	ldr	r3, [pc, #372]	; (4128 <__aeabi_dsub+0x344>)
    3fb4:	3601      	adds	r6, #1
    3fb6:	429e      	cmp	r6, r3
    3fb8:	d100      	bne.n	3fbc <__aeabi_dsub+0x1d8>
    3fba:	e14b      	b.n	4254 <__aeabi_dsub+0x470>
    3fbc:	2201      	movs	r2, #1
    3fbe:	4b5b      	ldr	r3, [pc, #364]	; (412c <__aeabi_dsub+0x348>)
    3fc0:	401c      	ands	r4, r3
    3fc2:	087b      	lsrs	r3, r7, #1
    3fc4:	4017      	ands	r7, r2
    3fc6:	431f      	orrs	r7, r3
    3fc8:	07e2      	lsls	r2, r4, #31
    3fca:	4317      	orrs	r7, r2
    3fcc:	0864      	lsrs	r4, r4, #1
    3fce:	e78f      	b.n	3ef0 <__aeabi_dsub+0x10c>
    3fd0:	0008      	movs	r0, r1
    3fd2:	4310      	orrs	r0, r2
    3fd4:	d000      	beq.n	3fd8 <__aeabi_dsub+0x1f4>
    3fd6:	e724      	b.n	3e22 <__aeabi_dsub+0x3e>
    3fd8:	e721      	b.n	3e1e <__aeabi_dsub+0x3a>
    3fda:	0023      	movs	r3, r4
    3fdc:	433b      	orrs	r3, r7
    3fde:	d100      	bne.n	3fe2 <__aeabi_dsub+0x1fe>
    3fe0:	e1b9      	b.n	4356 <__aeabi_dsub+0x572>
    3fe2:	2280      	movs	r2, #128	; 0x80
    3fe4:	0312      	lsls	r2, r2, #12
    3fe6:	4314      	orrs	r4, r2
    3fe8:	0324      	lsls	r4, r4, #12
    3fea:	0b24      	lsrs	r4, r4, #12
    3fec:	e79f      	b.n	3f2e <__aeabi_dsub+0x14a>
    3fee:	002e      	movs	r6, r5
    3ff0:	e77e      	b.n	3ef0 <__aeabi_dsub+0x10c>
    3ff2:	0008      	movs	r0, r1
    3ff4:	4310      	orrs	r0, r2
    3ff6:	d100      	bne.n	3ffa <__aeabi_dsub+0x216>
    3ff8:	e0ca      	b.n	4190 <__aeabi_dsub+0x3ac>
    3ffa:	1e58      	subs	r0, r3, #1
    3ffc:	4684      	mov	ip, r0
    3ffe:	2800      	cmp	r0, #0
    4000:	d000      	beq.n	4004 <__aeabi_dsub+0x220>
    4002:	e0e7      	b.n	41d4 <__aeabi_dsub+0x3f0>
    4004:	4452      	add	r2, sl
    4006:	4552      	cmp	r2, sl
    4008:	4180      	sbcs	r0, r0
    400a:	1864      	adds	r4, r4, r1
    400c:	4240      	negs	r0, r0
    400e:	1824      	adds	r4, r4, r0
    4010:	0017      	movs	r7, r2
    4012:	2601      	movs	r6, #1
    4014:	0223      	lsls	r3, r4, #8
    4016:	d507      	bpl.n	4028 <__aeabi_dsub+0x244>
    4018:	2602      	movs	r6, #2
    401a:	e7cf      	b.n	3fbc <__aeabi_dsub+0x1d8>
    401c:	4664      	mov	r4, ip
    401e:	432c      	orrs	r4, r5
    4020:	d100      	bne.n	4024 <__aeabi_dsub+0x240>
    4022:	e1b3      	b.n	438c <__aeabi_dsub+0x5a8>
    4024:	002c      	movs	r4, r5
    4026:	4667      	mov	r7, ip
    4028:	077b      	lsls	r3, r7, #29
    402a:	d000      	beq.n	402e <__aeabi_dsub+0x24a>
    402c:	e762      	b.n	3ef4 <__aeabi_dsub+0x110>
    402e:	0763      	lsls	r3, r4, #29
    4030:	08ff      	lsrs	r7, r7, #3
    4032:	431f      	orrs	r7, r3
    4034:	2501      	movs	r5, #1
    4036:	4643      	mov	r3, r8
    4038:	08e4      	lsrs	r4, r4, #3
    403a:	401d      	ands	r5, r3
    403c:	e793      	b.n	3f66 <__aeabi_dsub+0x182>
    403e:	2d00      	cmp	r5, #0
    4040:	d178      	bne.n	4134 <__aeabi_dsub+0x350>
    4042:	1c75      	adds	r5, r6, #1
    4044:	056d      	lsls	r5, r5, #21
    4046:	0d6d      	lsrs	r5, r5, #21
    4048:	2d01      	cmp	r5, #1
    404a:	dc00      	bgt.n	404e <__aeabi_dsub+0x26a>
    404c:	e0f2      	b.n	4234 <__aeabi_dsub+0x450>
    404e:	4650      	mov	r0, sl
    4050:	1a80      	subs	r0, r0, r2
    4052:	4582      	cmp	sl, r0
    4054:	41bf      	sbcs	r7, r7
    4056:	1a65      	subs	r5, r4, r1
    4058:	427f      	negs	r7, r7
    405a:	1bed      	subs	r5, r5, r7
    405c:	4684      	mov	ip, r0
    405e:	0228      	lsls	r0, r5, #8
    4060:	d400      	bmi.n	4064 <__aeabi_dsub+0x280>
    4062:	e08c      	b.n	417e <__aeabi_dsub+0x39a>
    4064:	4650      	mov	r0, sl
    4066:	1a17      	subs	r7, r2, r0
    4068:	42ba      	cmp	r2, r7
    406a:	4192      	sbcs	r2, r2
    406c:	1b0c      	subs	r4, r1, r4
    406e:	4255      	negs	r5, r2
    4070:	1b65      	subs	r5, r4, r5
    4072:	4698      	mov	r8, r3
    4074:	e714      	b.n	3ea0 <__aeabi_dsub+0xbc>
    4076:	2501      	movs	r5, #1
    4078:	4643      	mov	r3, r8
    407a:	2400      	movs	r4, #0
    407c:	401d      	ands	r5, r3
    407e:	2700      	movs	r7, #0
    4080:	e755      	b.n	3f2e <__aeabi_dsub+0x14a>
    4082:	4c2a      	ldr	r4, [pc, #168]	; (412c <__aeabi_dsub+0x348>)
    4084:	1af6      	subs	r6, r6, r3
    4086:	402c      	ands	r4, r5
    4088:	e732      	b.n	3ef0 <__aeabi_dsub+0x10c>
    408a:	003d      	movs	r5, r7
    408c:	3828      	subs	r0, #40	; 0x28
    408e:	4085      	lsls	r5, r0
    4090:	2700      	movs	r7, #0
    4092:	e717      	b.n	3ec4 <__aeabi_dsub+0xe0>
    4094:	0038      	movs	r0, r7
    4096:	f000 fa45 	bl	4524 <__clzsi2>
    409a:	3020      	adds	r0, #32
    409c:	e706      	b.n	3eac <__aeabi_dsub+0xc8>
    409e:	430a      	orrs	r2, r1
    40a0:	0017      	movs	r7, r2
    40a2:	2100      	movs	r1, #0
    40a4:	1e7a      	subs	r2, r7, #1
    40a6:	4197      	sbcs	r7, r2
    40a8:	e6ee      	b.n	3e88 <__aeabi_dsub+0xa4>
    40aa:	2b00      	cmp	r3, #0
    40ac:	d000      	beq.n	40b0 <__aeabi_dsub+0x2cc>
    40ae:	e0e5      	b.n	427c <__aeabi_dsub+0x498>
    40b0:	1c73      	adds	r3, r6, #1
    40b2:	469c      	mov	ip, r3
    40b4:	055b      	lsls	r3, r3, #21
    40b6:	0d5b      	lsrs	r3, r3, #21
    40b8:	2b01      	cmp	r3, #1
    40ba:	dc00      	bgt.n	40be <__aeabi_dsub+0x2da>
    40bc:	e09f      	b.n	41fe <__aeabi_dsub+0x41a>
    40be:	4b1a      	ldr	r3, [pc, #104]	; (4128 <__aeabi_dsub+0x344>)
    40c0:	459c      	cmp	ip, r3
    40c2:	d100      	bne.n	40c6 <__aeabi_dsub+0x2e2>
    40c4:	e0c5      	b.n	4252 <__aeabi_dsub+0x46e>
    40c6:	4452      	add	r2, sl
    40c8:	4552      	cmp	r2, sl
    40ca:	4180      	sbcs	r0, r0
    40cc:	1864      	adds	r4, r4, r1
    40ce:	4240      	negs	r0, r0
    40d0:	1824      	adds	r4, r4, r0
    40d2:	07e7      	lsls	r7, r4, #31
    40d4:	0852      	lsrs	r2, r2, #1
    40d6:	4317      	orrs	r7, r2
    40d8:	0864      	lsrs	r4, r4, #1
    40da:	4666      	mov	r6, ip
    40dc:	e708      	b.n	3ef0 <__aeabi_dsub+0x10c>
    40de:	4812      	ldr	r0, [pc, #72]	; (4128 <__aeabi_dsub+0x344>)
    40e0:	4285      	cmp	r5, r0
    40e2:	d100      	bne.n	40e6 <__aeabi_dsub+0x302>
    40e4:	e085      	b.n	41f2 <__aeabi_dsub+0x40e>
    40e6:	001d      	movs	r5, r3
    40e8:	e6bc      	b.n	3e64 <__aeabi_dsub+0x80>
    40ea:	0029      	movs	r1, r5
    40ec:	3e1f      	subs	r6, #31
    40ee:	40f1      	lsrs	r1, r6
    40f0:	2b20      	cmp	r3, #32
    40f2:	d100      	bne.n	40f6 <__aeabi_dsub+0x312>
    40f4:	e07f      	b.n	41f6 <__aeabi_dsub+0x412>
    40f6:	2240      	movs	r2, #64	; 0x40
    40f8:	1ad3      	subs	r3, r2, r3
    40fa:	409d      	lsls	r5, r3
    40fc:	432f      	orrs	r7, r5
    40fe:	1e7d      	subs	r5, r7, #1
    4100:	41af      	sbcs	r7, r5
    4102:	2400      	movs	r4, #0
    4104:	430f      	orrs	r7, r1
    4106:	2600      	movs	r6, #0
    4108:	e78e      	b.n	4028 <__aeabi_dsub+0x244>
    410a:	002b      	movs	r3, r5
    410c:	000f      	movs	r7, r1
    410e:	3b20      	subs	r3, #32
    4110:	40df      	lsrs	r7, r3
    4112:	2d20      	cmp	r5, #32
    4114:	d071      	beq.n	41fa <__aeabi_dsub+0x416>
    4116:	2340      	movs	r3, #64	; 0x40
    4118:	1b5d      	subs	r5, r3, r5
    411a:	40a9      	lsls	r1, r5
    411c:	430a      	orrs	r2, r1
    411e:	1e51      	subs	r1, r2, #1
    4120:	418a      	sbcs	r2, r1
    4122:	2100      	movs	r1, #0
    4124:	4317      	orrs	r7, r2
    4126:	e6af      	b.n	3e88 <__aeabi_dsub+0xa4>
    4128:	000007ff 	.word	0x000007ff
    412c:	ff7fffff 	.word	0xff7fffff
    4130:	800fffff 	.word	0x800fffff
    4134:	2e00      	cmp	r6, #0
    4136:	d03e      	beq.n	41b6 <__aeabi_dsub+0x3d2>
    4138:	4eb3      	ldr	r6, [pc, #716]	; (4408 <__aeabi_dsub+0x624>)
    413a:	45b4      	cmp	ip, r6
    413c:	d045      	beq.n	41ca <__aeabi_dsub+0x3e6>
    413e:	2680      	movs	r6, #128	; 0x80
    4140:	0436      	lsls	r6, r6, #16
    4142:	426d      	negs	r5, r5
    4144:	4334      	orrs	r4, r6
    4146:	2d38      	cmp	r5, #56	; 0x38
    4148:	dd00      	ble.n	414c <__aeabi_dsub+0x368>
    414a:	e0a8      	b.n	429e <__aeabi_dsub+0x4ba>
    414c:	2d1f      	cmp	r5, #31
    414e:	dd00      	ble.n	4152 <__aeabi_dsub+0x36e>
    4150:	e11f      	b.n	4392 <__aeabi_dsub+0x5ae>
    4152:	2620      	movs	r6, #32
    4154:	0027      	movs	r7, r4
    4156:	4650      	mov	r0, sl
    4158:	1b76      	subs	r6, r6, r5
    415a:	40b7      	lsls	r7, r6
    415c:	40e8      	lsrs	r0, r5
    415e:	4307      	orrs	r7, r0
    4160:	4650      	mov	r0, sl
    4162:	40b0      	lsls	r0, r6
    4164:	1e46      	subs	r6, r0, #1
    4166:	41b0      	sbcs	r0, r6
    4168:	40ec      	lsrs	r4, r5
    416a:	4338      	orrs	r0, r7
    416c:	1a17      	subs	r7, r2, r0
    416e:	42ba      	cmp	r2, r7
    4170:	4192      	sbcs	r2, r2
    4172:	1b0c      	subs	r4, r1, r4
    4174:	4252      	negs	r2, r2
    4176:	1aa4      	subs	r4, r4, r2
    4178:	4666      	mov	r6, ip
    417a:	4698      	mov	r8, r3
    417c:	e68b      	b.n	3e96 <__aeabi_dsub+0xb2>
    417e:	4664      	mov	r4, ip
    4180:	4667      	mov	r7, ip
    4182:	432c      	orrs	r4, r5
    4184:	d000      	beq.n	4188 <__aeabi_dsub+0x3a4>
    4186:	e68b      	b.n	3ea0 <__aeabi_dsub+0xbc>
    4188:	2500      	movs	r5, #0
    418a:	2600      	movs	r6, #0
    418c:	2700      	movs	r7, #0
    418e:	e6ea      	b.n	3f66 <__aeabi_dsub+0x182>
    4190:	001e      	movs	r6, r3
    4192:	e6ad      	b.n	3ef0 <__aeabi_dsub+0x10c>
    4194:	2b1f      	cmp	r3, #31
    4196:	dc60      	bgt.n	425a <__aeabi_dsub+0x476>
    4198:	2720      	movs	r7, #32
    419a:	1af8      	subs	r0, r7, r3
    419c:	000f      	movs	r7, r1
    419e:	4684      	mov	ip, r0
    41a0:	4087      	lsls	r7, r0
    41a2:	0010      	movs	r0, r2
    41a4:	40d8      	lsrs	r0, r3
    41a6:	4307      	orrs	r7, r0
    41a8:	4660      	mov	r0, ip
    41aa:	4082      	lsls	r2, r0
    41ac:	1e50      	subs	r0, r2, #1
    41ae:	4182      	sbcs	r2, r0
    41b0:	40d9      	lsrs	r1, r3
    41b2:	4317      	orrs	r7, r2
    41b4:	e6f5      	b.n	3fa2 <__aeabi_dsub+0x1be>
    41b6:	0026      	movs	r6, r4
    41b8:	4650      	mov	r0, sl
    41ba:	4306      	orrs	r6, r0
    41bc:	d005      	beq.n	41ca <__aeabi_dsub+0x3e6>
    41be:	43ed      	mvns	r5, r5
    41c0:	2d00      	cmp	r5, #0
    41c2:	d0d3      	beq.n	416c <__aeabi_dsub+0x388>
    41c4:	4e90      	ldr	r6, [pc, #576]	; (4408 <__aeabi_dsub+0x624>)
    41c6:	45b4      	cmp	ip, r6
    41c8:	d1bd      	bne.n	4146 <__aeabi_dsub+0x362>
    41ca:	000c      	movs	r4, r1
    41cc:	0017      	movs	r7, r2
    41ce:	4666      	mov	r6, ip
    41d0:	4698      	mov	r8, r3
    41d2:	e68d      	b.n	3ef0 <__aeabi_dsub+0x10c>
    41d4:	488c      	ldr	r0, [pc, #560]	; (4408 <__aeabi_dsub+0x624>)
    41d6:	4283      	cmp	r3, r0
    41d8:	d00b      	beq.n	41f2 <__aeabi_dsub+0x40e>
    41da:	4663      	mov	r3, ip
    41dc:	e6d9      	b.n	3f92 <__aeabi_dsub+0x1ae>
    41de:	2d00      	cmp	r5, #0
    41e0:	d000      	beq.n	41e4 <__aeabi_dsub+0x400>
    41e2:	e096      	b.n	4312 <__aeabi_dsub+0x52e>
    41e4:	0008      	movs	r0, r1
    41e6:	4310      	orrs	r0, r2
    41e8:	d100      	bne.n	41ec <__aeabi_dsub+0x408>
    41ea:	e0e2      	b.n	43b2 <__aeabi_dsub+0x5ce>
    41ec:	000c      	movs	r4, r1
    41ee:	0017      	movs	r7, r2
    41f0:	4698      	mov	r8, r3
    41f2:	4e85      	ldr	r6, [pc, #532]	; (4408 <__aeabi_dsub+0x624>)
    41f4:	e67c      	b.n	3ef0 <__aeabi_dsub+0x10c>
    41f6:	2500      	movs	r5, #0
    41f8:	e780      	b.n	40fc <__aeabi_dsub+0x318>
    41fa:	2100      	movs	r1, #0
    41fc:	e78e      	b.n	411c <__aeabi_dsub+0x338>
    41fe:	0023      	movs	r3, r4
    4200:	4650      	mov	r0, sl
    4202:	4303      	orrs	r3, r0
    4204:	2e00      	cmp	r6, #0
    4206:	d000      	beq.n	420a <__aeabi_dsub+0x426>
    4208:	e0a8      	b.n	435c <__aeabi_dsub+0x578>
    420a:	2b00      	cmp	r3, #0
    420c:	d100      	bne.n	4210 <__aeabi_dsub+0x42c>
    420e:	e0de      	b.n	43ce <__aeabi_dsub+0x5ea>
    4210:	000b      	movs	r3, r1
    4212:	4313      	orrs	r3, r2
    4214:	d100      	bne.n	4218 <__aeabi_dsub+0x434>
    4216:	e66b      	b.n	3ef0 <__aeabi_dsub+0x10c>
    4218:	4452      	add	r2, sl
    421a:	4552      	cmp	r2, sl
    421c:	4180      	sbcs	r0, r0
    421e:	1864      	adds	r4, r4, r1
    4220:	4240      	negs	r0, r0
    4222:	1824      	adds	r4, r4, r0
    4224:	0017      	movs	r7, r2
    4226:	0223      	lsls	r3, r4, #8
    4228:	d400      	bmi.n	422c <__aeabi_dsub+0x448>
    422a:	e6fd      	b.n	4028 <__aeabi_dsub+0x244>
    422c:	4b77      	ldr	r3, [pc, #476]	; (440c <__aeabi_dsub+0x628>)
    422e:	4666      	mov	r6, ip
    4230:	401c      	ands	r4, r3
    4232:	e65d      	b.n	3ef0 <__aeabi_dsub+0x10c>
    4234:	0025      	movs	r5, r4
    4236:	4650      	mov	r0, sl
    4238:	4305      	orrs	r5, r0
    423a:	2e00      	cmp	r6, #0
    423c:	d1cf      	bne.n	41de <__aeabi_dsub+0x3fa>
    423e:	2d00      	cmp	r5, #0
    4240:	d14f      	bne.n	42e2 <__aeabi_dsub+0x4fe>
    4242:	000c      	movs	r4, r1
    4244:	4314      	orrs	r4, r2
    4246:	d100      	bne.n	424a <__aeabi_dsub+0x466>
    4248:	e0a0      	b.n	438c <__aeabi_dsub+0x5a8>
    424a:	000c      	movs	r4, r1
    424c:	0017      	movs	r7, r2
    424e:	4698      	mov	r8, r3
    4250:	e64e      	b.n	3ef0 <__aeabi_dsub+0x10c>
    4252:	4666      	mov	r6, ip
    4254:	2400      	movs	r4, #0
    4256:	2700      	movs	r7, #0
    4258:	e685      	b.n	3f66 <__aeabi_dsub+0x182>
    425a:	001f      	movs	r7, r3
    425c:	0008      	movs	r0, r1
    425e:	3f20      	subs	r7, #32
    4260:	40f8      	lsrs	r0, r7
    4262:	0007      	movs	r7, r0
    4264:	2b20      	cmp	r3, #32
    4266:	d100      	bne.n	426a <__aeabi_dsub+0x486>
    4268:	e08e      	b.n	4388 <__aeabi_dsub+0x5a4>
    426a:	2040      	movs	r0, #64	; 0x40
    426c:	1ac3      	subs	r3, r0, r3
    426e:	4099      	lsls	r1, r3
    4270:	430a      	orrs	r2, r1
    4272:	1e51      	subs	r1, r2, #1
    4274:	418a      	sbcs	r2, r1
    4276:	2100      	movs	r1, #0
    4278:	4317      	orrs	r7, r2
    427a:	e692      	b.n	3fa2 <__aeabi_dsub+0x1be>
    427c:	2e00      	cmp	r6, #0
    427e:	d114      	bne.n	42aa <__aeabi_dsub+0x4c6>
    4280:	0026      	movs	r6, r4
    4282:	4650      	mov	r0, sl
    4284:	4306      	orrs	r6, r0
    4286:	d062      	beq.n	434e <__aeabi_dsub+0x56a>
    4288:	43db      	mvns	r3, r3
    428a:	2b00      	cmp	r3, #0
    428c:	d15c      	bne.n	4348 <__aeabi_dsub+0x564>
    428e:	1887      	adds	r7, r0, r2
    4290:	4297      	cmp	r7, r2
    4292:	4192      	sbcs	r2, r2
    4294:	1864      	adds	r4, r4, r1
    4296:	4252      	negs	r2, r2
    4298:	18a4      	adds	r4, r4, r2
    429a:	4666      	mov	r6, ip
    429c:	e687      	b.n	3fae <__aeabi_dsub+0x1ca>
    429e:	4650      	mov	r0, sl
    42a0:	4320      	orrs	r0, r4
    42a2:	1e44      	subs	r4, r0, #1
    42a4:	41a0      	sbcs	r0, r4
    42a6:	2400      	movs	r4, #0
    42a8:	e760      	b.n	416c <__aeabi_dsub+0x388>
    42aa:	4e57      	ldr	r6, [pc, #348]	; (4408 <__aeabi_dsub+0x624>)
    42ac:	45b4      	cmp	ip, r6
    42ae:	d04e      	beq.n	434e <__aeabi_dsub+0x56a>
    42b0:	2680      	movs	r6, #128	; 0x80
    42b2:	0436      	lsls	r6, r6, #16
    42b4:	425b      	negs	r3, r3
    42b6:	4334      	orrs	r4, r6
    42b8:	2b38      	cmp	r3, #56	; 0x38
    42ba:	dd00      	ble.n	42be <__aeabi_dsub+0x4da>
    42bc:	e07f      	b.n	43be <__aeabi_dsub+0x5da>
    42be:	2b1f      	cmp	r3, #31
    42c0:	dd00      	ble.n	42c4 <__aeabi_dsub+0x4e0>
    42c2:	e08b      	b.n	43dc <__aeabi_dsub+0x5f8>
    42c4:	2620      	movs	r6, #32
    42c6:	0027      	movs	r7, r4
    42c8:	4650      	mov	r0, sl
    42ca:	1af6      	subs	r6, r6, r3
    42cc:	40b7      	lsls	r7, r6
    42ce:	40d8      	lsrs	r0, r3
    42d0:	4307      	orrs	r7, r0
    42d2:	4650      	mov	r0, sl
    42d4:	40b0      	lsls	r0, r6
    42d6:	1e46      	subs	r6, r0, #1
    42d8:	41b0      	sbcs	r0, r6
    42da:	4307      	orrs	r7, r0
    42dc:	40dc      	lsrs	r4, r3
    42de:	18bf      	adds	r7, r7, r2
    42e0:	e7d6      	b.n	4290 <__aeabi_dsub+0x4ac>
    42e2:	000d      	movs	r5, r1
    42e4:	4315      	orrs	r5, r2
    42e6:	d100      	bne.n	42ea <__aeabi_dsub+0x506>
    42e8:	e602      	b.n	3ef0 <__aeabi_dsub+0x10c>
    42ea:	4650      	mov	r0, sl
    42ec:	1a80      	subs	r0, r0, r2
    42ee:	4582      	cmp	sl, r0
    42f0:	41bf      	sbcs	r7, r7
    42f2:	1a65      	subs	r5, r4, r1
    42f4:	427f      	negs	r7, r7
    42f6:	1bed      	subs	r5, r5, r7
    42f8:	4684      	mov	ip, r0
    42fa:	0228      	lsls	r0, r5, #8
    42fc:	d400      	bmi.n	4300 <__aeabi_dsub+0x51c>
    42fe:	e68d      	b.n	401c <__aeabi_dsub+0x238>
    4300:	4650      	mov	r0, sl
    4302:	1a17      	subs	r7, r2, r0
    4304:	42ba      	cmp	r2, r7
    4306:	4192      	sbcs	r2, r2
    4308:	1b0c      	subs	r4, r1, r4
    430a:	4252      	negs	r2, r2
    430c:	1aa4      	subs	r4, r4, r2
    430e:	4698      	mov	r8, r3
    4310:	e5ee      	b.n	3ef0 <__aeabi_dsub+0x10c>
    4312:	000d      	movs	r5, r1
    4314:	4315      	orrs	r5, r2
    4316:	d100      	bne.n	431a <__aeabi_dsub+0x536>
    4318:	e76b      	b.n	41f2 <__aeabi_dsub+0x40e>
    431a:	4650      	mov	r0, sl
    431c:	0767      	lsls	r7, r4, #29
    431e:	08c0      	lsrs	r0, r0, #3
    4320:	4307      	orrs	r7, r0
    4322:	2080      	movs	r0, #128	; 0x80
    4324:	08e4      	lsrs	r4, r4, #3
    4326:	0300      	lsls	r0, r0, #12
    4328:	4204      	tst	r4, r0
    432a:	d007      	beq.n	433c <__aeabi_dsub+0x558>
    432c:	08cd      	lsrs	r5, r1, #3
    432e:	4205      	tst	r5, r0
    4330:	d104      	bne.n	433c <__aeabi_dsub+0x558>
    4332:	002c      	movs	r4, r5
    4334:	4698      	mov	r8, r3
    4336:	08d7      	lsrs	r7, r2, #3
    4338:	0749      	lsls	r1, r1, #29
    433a:	430f      	orrs	r7, r1
    433c:	0f7b      	lsrs	r3, r7, #29
    433e:	00e4      	lsls	r4, r4, #3
    4340:	431c      	orrs	r4, r3
    4342:	00ff      	lsls	r7, r7, #3
    4344:	4e30      	ldr	r6, [pc, #192]	; (4408 <__aeabi_dsub+0x624>)
    4346:	e5d3      	b.n	3ef0 <__aeabi_dsub+0x10c>
    4348:	4e2f      	ldr	r6, [pc, #188]	; (4408 <__aeabi_dsub+0x624>)
    434a:	45b4      	cmp	ip, r6
    434c:	d1b4      	bne.n	42b8 <__aeabi_dsub+0x4d4>
    434e:	000c      	movs	r4, r1
    4350:	0017      	movs	r7, r2
    4352:	4666      	mov	r6, ip
    4354:	e5cc      	b.n	3ef0 <__aeabi_dsub+0x10c>
    4356:	2700      	movs	r7, #0
    4358:	2400      	movs	r4, #0
    435a:	e5e8      	b.n	3f2e <__aeabi_dsub+0x14a>
    435c:	2b00      	cmp	r3, #0
    435e:	d039      	beq.n	43d4 <__aeabi_dsub+0x5f0>
    4360:	000b      	movs	r3, r1
    4362:	4313      	orrs	r3, r2
    4364:	d100      	bne.n	4368 <__aeabi_dsub+0x584>
    4366:	e744      	b.n	41f2 <__aeabi_dsub+0x40e>
    4368:	08c0      	lsrs	r0, r0, #3
    436a:	0767      	lsls	r7, r4, #29
    436c:	4307      	orrs	r7, r0
    436e:	2080      	movs	r0, #128	; 0x80
    4370:	08e4      	lsrs	r4, r4, #3
    4372:	0300      	lsls	r0, r0, #12
    4374:	4204      	tst	r4, r0
    4376:	d0e1      	beq.n	433c <__aeabi_dsub+0x558>
    4378:	08cb      	lsrs	r3, r1, #3
    437a:	4203      	tst	r3, r0
    437c:	d1de      	bne.n	433c <__aeabi_dsub+0x558>
    437e:	08d7      	lsrs	r7, r2, #3
    4380:	0749      	lsls	r1, r1, #29
    4382:	430f      	orrs	r7, r1
    4384:	001c      	movs	r4, r3
    4386:	e7d9      	b.n	433c <__aeabi_dsub+0x558>
    4388:	2100      	movs	r1, #0
    438a:	e771      	b.n	4270 <__aeabi_dsub+0x48c>
    438c:	2500      	movs	r5, #0
    438e:	2700      	movs	r7, #0
    4390:	e5e9      	b.n	3f66 <__aeabi_dsub+0x182>
    4392:	002e      	movs	r6, r5
    4394:	0027      	movs	r7, r4
    4396:	3e20      	subs	r6, #32
    4398:	40f7      	lsrs	r7, r6
    439a:	2d20      	cmp	r5, #32
    439c:	d02f      	beq.n	43fe <__aeabi_dsub+0x61a>
    439e:	2640      	movs	r6, #64	; 0x40
    43a0:	1b75      	subs	r5, r6, r5
    43a2:	40ac      	lsls	r4, r5
    43a4:	4650      	mov	r0, sl
    43a6:	4320      	orrs	r0, r4
    43a8:	1e44      	subs	r4, r0, #1
    43aa:	41a0      	sbcs	r0, r4
    43ac:	2400      	movs	r4, #0
    43ae:	4338      	orrs	r0, r7
    43b0:	e6dc      	b.n	416c <__aeabi_dsub+0x388>
    43b2:	2480      	movs	r4, #128	; 0x80
    43b4:	2500      	movs	r5, #0
    43b6:	0324      	lsls	r4, r4, #12
    43b8:	4e13      	ldr	r6, [pc, #76]	; (4408 <__aeabi_dsub+0x624>)
    43ba:	2700      	movs	r7, #0
    43bc:	e5d3      	b.n	3f66 <__aeabi_dsub+0x182>
    43be:	4650      	mov	r0, sl
    43c0:	4320      	orrs	r0, r4
    43c2:	0007      	movs	r7, r0
    43c4:	1e78      	subs	r0, r7, #1
    43c6:	4187      	sbcs	r7, r0
    43c8:	2400      	movs	r4, #0
    43ca:	18bf      	adds	r7, r7, r2
    43cc:	e760      	b.n	4290 <__aeabi_dsub+0x4ac>
    43ce:	000c      	movs	r4, r1
    43d0:	0017      	movs	r7, r2
    43d2:	e58d      	b.n	3ef0 <__aeabi_dsub+0x10c>
    43d4:	000c      	movs	r4, r1
    43d6:	0017      	movs	r7, r2
    43d8:	4e0b      	ldr	r6, [pc, #44]	; (4408 <__aeabi_dsub+0x624>)
    43da:	e589      	b.n	3ef0 <__aeabi_dsub+0x10c>
    43dc:	001e      	movs	r6, r3
    43de:	0027      	movs	r7, r4
    43e0:	3e20      	subs	r6, #32
    43e2:	40f7      	lsrs	r7, r6
    43e4:	2b20      	cmp	r3, #32
    43e6:	d00c      	beq.n	4402 <__aeabi_dsub+0x61e>
    43e8:	2640      	movs	r6, #64	; 0x40
    43ea:	1af3      	subs	r3, r6, r3
    43ec:	409c      	lsls	r4, r3
    43ee:	4650      	mov	r0, sl
    43f0:	4320      	orrs	r0, r4
    43f2:	1e44      	subs	r4, r0, #1
    43f4:	41a0      	sbcs	r0, r4
    43f6:	4307      	orrs	r7, r0
    43f8:	2400      	movs	r4, #0
    43fa:	18bf      	adds	r7, r7, r2
    43fc:	e748      	b.n	4290 <__aeabi_dsub+0x4ac>
    43fe:	2400      	movs	r4, #0
    4400:	e7d0      	b.n	43a4 <__aeabi_dsub+0x5c0>
    4402:	2400      	movs	r4, #0
    4404:	e7f3      	b.n	43ee <__aeabi_dsub+0x60a>
    4406:	46c0      	nop			; (mov r8, r8)
    4408:	000007ff 	.word	0x000007ff
    440c:	ff7fffff 	.word	0xff7fffff

00004410 <__aeabi_ui2d>:
    4410:	b510      	push	{r4, lr}
    4412:	1e04      	subs	r4, r0, #0
    4414:	d028      	beq.n	4468 <__aeabi_ui2d+0x58>
    4416:	f000 f885 	bl	4524 <__clzsi2>
    441a:	4b15      	ldr	r3, [pc, #84]	; (4470 <__aeabi_ui2d+0x60>)
    441c:	4a15      	ldr	r2, [pc, #84]	; (4474 <__aeabi_ui2d+0x64>)
    441e:	1a1b      	subs	r3, r3, r0
    4420:	1ad2      	subs	r2, r2, r3
    4422:	2a1f      	cmp	r2, #31
    4424:	dd15      	ble.n	4452 <__aeabi_ui2d+0x42>
    4426:	4a14      	ldr	r2, [pc, #80]	; (4478 <__aeabi_ui2d+0x68>)
    4428:	1ad2      	subs	r2, r2, r3
    442a:	4094      	lsls	r4, r2
    442c:	2200      	movs	r2, #0
    442e:	0324      	lsls	r4, r4, #12
    4430:	055b      	lsls	r3, r3, #21
    4432:	0b24      	lsrs	r4, r4, #12
    4434:	0d5b      	lsrs	r3, r3, #21
    4436:	2100      	movs	r1, #0
    4438:	0010      	movs	r0, r2
    443a:	0324      	lsls	r4, r4, #12
    443c:	0d0a      	lsrs	r2, r1, #20
    443e:	0b24      	lsrs	r4, r4, #12
    4440:	0512      	lsls	r2, r2, #20
    4442:	4322      	orrs	r2, r4
    4444:	4c0d      	ldr	r4, [pc, #52]	; (447c <__aeabi_ui2d+0x6c>)
    4446:	051b      	lsls	r3, r3, #20
    4448:	4022      	ands	r2, r4
    444a:	4313      	orrs	r3, r2
    444c:	005b      	lsls	r3, r3, #1
    444e:	0859      	lsrs	r1, r3, #1
    4450:	bd10      	pop	{r4, pc}
    4452:	0021      	movs	r1, r4
    4454:	4091      	lsls	r1, r2
    4456:	000a      	movs	r2, r1
    4458:	210b      	movs	r1, #11
    445a:	1a08      	subs	r0, r1, r0
    445c:	40c4      	lsrs	r4, r0
    445e:	055b      	lsls	r3, r3, #21
    4460:	0324      	lsls	r4, r4, #12
    4462:	0b24      	lsrs	r4, r4, #12
    4464:	0d5b      	lsrs	r3, r3, #21
    4466:	e7e6      	b.n	4436 <__aeabi_ui2d+0x26>
    4468:	2300      	movs	r3, #0
    446a:	2400      	movs	r4, #0
    446c:	2200      	movs	r2, #0
    446e:	e7e2      	b.n	4436 <__aeabi_ui2d+0x26>
    4470:	0000041e 	.word	0x0000041e
    4474:	00000433 	.word	0x00000433
    4478:	00000413 	.word	0x00000413
    447c:	800fffff 	.word	0x800fffff

00004480 <__aeabi_f2d>:
    4480:	0041      	lsls	r1, r0, #1
    4482:	0e09      	lsrs	r1, r1, #24
    4484:	1c4b      	adds	r3, r1, #1
    4486:	b570      	push	{r4, r5, r6, lr}
    4488:	b2db      	uxtb	r3, r3
    448a:	0246      	lsls	r6, r0, #9
    448c:	0a75      	lsrs	r5, r6, #9
    448e:	0fc4      	lsrs	r4, r0, #31
    4490:	2b01      	cmp	r3, #1
    4492:	dd14      	ble.n	44be <__aeabi_f2d+0x3e>
    4494:	23e0      	movs	r3, #224	; 0xe0
    4496:	009b      	lsls	r3, r3, #2
    4498:	076d      	lsls	r5, r5, #29
    449a:	0b36      	lsrs	r6, r6, #12
    449c:	18cb      	adds	r3, r1, r3
    449e:	2100      	movs	r1, #0
    44a0:	0d0a      	lsrs	r2, r1, #20
    44a2:	0028      	movs	r0, r5
    44a4:	0512      	lsls	r2, r2, #20
    44a6:	4d1c      	ldr	r5, [pc, #112]	; (4518 <__aeabi_f2d+0x98>)
    44a8:	4332      	orrs	r2, r6
    44aa:	055b      	lsls	r3, r3, #21
    44ac:	402a      	ands	r2, r5
    44ae:	085b      	lsrs	r3, r3, #1
    44b0:	4313      	orrs	r3, r2
    44b2:	005b      	lsls	r3, r3, #1
    44b4:	07e4      	lsls	r4, r4, #31
    44b6:	085b      	lsrs	r3, r3, #1
    44b8:	4323      	orrs	r3, r4
    44ba:	0019      	movs	r1, r3
    44bc:	bd70      	pop	{r4, r5, r6, pc}
    44be:	2900      	cmp	r1, #0
    44c0:	d114      	bne.n	44ec <__aeabi_f2d+0x6c>
    44c2:	2d00      	cmp	r5, #0
    44c4:	d01e      	beq.n	4504 <__aeabi_f2d+0x84>
    44c6:	0028      	movs	r0, r5
    44c8:	f000 f82c 	bl	4524 <__clzsi2>
    44cc:	280a      	cmp	r0, #10
    44ce:	dc1c      	bgt.n	450a <__aeabi_f2d+0x8a>
    44d0:	230b      	movs	r3, #11
    44d2:	002a      	movs	r2, r5
    44d4:	1a1b      	subs	r3, r3, r0
    44d6:	40da      	lsrs	r2, r3
    44d8:	0003      	movs	r3, r0
    44da:	3315      	adds	r3, #21
    44dc:	409d      	lsls	r5, r3
    44de:	4b0f      	ldr	r3, [pc, #60]	; (451c <__aeabi_f2d+0x9c>)
    44e0:	0312      	lsls	r2, r2, #12
    44e2:	1a1b      	subs	r3, r3, r0
    44e4:	055b      	lsls	r3, r3, #21
    44e6:	0b16      	lsrs	r6, r2, #12
    44e8:	0d5b      	lsrs	r3, r3, #21
    44ea:	e7d8      	b.n	449e <__aeabi_f2d+0x1e>
    44ec:	2d00      	cmp	r5, #0
    44ee:	d006      	beq.n	44fe <__aeabi_f2d+0x7e>
    44f0:	0b32      	lsrs	r2, r6, #12
    44f2:	2680      	movs	r6, #128	; 0x80
    44f4:	0336      	lsls	r6, r6, #12
    44f6:	076d      	lsls	r5, r5, #29
    44f8:	4316      	orrs	r6, r2
    44fa:	4b09      	ldr	r3, [pc, #36]	; (4520 <__aeabi_f2d+0xa0>)
    44fc:	e7cf      	b.n	449e <__aeabi_f2d+0x1e>
    44fe:	4b08      	ldr	r3, [pc, #32]	; (4520 <__aeabi_f2d+0xa0>)
    4500:	2600      	movs	r6, #0
    4502:	e7cc      	b.n	449e <__aeabi_f2d+0x1e>
    4504:	2300      	movs	r3, #0
    4506:	2600      	movs	r6, #0
    4508:	e7c9      	b.n	449e <__aeabi_f2d+0x1e>
    450a:	0003      	movs	r3, r0
    450c:	002a      	movs	r2, r5
    450e:	3b0b      	subs	r3, #11
    4510:	409a      	lsls	r2, r3
    4512:	2500      	movs	r5, #0
    4514:	e7e3      	b.n	44de <__aeabi_f2d+0x5e>
    4516:	46c0      	nop			; (mov r8, r8)
    4518:	800fffff 	.word	0x800fffff
    451c:	00000389 	.word	0x00000389
    4520:	000007ff 	.word	0x000007ff

00004524 <__clzsi2>:
    4524:	211c      	movs	r1, #28
    4526:	2301      	movs	r3, #1
    4528:	041b      	lsls	r3, r3, #16
    452a:	4298      	cmp	r0, r3
    452c:	d301      	bcc.n	4532 <__clzsi2+0xe>
    452e:	0c00      	lsrs	r0, r0, #16
    4530:	3910      	subs	r1, #16
    4532:	0a1b      	lsrs	r3, r3, #8
    4534:	4298      	cmp	r0, r3
    4536:	d301      	bcc.n	453c <__clzsi2+0x18>
    4538:	0a00      	lsrs	r0, r0, #8
    453a:	3908      	subs	r1, #8
    453c:	091b      	lsrs	r3, r3, #4
    453e:	4298      	cmp	r0, r3
    4540:	d301      	bcc.n	4546 <__clzsi2+0x22>
    4542:	0900      	lsrs	r0, r0, #4
    4544:	3904      	subs	r1, #4
    4546:	a202      	add	r2, pc, #8	; (adr r2, 4550 <__clzsi2+0x2c>)
    4548:	5c10      	ldrb	r0, [r2, r0]
    454a:	1840      	adds	r0, r0, r1
    454c:	4770      	bx	lr
    454e:	46c0      	nop			; (mov r8, r8)
    4550:	02020304 	.word	0x02020304
    4554:	01010101 	.word	0x01010101
	...

00004560 <__clzdi2>:
    4560:	b510      	push	{r4, lr}
    4562:	2900      	cmp	r1, #0
    4564:	d103      	bne.n	456e <__clzdi2+0xe>
    4566:	f7ff ffdd 	bl	4524 <__clzsi2>
    456a:	3020      	adds	r0, #32
    456c:	e002      	b.n	4574 <__clzdi2+0x14>
    456e:	1c08      	adds	r0, r1, #0
    4570:	f7ff ffd8 	bl	4524 <__clzsi2>
    4574:	bd10      	pop	{r4, pc}
    4576:	46c0      	nop			; (mov r8, r8)

00004578 <__aeabi_d2uiz>:
    4578:	b570      	push	{r4, r5, r6, lr}
    457a:	2200      	movs	r2, #0
    457c:	4b0c      	ldr	r3, [pc, #48]	; (45b0 <__aeabi_d2uiz+0x38>)
    457e:	0004      	movs	r4, r0
    4580:	000d      	movs	r5, r1
    4582:	f000 f87f 	bl	4684 <__aeabi_dcmpge>
    4586:	2800      	cmp	r0, #0
    4588:	d104      	bne.n	4594 <__aeabi_d2uiz+0x1c>
    458a:	0020      	movs	r0, r4
    458c:	0029      	movs	r1, r5
    458e:	f000 f811 	bl	45b4 <__aeabi_d2iz>
    4592:	bd70      	pop	{r4, r5, r6, pc}
    4594:	4b06      	ldr	r3, [pc, #24]	; (45b0 <__aeabi_d2uiz+0x38>)
    4596:	2200      	movs	r2, #0
    4598:	0020      	movs	r0, r4
    459a:	0029      	movs	r1, r5
    459c:	f7ff fc22 	bl	3de4 <__aeabi_dsub>
    45a0:	f000 f808 	bl	45b4 <__aeabi_d2iz>
    45a4:	2380      	movs	r3, #128	; 0x80
    45a6:	061b      	lsls	r3, r3, #24
    45a8:	469c      	mov	ip, r3
    45aa:	4460      	add	r0, ip
    45ac:	e7f1      	b.n	4592 <__aeabi_d2uiz+0x1a>
    45ae:	46c0      	nop			; (mov r8, r8)
    45b0:	41e00000 	.word	0x41e00000

000045b4 <__aeabi_d2iz>:
    45b4:	b530      	push	{r4, r5, lr}
    45b6:	4d13      	ldr	r5, [pc, #76]	; (4604 <__aeabi_d2iz+0x50>)
    45b8:	030a      	lsls	r2, r1, #12
    45ba:	004b      	lsls	r3, r1, #1
    45bc:	0b12      	lsrs	r2, r2, #12
    45be:	0d5b      	lsrs	r3, r3, #21
    45c0:	0fc9      	lsrs	r1, r1, #31
    45c2:	2400      	movs	r4, #0
    45c4:	42ab      	cmp	r3, r5
    45c6:	dd10      	ble.n	45ea <__aeabi_d2iz+0x36>
    45c8:	4c0f      	ldr	r4, [pc, #60]	; (4608 <__aeabi_d2iz+0x54>)
    45ca:	42a3      	cmp	r3, r4
    45cc:	dc0f      	bgt.n	45ee <__aeabi_d2iz+0x3a>
    45ce:	2480      	movs	r4, #128	; 0x80
    45d0:	4d0e      	ldr	r5, [pc, #56]	; (460c <__aeabi_d2iz+0x58>)
    45d2:	0364      	lsls	r4, r4, #13
    45d4:	4322      	orrs	r2, r4
    45d6:	1aed      	subs	r5, r5, r3
    45d8:	2d1f      	cmp	r5, #31
    45da:	dd0b      	ble.n	45f4 <__aeabi_d2iz+0x40>
    45dc:	480c      	ldr	r0, [pc, #48]	; (4610 <__aeabi_d2iz+0x5c>)
    45de:	1ac3      	subs	r3, r0, r3
    45e0:	40da      	lsrs	r2, r3
    45e2:	4254      	negs	r4, r2
    45e4:	2900      	cmp	r1, #0
    45e6:	d100      	bne.n	45ea <__aeabi_d2iz+0x36>
    45e8:	0014      	movs	r4, r2
    45ea:	0020      	movs	r0, r4
    45ec:	bd30      	pop	{r4, r5, pc}
    45ee:	4b09      	ldr	r3, [pc, #36]	; (4614 <__aeabi_d2iz+0x60>)
    45f0:	18cc      	adds	r4, r1, r3
    45f2:	e7fa      	b.n	45ea <__aeabi_d2iz+0x36>
    45f4:	4c08      	ldr	r4, [pc, #32]	; (4618 <__aeabi_d2iz+0x64>)
    45f6:	40e8      	lsrs	r0, r5
    45f8:	46a4      	mov	ip, r4
    45fa:	4463      	add	r3, ip
    45fc:	409a      	lsls	r2, r3
    45fe:	4302      	orrs	r2, r0
    4600:	e7ef      	b.n	45e2 <__aeabi_d2iz+0x2e>
    4602:	46c0      	nop			; (mov r8, r8)
    4604:	000003fe 	.word	0x000003fe
    4608:	0000041d 	.word	0x0000041d
    460c:	00000433 	.word	0x00000433
    4610:	00000413 	.word	0x00000413
    4614:	7fffffff 	.word	0x7fffffff
    4618:	fffffbed 	.word	0xfffffbed

0000461c <__aeabi_cdrcmple>:
    461c:	4684      	mov	ip, r0
    461e:	1c10      	adds	r0, r2, #0
    4620:	4662      	mov	r2, ip
    4622:	468c      	mov	ip, r1
    4624:	1c19      	adds	r1, r3, #0
    4626:	4663      	mov	r3, ip
    4628:	e000      	b.n	462c <__aeabi_cdcmpeq>
    462a:	46c0      	nop			; (mov r8, r8)

0000462c <__aeabi_cdcmpeq>:
    462c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    462e:	f000 f8d1 	bl	47d4 <__ledf2>
    4632:	2800      	cmp	r0, #0
    4634:	d401      	bmi.n	463a <__aeabi_cdcmpeq+0xe>
    4636:	2100      	movs	r1, #0
    4638:	42c8      	cmn	r0, r1
    463a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000463c <__aeabi_dcmpeq>:
    463c:	b510      	push	{r4, lr}
    463e:	f000 f82b 	bl	4698 <__eqdf2>
    4642:	4240      	negs	r0, r0
    4644:	3001      	adds	r0, #1
    4646:	bd10      	pop	{r4, pc}

00004648 <__aeabi_dcmplt>:
    4648:	b510      	push	{r4, lr}
    464a:	f000 f8c3 	bl	47d4 <__ledf2>
    464e:	2800      	cmp	r0, #0
    4650:	db01      	blt.n	4656 <__aeabi_dcmplt+0xe>
    4652:	2000      	movs	r0, #0
    4654:	bd10      	pop	{r4, pc}
    4656:	2001      	movs	r0, #1
    4658:	bd10      	pop	{r4, pc}
    465a:	46c0      	nop			; (mov r8, r8)

0000465c <__aeabi_dcmple>:
    465c:	b510      	push	{r4, lr}
    465e:	f000 f8b9 	bl	47d4 <__ledf2>
    4662:	2800      	cmp	r0, #0
    4664:	dd01      	ble.n	466a <__aeabi_dcmple+0xe>
    4666:	2000      	movs	r0, #0
    4668:	bd10      	pop	{r4, pc}
    466a:	2001      	movs	r0, #1
    466c:	bd10      	pop	{r4, pc}
    466e:	46c0      	nop			; (mov r8, r8)

00004670 <__aeabi_dcmpgt>:
    4670:	b510      	push	{r4, lr}
    4672:	f000 f84b 	bl	470c <__gedf2>
    4676:	2800      	cmp	r0, #0
    4678:	dc01      	bgt.n	467e <__aeabi_dcmpgt+0xe>
    467a:	2000      	movs	r0, #0
    467c:	bd10      	pop	{r4, pc}
    467e:	2001      	movs	r0, #1
    4680:	bd10      	pop	{r4, pc}
    4682:	46c0      	nop			; (mov r8, r8)

00004684 <__aeabi_dcmpge>:
    4684:	b510      	push	{r4, lr}
    4686:	f000 f841 	bl	470c <__gedf2>
    468a:	2800      	cmp	r0, #0
    468c:	da01      	bge.n	4692 <__aeabi_dcmpge+0xe>
    468e:	2000      	movs	r0, #0
    4690:	bd10      	pop	{r4, pc}
    4692:	2001      	movs	r0, #1
    4694:	bd10      	pop	{r4, pc}
    4696:	46c0      	nop			; (mov r8, r8)

00004698 <__eqdf2>:
    4698:	b5f0      	push	{r4, r5, r6, r7, lr}
    469a:	464f      	mov	r7, r9
    469c:	4646      	mov	r6, r8
    469e:	46d6      	mov	lr, sl
    46a0:	005c      	lsls	r4, r3, #1
    46a2:	b5c0      	push	{r6, r7, lr}
    46a4:	031f      	lsls	r7, r3, #12
    46a6:	0fdb      	lsrs	r3, r3, #31
    46a8:	469a      	mov	sl, r3
    46aa:	4b17      	ldr	r3, [pc, #92]	; (4708 <__eqdf2+0x70>)
    46ac:	030e      	lsls	r6, r1, #12
    46ae:	004d      	lsls	r5, r1, #1
    46b0:	4684      	mov	ip, r0
    46b2:	4680      	mov	r8, r0
    46b4:	0b36      	lsrs	r6, r6, #12
    46b6:	0d6d      	lsrs	r5, r5, #21
    46b8:	0fc9      	lsrs	r1, r1, #31
    46ba:	4691      	mov	r9, r2
    46bc:	0b3f      	lsrs	r7, r7, #12
    46be:	0d64      	lsrs	r4, r4, #21
    46c0:	2001      	movs	r0, #1
    46c2:	429d      	cmp	r5, r3
    46c4:	d008      	beq.n	46d8 <__eqdf2+0x40>
    46c6:	429c      	cmp	r4, r3
    46c8:	d001      	beq.n	46ce <__eqdf2+0x36>
    46ca:	42a5      	cmp	r5, r4
    46cc:	d00b      	beq.n	46e6 <__eqdf2+0x4e>
    46ce:	bc1c      	pop	{r2, r3, r4}
    46d0:	4690      	mov	r8, r2
    46d2:	4699      	mov	r9, r3
    46d4:	46a2      	mov	sl, r4
    46d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46d8:	4663      	mov	r3, ip
    46da:	4333      	orrs	r3, r6
    46dc:	d1f7      	bne.n	46ce <__eqdf2+0x36>
    46de:	42ac      	cmp	r4, r5
    46e0:	d1f5      	bne.n	46ce <__eqdf2+0x36>
    46e2:	433a      	orrs	r2, r7
    46e4:	d1f3      	bne.n	46ce <__eqdf2+0x36>
    46e6:	2001      	movs	r0, #1
    46e8:	42be      	cmp	r6, r7
    46ea:	d1f0      	bne.n	46ce <__eqdf2+0x36>
    46ec:	45c8      	cmp	r8, r9
    46ee:	d1ee      	bne.n	46ce <__eqdf2+0x36>
    46f0:	4551      	cmp	r1, sl
    46f2:	d007      	beq.n	4704 <__eqdf2+0x6c>
    46f4:	2d00      	cmp	r5, #0
    46f6:	d1ea      	bne.n	46ce <__eqdf2+0x36>
    46f8:	4663      	mov	r3, ip
    46fa:	431e      	orrs	r6, r3
    46fc:	0030      	movs	r0, r6
    46fe:	1e46      	subs	r6, r0, #1
    4700:	41b0      	sbcs	r0, r6
    4702:	e7e4      	b.n	46ce <__eqdf2+0x36>
    4704:	2000      	movs	r0, #0
    4706:	e7e2      	b.n	46ce <__eqdf2+0x36>
    4708:	000007ff 	.word	0x000007ff

0000470c <__gedf2>:
    470c:	b5f0      	push	{r4, r5, r6, r7, lr}
    470e:	4645      	mov	r5, r8
    4710:	46de      	mov	lr, fp
    4712:	4657      	mov	r7, sl
    4714:	464e      	mov	r6, r9
    4716:	b5e0      	push	{r5, r6, r7, lr}
    4718:	031f      	lsls	r7, r3, #12
    471a:	0b3d      	lsrs	r5, r7, #12
    471c:	4f2c      	ldr	r7, [pc, #176]	; (47d0 <__gedf2+0xc4>)
    471e:	030e      	lsls	r6, r1, #12
    4720:	004c      	lsls	r4, r1, #1
    4722:	46ab      	mov	fp, r5
    4724:	005d      	lsls	r5, r3, #1
    4726:	4684      	mov	ip, r0
    4728:	0b36      	lsrs	r6, r6, #12
    472a:	0d64      	lsrs	r4, r4, #21
    472c:	0fc9      	lsrs	r1, r1, #31
    472e:	4690      	mov	r8, r2
    4730:	0d6d      	lsrs	r5, r5, #21
    4732:	0fdb      	lsrs	r3, r3, #31
    4734:	42bc      	cmp	r4, r7
    4736:	d02a      	beq.n	478e <__gedf2+0x82>
    4738:	4f25      	ldr	r7, [pc, #148]	; (47d0 <__gedf2+0xc4>)
    473a:	42bd      	cmp	r5, r7
    473c:	d02d      	beq.n	479a <__gedf2+0x8e>
    473e:	2c00      	cmp	r4, #0
    4740:	d10f      	bne.n	4762 <__gedf2+0x56>
    4742:	4330      	orrs	r0, r6
    4744:	0007      	movs	r7, r0
    4746:	4681      	mov	r9, r0
    4748:	4278      	negs	r0, r7
    474a:	4178      	adcs	r0, r7
    474c:	b2c0      	uxtb	r0, r0
    474e:	2d00      	cmp	r5, #0
    4750:	d117      	bne.n	4782 <__gedf2+0x76>
    4752:	465f      	mov	r7, fp
    4754:	433a      	orrs	r2, r7
    4756:	d114      	bne.n	4782 <__gedf2+0x76>
    4758:	464b      	mov	r3, r9
    475a:	2000      	movs	r0, #0
    475c:	2b00      	cmp	r3, #0
    475e:	d00a      	beq.n	4776 <__gedf2+0x6a>
    4760:	e006      	b.n	4770 <__gedf2+0x64>
    4762:	2d00      	cmp	r5, #0
    4764:	d102      	bne.n	476c <__gedf2+0x60>
    4766:	4658      	mov	r0, fp
    4768:	4302      	orrs	r2, r0
    476a:	d001      	beq.n	4770 <__gedf2+0x64>
    476c:	4299      	cmp	r1, r3
    476e:	d018      	beq.n	47a2 <__gedf2+0x96>
    4770:	4248      	negs	r0, r1
    4772:	2101      	movs	r1, #1
    4774:	4308      	orrs	r0, r1
    4776:	bc3c      	pop	{r2, r3, r4, r5}
    4778:	4690      	mov	r8, r2
    477a:	4699      	mov	r9, r3
    477c:	46a2      	mov	sl, r4
    477e:	46ab      	mov	fp, r5
    4780:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4782:	2800      	cmp	r0, #0
    4784:	d0f2      	beq.n	476c <__gedf2+0x60>
    4786:	2001      	movs	r0, #1
    4788:	3b01      	subs	r3, #1
    478a:	4318      	orrs	r0, r3
    478c:	e7f3      	b.n	4776 <__gedf2+0x6a>
    478e:	0037      	movs	r7, r6
    4790:	4307      	orrs	r7, r0
    4792:	d0d1      	beq.n	4738 <__gedf2+0x2c>
    4794:	2002      	movs	r0, #2
    4796:	4240      	negs	r0, r0
    4798:	e7ed      	b.n	4776 <__gedf2+0x6a>
    479a:	465f      	mov	r7, fp
    479c:	4317      	orrs	r7, r2
    479e:	d0ce      	beq.n	473e <__gedf2+0x32>
    47a0:	e7f8      	b.n	4794 <__gedf2+0x88>
    47a2:	42ac      	cmp	r4, r5
    47a4:	dce4      	bgt.n	4770 <__gedf2+0x64>
    47a6:	da03      	bge.n	47b0 <__gedf2+0xa4>
    47a8:	1e48      	subs	r0, r1, #1
    47aa:	2101      	movs	r1, #1
    47ac:	4308      	orrs	r0, r1
    47ae:	e7e2      	b.n	4776 <__gedf2+0x6a>
    47b0:	455e      	cmp	r6, fp
    47b2:	d8dd      	bhi.n	4770 <__gedf2+0x64>
    47b4:	d006      	beq.n	47c4 <__gedf2+0xb8>
    47b6:	2000      	movs	r0, #0
    47b8:	455e      	cmp	r6, fp
    47ba:	d2dc      	bcs.n	4776 <__gedf2+0x6a>
    47bc:	2301      	movs	r3, #1
    47be:	1e48      	subs	r0, r1, #1
    47c0:	4318      	orrs	r0, r3
    47c2:	e7d8      	b.n	4776 <__gedf2+0x6a>
    47c4:	45c4      	cmp	ip, r8
    47c6:	d8d3      	bhi.n	4770 <__gedf2+0x64>
    47c8:	2000      	movs	r0, #0
    47ca:	45c4      	cmp	ip, r8
    47cc:	d3f6      	bcc.n	47bc <__gedf2+0xb0>
    47ce:	e7d2      	b.n	4776 <__gedf2+0x6a>
    47d0:	000007ff 	.word	0x000007ff

000047d4 <__ledf2>:
    47d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    47d6:	464e      	mov	r6, r9
    47d8:	4645      	mov	r5, r8
    47da:	46de      	mov	lr, fp
    47dc:	4657      	mov	r7, sl
    47de:	005c      	lsls	r4, r3, #1
    47e0:	b5e0      	push	{r5, r6, r7, lr}
    47e2:	031f      	lsls	r7, r3, #12
    47e4:	0fdb      	lsrs	r3, r3, #31
    47e6:	4699      	mov	r9, r3
    47e8:	4b2a      	ldr	r3, [pc, #168]	; (4894 <__ledf2+0xc0>)
    47ea:	030e      	lsls	r6, r1, #12
    47ec:	004d      	lsls	r5, r1, #1
    47ee:	0fc9      	lsrs	r1, r1, #31
    47f0:	4684      	mov	ip, r0
    47f2:	0b36      	lsrs	r6, r6, #12
    47f4:	0d6d      	lsrs	r5, r5, #21
    47f6:	468b      	mov	fp, r1
    47f8:	4690      	mov	r8, r2
    47fa:	0b3f      	lsrs	r7, r7, #12
    47fc:	0d64      	lsrs	r4, r4, #21
    47fe:	429d      	cmp	r5, r3
    4800:	d020      	beq.n	4844 <__ledf2+0x70>
    4802:	4b24      	ldr	r3, [pc, #144]	; (4894 <__ledf2+0xc0>)
    4804:	429c      	cmp	r4, r3
    4806:	d022      	beq.n	484e <__ledf2+0x7a>
    4808:	2d00      	cmp	r5, #0
    480a:	d112      	bne.n	4832 <__ledf2+0x5e>
    480c:	4330      	orrs	r0, r6
    480e:	4243      	negs	r3, r0
    4810:	4143      	adcs	r3, r0
    4812:	b2db      	uxtb	r3, r3
    4814:	2c00      	cmp	r4, #0
    4816:	d01f      	beq.n	4858 <__ledf2+0x84>
    4818:	2b00      	cmp	r3, #0
    481a:	d00c      	beq.n	4836 <__ledf2+0x62>
    481c:	464b      	mov	r3, r9
    481e:	2001      	movs	r0, #1
    4820:	3b01      	subs	r3, #1
    4822:	4303      	orrs	r3, r0
    4824:	0018      	movs	r0, r3
    4826:	bc3c      	pop	{r2, r3, r4, r5}
    4828:	4690      	mov	r8, r2
    482a:	4699      	mov	r9, r3
    482c:	46a2      	mov	sl, r4
    482e:	46ab      	mov	fp, r5
    4830:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4832:	2c00      	cmp	r4, #0
    4834:	d016      	beq.n	4864 <__ledf2+0x90>
    4836:	45cb      	cmp	fp, r9
    4838:	d017      	beq.n	486a <__ledf2+0x96>
    483a:	465b      	mov	r3, fp
    483c:	4259      	negs	r1, r3
    483e:	2301      	movs	r3, #1
    4840:	430b      	orrs	r3, r1
    4842:	e7ef      	b.n	4824 <__ledf2+0x50>
    4844:	0031      	movs	r1, r6
    4846:	2302      	movs	r3, #2
    4848:	4301      	orrs	r1, r0
    484a:	d1eb      	bne.n	4824 <__ledf2+0x50>
    484c:	e7d9      	b.n	4802 <__ledf2+0x2e>
    484e:	0039      	movs	r1, r7
    4850:	2302      	movs	r3, #2
    4852:	4311      	orrs	r1, r2
    4854:	d1e6      	bne.n	4824 <__ledf2+0x50>
    4856:	e7d7      	b.n	4808 <__ledf2+0x34>
    4858:	433a      	orrs	r2, r7
    485a:	d1dd      	bne.n	4818 <__ledf2+0x44>
    485c:	2300      	movs	r3, #0
    485e:	2800      	cmp	r0, #0
    4860:	d0e0      	beq.n	4824 <__ledf2+0x50>
    4862:	e7ea      	b.n	483a <__ledf2+0x66>
    4864:	433a      	orrs	r2, r7
    4866:	d1e6      	bne.n	4836 <__ledf2+0x62>
    4868:	e7e7      	b.n	483a <__ledf2+0x66>
    486a:	42a5      	cmp	r5, r4
    486c:	dce5      	bgt.n	483a <__ledf2+0x66>
    486e:	db05      	blt.n	487c <__ledf2+0xa8>
    4870:	42be      	cmp	r6, r7
    4872:	d8e2      	bhi.n	483a <__ledf2+0x66>
    4874:	d007      	beq.n	4886 <__ledf2+0xb2>
    4876:	2300      	movs	r3, #0
    4878:	42be      	cmp	r6, r7
    487a:	d2d3      	bcs.n	4824 <__ledf2+0x50>
    487c:	4659      	mov	r1, fp
    487e:	2301      	movs	r3, #1
    4880:	3901      	subs	r1, #1
    4882:	430b      	orrs	r3, r1
    4884:	e7ce      	b.n	4824 <__ledf2+0x50>
    4886:	45c4      	cmp	ip, r8
    4888:	d8d7      	bhi.n	483a <__ledf2+0x66>
    488a:	2300      	movs	r3, #0
    488c:	45c4      	cmp	ip, r8
    488e:	d3f5      	bcc.n	487c <__ledf2+0xa8>
    4890:	e7c8      	b.n	4824 <__ledf2+0x50>
    4892:	46c0      	nop			; (mov r8, r8)
    4894:	000007ff 	.word	0x000007ff

00004898 <__libc_init_array>:
    4898:	b570      	push	{r4, r5, r6, lr}
    489a:	4e0d      	ldr	r6, [pc, #52]	; (48d0 <__libc_init_array+0x38>)
    489c:	4d0d      	ldr	r5, [pc, #52]	; (48d4 <__libc_init_array+0x3c>)
    489e:	2400      	movs	r4, #0
    48a0:	1bad      	subs	r5, r5, r6
    48a2:	10ad      	asrs	r5, r5, #2
    48a4:	d005      	beq.n	48b2 <__libc_init_array+0x1a>
    48a6:	00a3      	lsls	r3, r4, #2
    48a8:	58f3      	ldr	r3, [r6, r3]
    48aa:	3401      	adds	r4, #1
    48ac:	4798      	blx	r3
    48ae:	42a5      	cmp	r5, r4
    48b0:	d1f9      	bne.n	48a6 <__libc_init_array+0xe>
    48b2:	f000 f9fb 	bl	4cac <_init>
    48b6:	4e08      	ldr	r6, [pc, #32]	; (48d8 <__libc_init_array+0x40>)
    48b8:	4d08      	ldr	r5, [pc, #32]	; (48dc <__libc_init_array+0x44>)
    48ba:	2400      	movs	r4, #0
    48bc:	1bad      	subs	r5, r5, r6
    48be:	10ad      	asrs	r5, r5, #2
    48c0:	d005      	beq.n	48ce <__libc_init_array+0x36>
    48c2:	00a3      	lsls	r3, r4, #2
    48c4:	58f3      	ldr	r3, [r6, r3]
    48c6:	3401      	adds	r4, #1
    48c8:	4798      	blx	r3
    48ca:	42a5      	cmp	r5, r4
    48cc:	d1f9      	bne.n	48c2 <__libc_init_array+0x2a>
    48ce:	bd70      	pop	{r4, r5, r6, pc}
    48d0:	00004cb8 	.word	0x00004cb8
    48d4:	00004cb8 	.word	0x00004cb8
    48d8:	00004cb8 	.word	0x00004cb8
    48dc:	00004cc0 	.word	0x00004cc0

000048e0 <memcpy>:
    48e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    48e2:	0005      	movs	r5, r0
    48e4:	2a0f      	cmp	r2, #15
    48e6:	d92f      	bls.n	4948 <memcpy+0x68>
    48e8:	000b      	movs	r3, r1
    48ea:	4303      	orrs	r3, r0
    48ec:	079b      	lsls	r3, r3, #30
    48ee:	d134      	bne.n	495a <memcpy+0x7a>
    48f0:	0016      	movs	r6, r2
    48f2:	000c      	movs	r4, r1
    48f4:	0003      	movs	r3, r0
    48f6:	3e10      	subs	r6, #16
    48f8:	0935      	lsrs	r5, r6, #4
    48fa:	3501      	adds	r5, #1
    48fc:	012d      	lsls	r5, r5, #4
    48fe:	1945      	adds	r5, r0, r5
    4900:	6827      	ldr	r7, [r4, #0]
    4902:	601f      	str	r7, [r3, #0]
    4904:	6867      	ldr	r7, [r4, #4]
    4906:	605f      	str	r7, [r3, #4]
    4908:	68a7      	ldr	r7, [r4, #8]
    490a:	609f      	str	r7, [r3, #8]
    490c:	68e7      	ldr	r7, [r4, #12]
    490e:	3410      	adds	r4, #16
    4910:	60df      	str	r7, [r3, #12]
    4912:	3310      	adds	r3, #16
    4914:	429d      	cmp	r5, r3
    4916:	d1f3      	bne.n	4900 <memcpy+0x20>
    4918:	230f      	movs	r3, #15
    491a:	439e      	bics	r6, r3
    491c:	3610      	adds	r6, #16
    491e:	1985      	adds	r5, r0, r6
    4920:	1989      	adds	r1, r1, r6
    4922:	4013      	ands	r3, r2
    4924:	2b03      	cmp	r3, #3
    4926:	d91a      	bls.n	495e <memcpy+0x7e>
    4928:	1f1e      	subs	r6, r3, #4
    492a:	2300      	movs	r3, #0
    492c:	08b4      	lsrs	r4, r6, #2
    492e:	3401      	adds	r4, #1
    4930:	00a4      	lsls	r4, r4, #2
    4932:	58cf      	ldr	r7, [r1, r3]
    4934:	50ef      	str	r7, [r5, r3]
    4936:	3304      	adds	r3, #4
    4938:	42a3      	cmp	r3, r4
    493a:	d1fa      	bne.n	4932 <memcpy+0x52>
    493c:	2403      	movs	r4, #3
    493e:	43a6      	bics	r6, r4
    4940:	1d33      	adds	r3, r6, #4
    4942:	4022      	ands	r2, r4
    4944:	18c9      	adds	r1, r1, r3
    4946:	18ed      	adds	r5, r5, r3
    4948:	2a00      	cmp	r2, #0
    494a:	d005      	beq.n	4958 <memcpy+0x78>
    494c:	2300      	movs	r3, #0
    494e:	5ccc      	ldrb	r4, [r1, r3]
    4950:	54ec      	strb	r4, [r5, r3]
    4952:	3301      	adds	r3, #1
    4954:	4293      	cmp	r3, r2
    4956:	d1fa      	bne.n	494e <memcpy+0x6e>
    4958:	bdf0      	pop	{r4, r5, r6, r7, pc}
    495a:	0005      	movs	r5, r0
    495c:	e7f6      	b.n	494c <memcpy+0x6c>
    495e:	001a      	movs	r2, r3
    4960:	e7f2      	b.n	4948 <memcpy+0x68>
    4962:	46c0      	nop			; (mov r8, r8)

00004964 <memset>:
    4964:	b5f0      	push	{r4, r5, r6, r7, lr}
    4966:	0783      	lsls	r3, r0, #30
    4968:	d043      	beq.n	49f2 <memset+0x8e>
    496a:	1e54      	subs	r4, r2, #1
    496c:	2a00      	cmp	r2, #0
    496e:	d03f      	beq.n	49f0 <memset+0x8c>
    4970:	b2ce      	uxtb	r6, r1
    4972:	0002      	movs	r2, r0
    4974:	2503      	movs	r5, #3
    4976:	e002      	b.n	497e <memset+0x1a>
    4978:	001a      	movs	r2, r3
    497a:	3c01      	subs	r4, #1
    497c:	d338      	bcc.n	49f0 <memset+0x8c>
    497e:	1c53      	adds	r3, r2, #1
    4980:	7016      	strb	r6, [r2, #0]
    4982:	422b      	tst	r3, r5
    4984:	d1f8      	bne.n	4978 <memset+0x14>
    4986:	2c03      	cmp	r4, #3
    4988:	d92a      	bls.n	49e0 <memset+0x7c>
    498a:	22ff      	movs	r2, #255	; 0xff
    498c:	400a      	ands	r2, r1
    498e:	0215      	lsls	r5, r2, #8
    4990:	4315      	orrs	r5, r2
    4992:	042a      	lsls	r2, r5, #16
    4994:	4315      	orrs	r5, r2
    4996:	2c0f      	cmp	r4, #15
    4998:	d914      	bls.n	49c4 <memset+0x60>
    499a:	0027      	movs	r7, r4
    499c:	001a      	movs	r2, r3
    499e:	3f10      	subs	r7, #16
    49a0:	093e      	lsrs	r6, r7, #4
    49a2:	3601      	adds	r6, #1
    49a4:	0136      	lsls	r6, r6, #4
    49a6:	199e      	adds	r6, r3, r6
    49a8:	6015      	str	r5, [r2, #0]
    49aa:	6055      	str	r5, [r2, #4]
    49ac:	6095      	str	r5, [r2, #8]
    49ae:	60d5      	str	r5, [r2, #12]
    49b0:	3210      	adds	r2, #16
    49b2:	4296      	cmp	r6, r2
    49b4:	d1f8      	bne.n	49a8 <memset+0x44>
    49b6:	220f      	movs	r2, #15
    49b8:	4397      	bics	r7, r2
    49ba:	3710      	adds	r7, #16
    49bc:	19db      	adds	r3, r3, r7
    49be:	4014      	ands	r4, r2
    49c0:	2c03      	cmp	r4, #3
    49c2:	d90d      	bls.n	49e0 <memset+0x7c>
    49c4:	001a      	movs	r2, r3
    49c6:	1f27      	subs	r7, r4, #4
    49c8:	08be      	lsrs	r6, r7, #2
    49ca:	3601      	adds	r6, #1
    49cc:	00b6      	lsls	r6, r6, #2
    49ce:	199e      	adds	r6, r3, r6
    49d0:	c220      	stmia	r2!, {r5}
    49d2:	42b2      	cmp	r2, r6
    49d4:	d1fc      	bne.n	49d0 <memset+0x6c>
    49d6:	2203      	movs	r2, #3
    49d8:	4397      	bics	r7, r2
    49da:	3704      	adds	r7, #4
    49dc:	19db      	adds	r3, r3, r7
    49de:	4014      	ands	r4, r2
    49e0:	2c00      	cmp	r4, #0
    49e2:	d005      	beq.n	49f0 <memset+0x8c>
    49e4:	b2c9      	uxtb	r1, r1
    49e6:	191c      	adds	r4, r3, r4
    49e8:	7019      	strb	r1, [r3, #0]
    49ea:	3301      	adds	r3, #1
    49ec:	429c      	cmp	r4, r3
    49ee:	d1fb      	bne.n	49e8 <memset+0x84>
    49f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49f2:	0014      	movs	r4, r2
    49f4:	0003      	movs	r3, r0
    49f6:	e7c6      	b.n	4986 <memset+0x22>

000049f8 <register_fini>:
    49f8:	4b03      	ldr	r3, [pc, #12]	; (4a08 <register_fini+0x10>)
    49fa:	b510      	push	{r4, lr}
    49fc:	2b00      	cmp	r3, #0
    49fe:	d002      	beq.n	4a06 <register_fini+0xe>
    4a00:	4802      	ldr	r0, [pc, #8]	; (4a0c <register_fini+0x14>)
    4a02:	f000 f805 	bl	4a10 <atexit>
    4a06:	bd10      	pop	{r4, pc}
    4a08:	00000000 	.word	0x00000000
    4a0c:	00004a21 	.word	0x00004a21

00004a10 <atexit>:
    4a10:	b510      	push	{r4, lr}
    4a12:	0001      	movs	r1, r0
    4a14:	2300      	movs	r3, #0
    4a16:	2200      	movs	r2, #0
    4a18:	2000      	movs	r0, #0
    4a1a:	f000 f81f 	bl	4a5c <__register_exitproc>
    4a1e:	bd10      	pop	{r4, pc}

00004a20 <__libc_fini_array>:
    4a20:	b570      	push	{r4, r5, r6, lr}
    4a22:	4b09      	ldr	r3, [pc, #36]	; (4a48 <__libc_fini_array+0x28>)
    4a24:	4c09      	ldr	r4, [pc, #36]	; (4a4c <__libc_fini_array+0x2c>)
    4a26:	1ae4      	subs	r4, r4, r3
    4a28:	10a4      	asrs	r4, r4, #2
    4a2a:	d009      	beq.n	4a40 <__libc_fini_array+0x20>
    4a2c:	4a08      	ldr	r2, [pc, #32]	; (4a50 <__libc_fini_array+0x30>)
    4a2e:	18a5      	adds	r5, r4, r2
    4a30:	00ad      	lsls	r5, r5, #2
    4a32:	18ed      	adds	r5, r5, r3
    4a34:	682b      	ldr	r3, [r5, #0]
    4a36:	3c01      	subs	r4, #1
    4a38:	4798      	blx	r3
    4a3a:	3d04      	subs	r5, #4
    4a3c:	2c00      	cmp	r4, #0
    4a3e:	d1f9      	bne.n	4a34 <__libc_fini_array+0x14>
    4a40:	f000 f93e 	bl	4cc0 <_fini>
    4a44:	bd70      	pop	{r4, r5, r6, pc}
    4a46:	46c0      	nop			; (mov r8, r8)
    4a48:	00004ccc 	.word	0x00004ccc
    4a4c:	00004cd0 	.word	0x00004cd0
    4a50:	3fffffff 	.word	0x3fffffff

00004a54 <__retarget_lock_acquire_recursive>:
    4a54:	4770      	bx	lr
    4a56:	46c0      	nop			; (mov r8, r8)

00004a58 <__retarget_lock_release_recursive>:
    4a58:	4770      	bx	lr
    4a5a:	46c0      	nop			; (mov r8, r8)

00004a5c <__register_exitproc>:
    4a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a5e:	464e      	mov	r6, r9
    4a60:	4645      	mov	r5, r8
    4a62:	46de      	mov	lr, fp
    4a64:	4657      	mov	r7, sl
    4a66:	b5e0      	push	{r5, r6, r7, lr}
    4a68:	4d36      	ldr	r5, [pc, #216]	; (4b44 <__register_exitproc+0xe8>)
    4a6a:	b083      	sub	sp, #12
    4a6c:	0006      	movs	r6, r0
    4a6e:	6828      	ldr	r0, [r5, #0]
    4a70:	4698      	mov	r8, r3
    4a72:	000f      	movs	r7, r1
    4a74:	4691      	mov	r9, r2
    4a76:	f7ff ffed 	bl	4a54 <__retarget_lock_acquire_recursive>
    4a7a:	4b33      	ldr	r3, [pc, #204]	; (4b48 <__register_exitproc+0xec>)
    4a7c:	681c      	ldr	r4, [r3, #0]
    4a7e:	23a4      	movs	r3, #164	; 0xa4
    4a80:	005b      	lsls	r3, r3, #1
    4a82:	58e0      	ldr	r0, [r4, r3]
    4a84:	2800      	cmp	r0, #0
    4a86:	d052      	beq.n	4b2e <__register_exitproc+0xd2>
    4a88:	6843      	ldr	r3, [r0, #4]
    4a8a:	2b1f      	cmp	r3, #31
    4a8c:	dc13      	bgt.n	4ab6 <__register_exitproc+0x5a>
    4a8e:	1c5a      	adds	r2, r3, #1
    4a90:	9201      	str	r2, [sp, #4]
    4a92:	2e00      	cmp	r6, #0
    4a94:	d128      	bne.n	4ae8 <__register_exitproc+0x8c>
    4a96:	9a01      	ldr	r2, [sp, #4]
    4a98:	3302      	adds	r3, #2
    4a9a:	009b      	lsls	r3, r3, #2
    4a9c:	6042      	str	r2, [r0, #4]
    4a9e:	501f      	str	r7, [r3, r0]
    4aa0:	6828      	ldr	r0, [r5, #0]
    4aa2:	f7ff ffd9 	bl	4a58 <__retarget_lock_release_recursive>
    4aa6:	2000      	movs	r0, #0
    4aa8:	b003      	add	sp, #12
    4aaa:	bc3c      	pop	{r2, r3, r4, r5}
    4aac:	4690      	mov	r8, r2
    4aae:	4699      	mov	r9, r3
    4ab0:	46a2      	mov	sl, r4
    4ab2:	46ab      	mov	fp, r5
    4ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ab6:	4b25      	ldr	r3, [pc, #148]	; (4b4c <__register_exitproc+0xf0>)
    4ab8:	2b00      	cmp	r3, #0
    4aba:	d03d      	beq.n	4b38 <__register_exitproc+0xdc>
    4abc:	20c8      	movs	r0, #200	; 0xc8
    4abe:	0040      	lsls	r0, r0, #1
    4ac0:	e000      	b.n	4ac4 <__register_exitproc+0x68>
    4ac2:	bf00      	nop
    4ac4:	2800      	cmp	r0, #0
    4ac6:	d037      	beq.n	4b38 <__register_exitproc+0xdc>
    4ac8:	22a4      	movs	r2, #164	; 0xa4
    4aca:	2300      	movs	r3, #0
    4acc:	0052      	lsls	r2, r2, #1
    4ace:	58a1      	ldr	r1, [r4, r2]
    4ad0:	6043      	str	r3, [r0, #4]
    4ad2:	6001      	str	r1, [r0, #0]
    4ad4:	50a0      	str	r0, [r4, r2]
    4ad6:	3240      	adds	r2, #64	; 0x40
    4ad8:	5083      	str	r3, [r0, r2]
    4ada:	3204      	adds	r2, #4
    4adc:	5083      	str	r3, [r0, r2]
    4ade:	3301      	adds	r3, #1
    4ae0:	9301      	str	r3, [sp, #4]
    4ae2:	2300      	movs	r3, #0
    4ae4:	2e00      	cmp	r6, #0
    4ae6:	d0d6      	beq.n	4a96 <__register_exitproc+0x3a>
    4ae8:	009a      	lsls	r2, r3, #2
    4aea:	4692      	mov	sl, r2
    4aec:	4482      	add	sl, r0
    4aee:	464a      	mov	r2, r9
    4af0:	2188      	movs	r1, #136	; 0x88
    4af2:	4654      	mov	r4, sl
    4af4:	5062      	str	r2, [r4, r1]
    4af6:	22c4      	movs	r2, #196	; 0xc4
    4af8:	0052      	lsls	r2, r2, #1
    4afa:	4691      	mov	r9, r2
    4afc:	4481      	add	r9, r0
    4afe:	464a      	mov	r2, r9
    4b00:	3987      	subs	r1, #135	; 0x87
    4b02:	4099      	lsls	r1, r3
    4b04:	6812      	ldr	r2, [r2, #0]
    4b06:	468b      	mov	fp, r1
    4b08:	430a      	orrs	r2, r1
    4b0a:	4694      	mov	ip, r2
    4b0c:	464a      	mov	r2, r9
    4b0e:	4661      	mov	r1, ip
    4b10:	6011      	str	r1, [r2, #0]
    4b12:	2284      	movs	r2, #132	; 0x84
    4b14:	4641      	mov	r1, r8
    4b16:	0052      	lsls	r2, r2, #1
    4b18:	50a1      	str	r1, [r4, r2]
    4b1a:	2e02      	cmp	r6, #2
    4b1c:	d1bb      	bne.n	4a96 <__register_exitproc+0x3a>
    4b1e:	0002      	movs	r2, r0
    4b20:	465c      	mov	r4, fp
    4b22:	328d      	adds	r2, #141	; 0x8d
    4b24:	32ff      	adds	r2, #255	; 0xff
    4b26:	6811      	ldr	r1, [r2, #0]
    4b28:	430c      	orrs	r4, r1
    4b2a:	6014      	str	r4, [r2, #0]
    4b2c:	e7b3      	b.n	4a96 <__register_exitproc+0x3a>
    4b2e:	0020      	movs	r0, r4
    4b30:	304d      	adds	r0, #77	; 0x4d
    4b32:	30ff      	adds	r0, #255	; 0xff
    4b34:	50e0      	str	r0, [r4, r3]
    4b36:	e7a7      	b.n	4a88 <__register_exitproc+0x2c>
    4b38:	6828      	ldr	r0, [r5, #0]
    4b3a:	f7ff ff8d 	bl	4a58 <__retarget_lock_release_recursive>
    4b3e:	2001      	movs	r0, #1
    4b40:	4240      	negs	r0, r0
    4b42:	e7b1      	b.n	4aa8 <__register_exitproc+0x4c>
    4b44:	20000ed8 	.word	0x20000ed8
    4b48:	00004ca8 	.word	0x00004ca8
    4b4c:	00000000 	.word	0x00000000
    4b50:	00001396 	.word	0x00001396
    4b54:	000013bc 	.word	0x000013bc
    4b58:	000013e4 	.word	0x000013e4
    4b5c:	0000140c 	.word	0x0000140c
    4b60:	00001434 	.word	0x00001434
    4b64:	00001490 	.word	0x00001490
    4b68:	000014b6 	.word	0x000014b6
    4b6c:	000014de 	.word	0x000014de
    4b70:	00001506 	.word	0x00001506
    4b74:	0000152e 	.word	0x0000152e
    4b78:	6c6c6548 	.word	0x6c6c6548
    4b7c:	6874206f 	.word	0x6874206f
    4b80:	00657265 	.word	0x00657265
    4b84:	121f1314 	.word	0x121f1314
    4b88:	0f292011 	.word	0x0f292011
    4b8c:	00232510 	.word	0x00232510
    4b90:	0000224a 	.word	0x0000224a
    4b94:	0000224e 	.word	0x0000224e
    4b98:	00002252 	.word	0x00002252
    4b9c:	00002256 	.word	0x00002256
    4ba0:	0000225a 	.word	0x0000225a
    4ba4:	0000225e 	.word	0x0000225e
    4ba8:	00003514 	.word	0x00003514
    4bac:	000034e4 	.word	0x000034e4
    4bb0:	000034f6 	.word	0x000034f6
    4bb4:	00003438 	.word	0x00003438
    4bb8:	000034f6 	.word	0x000034f6
    4bbc:	000034da 	.word	0x000034da
    4bc0:	000034f6 	.word	0x000034f6
    4bc4:	00003438 	.word	0x00003438
    4bc8:	000034e4 	.word	0x000034e4
    4bcc:	000034e4 	.word	0x000034e4
    4bd0:	000034da 	.word	0x000034da
    4bd4:	00003438 	.word	0x00003438
    4bd8:	00003440 	.word	0x00003440
    4bdc:	00003440 	.word	0x00003440
    4be0:	00003440 	.word	0x00003440
    4be4:	000034fc 	.word	0x000034fc
    4be8:	000034e4 	.word	0x000034e4
    4bec:	000034e4 	.word	0x000034e4
    4bf0:	000034b8 	.word	0x000034b8
    4bf4:	0000359c 	.word	0x0000359c
    4bf8:	000034b8 	.word	0x000034b8
    4bfc:	000034da 	.word	0x000034da
    4c00:	000034b8 	.word	0x000034b8
    4c04:	0000359c 	.word	0x0000359c
    4c08:	000034e4 	.word	0x000034e4
    4c0c:	000034e4 	.word	0x000034e4
    4c10:	000034da 	.word	0x000034da
    4c14:	0000359c 	.word	0x0000359c
    4c18:	00003440 	.word	0x00003440
    4c1c:	00003440 	.word	0x00003440
    4c20:	00003440 	.word	0x00003440
    4c24:	000035a6 	.word	0x000035a6
    4c28:	00003744 	.word	0x00003744
    4c2c:	00003694 	.word	0x00003694
    4c30:	00003694 	.word	0x00003694
    4c34:	00003692 	.word	0x00003692
    4c38:	00003736 	.word	0x00003736
    4c3c:	00003736 	.word	0x00003736
    4c40:	0000372c 	.word	0x0000372c
    4c44:	00003692 	.word	0x00003692
    4c48:	00003736 	.word	0x00003736
    4c4c:	0000372c 	.word	0x0000372c
    4c50:	00003736 	.word	0x00003736
    4c54:	00003692 	.word	0x00003692
    4c58:	0000373c 	.word	0x0000373c
    4c5c:	0000373c 	.word	0x0000373c
    4c60:	0000373c 	.word	0x0000373c
    4c64:	000037cc 	.word	0x000037cc
    4c68:	00003ad4 	.word	0x00003ad4
    4c6c:	00003994 	.word	0x00003994
    4c70:	00003994 	.word	0x00003994
    4c74:	00003990 	.word	0x00003990
    4c78:	00003aac 	.word	0x00003aac
    4c7c:	00003aac 	.word	0x00003aac
    4c80:	00003a9e 	.word	0x00003a9e
    4c84:	00003990 	.word	0x00003990
    4c88:	00003aac 	.word	0x00003aac
    4c8c:	00003a9e 	.word	0x00003a9e
    4c90:	00003aac 	.word	0x00003aac
    4c94:	00003990 	.word	0x00003990
    4c98:	00003ab4 	.word	0x00003ab4
    4c9c:	00003ab4 	.word	0x00003ab4
    4ca0:	00003ab4 	.word	0x00003ab4
    4ca4:	00003cb8 	.word	0x00003cb8

00004ca8 <_global_impure_ptr>:
    4ca8:	20000ab0                                ... 

00004cac <_init>:
    4cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cae:	46c0      	nop			; (mov r8, r8)
    4cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4cb2:	bc08      	pop	{r3}
    4cb4:	469e      	mov	lr, r3
    4cb6:	4770      	bx	lr

00004cb8 <__init_array_start>:
    4cb8:	000049f9 	.word	0x000049f9

00004cbc <__frame_dummy_init_array_entry>:
    4cbc:	000000dd                                ....

00004cc0 <_fini>:
    4cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cc2:	46c0      	nop			; (mov r8, r8)
    4cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4cc6:	bc08      	pop	{r3}
    4cc8:	469e      	mov	lr, r3
    4cca:	4770      	bx	lr

00004ccc <__fini_array_start>:
    4ccc:	000000b5 	.word	0x000000b5
